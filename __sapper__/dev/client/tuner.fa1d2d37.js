import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, y as createEventDispatcher, z as afterUpdate, e as element, t as text, a as space, f as claim_element, g as children, h as claim_text, c as claim_space, b as detach_dev, j as attr_dev, k as add_location, A as toggle_class, l as insert_dev, m as append_dev, w as set_data_dev, n as noop, B as binding_callbacks, C as validate_each_argument, D as onMount, x as empty, E as transition_in, F as group_outros, G as transition_out, I as check_outros, J as destroy_each, K as create_component, L as claim_component, M as mount_component, N as destroy_component, O as set_style } from './client.93de3704.js';
import { c as createCommonjsModule, a as commonjsRequire } from './_commonjsHelpers.edce28ac.js';

/* src/components/tuner/Note.svelte generated by Svelte v3.38.1 */
const file$3 = "src/components/tuner/Note.svelte";

function create_fragment$3(ctx) {
	let div;
	let t0;
	let t1;
	let span0;
	let t2;
	let span1;
	let t3_value = /*octave*/ ctx[2].toString() + "";
	let t3;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(/*note*/ ctx[1]);
			t1 = space();
			span0 = element("span");
			t2 = space();
			span1 = element("span");
			t3 = text(t3_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, /*note*/ ctx[1]);
			t1 = claim_space(div_nodes);
			span0 = claim_element(div_nodes, "SPAN", { class: true });
			children(span0).forEach(detach_dev);
			t2 = claim_space(div_nodes);
			span1 = claim_element(div_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t3 = claim_text(span1_nodes, t3_value);
			span1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "class", "note-sharp svelte-lzwyxs");
			add_location(span0, file$3, 22, 4, 420);
			attr_dev(span1, "class", "note-octave svelte-lzwyxs");
			add_location(span1, file$3, 23, 4, 457);
			attr_dev(div, "class", "note svelte-lzwyxs");
			toggle_class(div, "active", /*isActive*/ ctx[0]);
			add_location(div, file$3, 20, 0, 339);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			append_dev(div, span0);
			append_dev(div, t2);
			append_dev(div, span1);
			append_dev(span1, t3);
			/*div_binding*/ ctx[4](div);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*note*/ 2) set_data_dev(t0, /*note*/ ctx[1]);
			if (dirty & /*octave*/ 4 && t3_value !== (t3_value = /*octave*/ ctx[2].toString() + "")) set_data_dev(t3, t3_value);

			if (dirty & /*isActive*/ 1) {
				toggle_class(div, "active", /*isActive*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			/*div_binding*/ ctx[4](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Note", slots, []);
	let { isActive } = $$props;
	let { note } = $$props;
	let { octave } = $$props;
	const dispatch = createEventDispatcher();
	let curNodeDom = null;

	afterUpdate(() => {
		if (isActive) {
			dispatch("onActive", curNodeDom);
		}
	});

	const writable_props = ["isActive", "note", "octave"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Note> was created with unknown prop '${key}'`);
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			curNodeDom = $$value;
			$$invalidate(3, curNodeDom);
		});
	}

	$$self.$$set = $$props => {
		if ("isActive" in $$props) $$invalidate(0, isActive = $$props.isActive);
		if ("note" in $$props) $$invalidate(1, note = $$props.note);
		if ("octave" in $$props) $$invalidate(2, octave = $$props.octave);
	};

	$$self.$capture_state = () => ({
		afterUpdate,
		createEventDispatcher,
		isActive,
		note,
		octave,
		dispatch,
		curNodeDom
	});

	$$self.$inject_state = $$props => {
		if ("isActive" in $$props) $$invalidate(0, isActive = $$props.isActive);
		if ("note" in $$props) $$invalidate(1, note = $$props.note);
		if ("octave" in $$props) $$invalidate(2, octave = $$props.octave);
		if ("curNodeDom" in $$props) $$invalidate(3, curNodeDom = $$props.curNodeDom);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [isActive, note, octave, curNodeDom, div_binding];
}

class Note extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { isActive: 0, note: 1, octave: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Note",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*isActive*/ ctx[0] === undefined && !("isActive" in props)) {
			console.warn("<Note> was created without expected prop 'isActive'");
		}

		if (/*note*/ ctx[1] === undefined && !("note" in props)) {
			console.warn("<Note> was created without expected prop 'note'");
		}

		if (/*octave*/ ctx[2] === undefined && !("octave" in props)) {
			console.warn("<Note> was created without expected prop 'octave'");
		}
	}

	get isActive() {
		throw new Error("<Note>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isActive(value) {
		throw new Error("<Note>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get note() {
		throw new Error("<Note>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set note(value) {
		throw new Error("<Note>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get octave() {
		throw new Error("<Note>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set octave(value) {
		throw new Error("<Note>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/tuner/Notes.svelte generated by Svelte v3.38.1 */
const file$2 = "src/components/tuner/Notes.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	child_ctx[12] = i;
	return child_ctx;
}

// (79:6) {#each noteStrings as note, index}
function create_each_block_1(ctx) {
	let note;
	let current;

	note = new Note({
			props: {
				note: /*note*/ ctx[10],
				octave: /*octave*/ ctx[7],
				isActive: /*value*/ ctx[1] === 12 * (/*octave*/ ctx[7] + 1) + /*index*/ ctx[12],
				listDom: /*nodeList*/ ctx[0]
			},
			$$inline: true
		});

	note.$on("onActive", /*handleActive*/ ctx[5]);

	const block = {
		c: function create() {
			create_component(note.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(note.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(note, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const note_changes = {};
			if (dirty & /*value*/ 2) note_changes.isActive = /*value*/ ctx[1] === 12 * (/*octave*/ ctx[7] + 1) + /*index*/ ctx[12];
			if (dirty & /*nodeList*/ 1) note_changes.listDom = /*nodeList*/ ctx[0];
			note.$set(note_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(note.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(note.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(note, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(79:6) {#each noteStrings as note, index}",
		ctx
	});

	return block;
}

// (78:4) {#each octaveList as octave}
function create_each_block$1(ctx) {
	let each_1_anchor;
	let current;
	let each_value_1 = /*noteStrings*/ ctx[4];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*noteStrings, octaveList, value, nodeList, handleActive*/ 59) {
				each_value_1 = /*noteStrings*/ ctx[4];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(78:4) {#each octaveList as octave}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div2;
	let div0;
	let t0;
	let div1;
	let t1_value = /*frequency*/ ctx[2].toFixed(2) + "";
	let t1;
	let span;
	let t2;
	let current;
	let each_value = /*octaveList*/ ctx[3];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			div1 = element("div");
			t1 = text(t1_value);
			span = element("span");
			t2 = text("Hz");
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t1 = claim_text(div1_nodes, t1_value);
			span = claim_element(div1_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t2 = claim_text(span_nodes, "Hz");
			span_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "notes-list svelte-16v8mbg");
			add_location(div0, file$2, 76, 2, 1157);
			attr_dev(span, "class", "svelte-16v8mbg");
			add_location(span, file$2, 83, 47, 1490);
			attr_dev(div1, "class", "frequency svelte-16v8mbg");
			add_location(div1, file$2, 83, 2, 1445);
			attr_dev(div2, "class", "notes svelte-16v8mbg");
			add_location(div2, file$2, 75, 0, 1135);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			/*div0_binding*/ ctx[6](div0);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, t1);
			append_dev(div1, span);
			append_dev(span, t2);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*noteStrings, octaveList, value, nodeList, handleActive*/ 59) {
				each_value = /*octaveList*/ ctx[3];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if ((!current || dirty & /*frequency*/ 4) && t1_value !== (t1_value = /*frequency*/ ctx[2].toFixed(2) + "")) set_data_dev(t1, t1_value);
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
			/*div0_binding*/ ctx[6](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Notes", slots, []);
	let { value } = $$props; //当前检测到的频率value
	let { frequency } = $$props; //当前频率
	let { nodeList } = $$props; // node列表的dom节点
	const octaveList = [2, 3, 4, 5];
	const noteStrings = ["C", "C♯", "D", "D♯", "E", "F", "F♯", "G", "G♯", "A", "A♯", "B"];

	const handleActive = dom => {
		$$invalidate(0, nodeList.scrollLeft = dom.offsetLeft - (nodeList.clientWidth - dom.clientWidth) / 2, nodeList);
	};

	const writable_props = ["value", "frequency", "nodeList"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Notes> was created with unknown prop '${key}'`);
	});

	function div0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			nodeList = $$value;
			$$invalidate(0, nodeList);
		});
	}

	$$self.$$set = $$props => {
		if ("value" in $$props) $$invalidate(1, value = $$props.value);
		if ("frequency" in $$props) $$invalidate(2, frequency = $$props.frequency);
		if ("nodeList" in $$props) $$invalidate(0, nodeList = $$props.nodeList);
	};

	$$self.$capture_state = () => ({
		onMount,
		afterUpdate,
		Note,
		value,
		frequency,
		nodeList,
		octaveList,
		noteStrings,
		handleActive
	});

	$$self.$inject_state = $$props => {
		if ("value" in $$props) $$invalidate(1, value = $$props.value);
		if ("frequency" in $$props) $$invalidate(2, frequency = $$props.frequency);
		if ("nodeList" in $$props) $$invalidate(0, nodeList = $$props.nodeList);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		nodeList,
		value,
		frequency,
		octaveList,
		noteStrings,
		handleActive,
		div0_binding
	];
}

class Notes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { value: 1, frequency: 2, nodeList: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Notes",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*value*/ ctx[1] === undefined && !("value" in props)) {
			console.warn("<Notes> was created without expected prop 'value'");
		}

		if (/*frequency*/ ctx[2] === undefined && !("frequency" in props)) {
			console.warn("<Notes> was created without expected prop 'frequency'");
		}

		if (/*nodeList*/ ctx[0] === undefined && !("nodeList" in props)) {
			console.warn("<Notes> was created without expected prop 'nodeList'");
		}
	}

	get value() {
		throw new Error("<Notes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Notes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get frequency() {
		throw new Error("<Notes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set frequency(value) {
		throw new Error("<Notes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get nodeList() {
		throw new Error("<Notes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set nodeList(value) {
		throw new Error("<Notes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/tuner/Meter.svelte generated by Svelte v3.38.1 */

const file$1 = "src/components/tuner/Meter.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (11:4) {#each arr as i}
function create_each_block(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "style", `transform:rotate(${/*i*/ ctx[2] * 9 - 45}deg)`);
			attr_dev(div, "class", "svelte-yyo3d6");
			toggle_class(div, "meter-scale", true);
			toggle_class(div, "meter-scale-strong", /*i*/ ctx[2] % 5 === 0);
			add_location(div, file$1, 11, 8, 255);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(11:4) {#each arr as i}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div2;
	let div0;
	let t0;
	let div1;
	let div1_style_value;
	let t1;
	let each_value = /*arr*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			children(div0).forEach(detach_dev);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true, style: true });
			children(div1).forEach(detach_dev);
			t1 = claim_space(div2_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div2_nodes);
			}

			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "meter-dot svelte-yyo3d6");
			add_location(div0, file$1, 8, 4, 120);
			attr_dev(div1, "class", "meter-pointer svelte-yyo3d6");
			attr_dev(div1, "style", div1_style_value = `transform:rotate(${/*deg*/ ctx[0]}deg)`);
			add_location(div1, file$1, 9, 4, 154);
			attr_dev(div2, "class", "meter svelte-yyo3d6");
			add_location(div2, file$1, 7, 0, 96);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div2, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*deg*/ 1 && div1_style_value !== (div1_style_value = `transform:rotate(${/*deg*/ ctx[0]}deg)`)) {
				attr_dev(div1, "style", div1_style_value);
			}

			if (dirty & /*arr*/ 2) {
				each_value = /*arr*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Meter", slots, []);
	let { deg = 0 } = $$props;
	const arr = Array.from(new Array(11).keys());
	const writable_props = ["deg"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Meter> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("deg" in $$props) $$invalidate(0, deg = $$props.deg);
	};

	$$self.$capture_state = () => ({ deg, arr });

	$$self.$inject_state = $$props => {
		if ("deg" in $$props) $$invalidate(0, deg = $$props.deg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [deg, arr];
}

class Meter extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { deg: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Meter",
			options,
			id: create_fragment$1.name
		});
	}

	get deg() {
		throw new Error("<Meter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set deg(value) {
		throw new Error("<Meter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var require$$0 = {};

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
function resolve() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : '/';

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
}
// path.normalize(path)
// posix version
function normalize(path) {
  var isPathAbsolute = isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isPathAbsolute).join('/');

  if (!path && !isPathAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isPathAbsolute ? '/' : '') + path;
}
// posix version
function isAbsolute(path) {
  return path.charAt(0) === '/';
}

// posix version
function join() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
}


// path.relative(from, to)
// posix version
function relative(from, to) {
  from = resolve(from).substr(1);
  to = resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
}

var sep = '/';
var delimiter = ':';

function dirname(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
}

function basename(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
}


function extname(path) {
  return splitPath(path)[3];
}
var require$$1 = {
  extname: extname,
  basename: basename,
  dirname: dirname,
  sep: sep,
  delimiter: delimiter,
  relative: relative,
  join: join,
  isAbsolute: isAbsolute,
  normalize: normalize,
  resolve: resolve
};
function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b' ?
    function (str, start, len) { return str.substr(start, len) } :
    function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

var aubio = createCommonjsModule(function (module, exports) {
var Aubio = function (Aubio) {
  Aubio = Aubio || {};

  var c;
  c || (c = typeof Aubio !== "undefined" ? Aubio : {});
  var n = {},
    r;
  for (r in c) c.hasOwnProperty(r) && (n[r] = c[r]);
  c.arguments = [];
  c.thisProgram = "./this.program";
  c.quit = function (a, b) {
    throw b;
  };
  c.preRun = [];
  c.postRun = [];
  var u = !1,
    v = !1,
    aa = !1,
    ba = !1;
  u = "object" === typeof window;
  v = "function" === typeof importScripts;
  aa = "object" === typeof process && "function" === typeof commonjsRequire && !u && !v;
  ba = !u && !aa && !v;
  var w = "";
  function ca(a) {
    return c.locateFile ? c.locateFile(a, w) : w + a;
  }
  if (aa) {
    w = __dirname + "/";
    var da, ea;
    c.read = function (a, b) {
      da || (da = require$$0);
      ea || (ea = require$$1);
      a = ea.normalize(a);
      a = da.readFileSync(a);
      return b ? a : a.toString();
    };
    c.readBinary = function (a) {
      a = c.read(a, !0);
      a.buffer || (a = new Uint8Array(a));
      assert(a.buffer);
      return a;
    };
    1 < process.argv.length &&
      (c.thisProgram = process.argv[1].replace(/\\/g, "/"));
    c.arguments = process.argv.slice(2);
    process.on("uncaughtException", function (a) {
      throw a;
    });
    process.on("unhandledRejection", function () {
      process.exit(1);
    });
    c.quit = function (a) {
      process.exit(a);
    };
    c.inspect = function () {
      return "[Emscripten Module object]";
    };
  } else if (ba)
    "undefined" != typeof read &&
      (c.read = function (a) {
        return read(a);
      }),
      (c.readBinary = function (a) {
        if ("function" === typeof readbuffer)
          return new Uint8Array(readbuffer(a));
        a = read(a, "binary");
        assert("object" === typeof a);
        return a;
      }),
      "undefined" != typeof scriptArgs
        ? (c.arguments = scriptArgs)
        : "undefined" != typeof arguments && (c.arguments = arguments),
      "function" === typeof quit &&
        (c.quit = function (a) {
          quit(a);
        });
  else if (u || v) {
    if (u) {
      var fa = this._currentScript || document.currentScript;
      if (sa) {
        0 !== fa.src.indexOf("blob:") &&
          (w = fa.src.split("/").slice(0, -1).join("/") + "/");
      }
    } else
      v && (w = self.location.href.split("/").slice(0, -1).join("/") + "/");
    c.read = function (a) {
      var b = new XMLHttpRequest();
      b.open("GET", a, !1);
      b.send(null);
      return b.responseText;
    };
    v &&
      (c.readBinary = function (a) {
        var b = new XMLHttpRequest();
        b.open("GET", a, !1);
        b.responseType = "arraybuffer";
        b.send(null);
        return new Uint8Array(b.response);
      });
    c.readAsync = function (a, b, d) {
      var e = new XMLHttpRequest();
      e.open("GET", a, !0);
      e.responseType = "arraybuffer";
      e.onload = function () {
        200 == e.status || (0 == e.status && e.response) ? b(e.response) : d();
      };
      e.onerror = d;
      e.send(null);
    };
    c.setWindowTitle = function (a) {
      document.title = a;
    };
  }
  var ha =
      c.print ||
      ("undefined" !== typeof console
        ? console.log.bind(console)
        : "undefined" !== typeof print
        ? print
        : null),
    x =
      c.printErr ||
      ("undefined" !== typeof printErr
        ? printErr
        : ("undefined" !== typeof console && console.warn.bind(console)) || ha);
  for (r in n) n.hasOwnProperty(r) && (c[r] = n[r]);
  n = void 0;
  function ia(a) {
    var b;
    b || (b = 16);
    return Math.ceil(a / b) * b;
  }
  var ja = {
      "f64-rem": function (a, b) {
        return a % b;
      },
      debugger: function () {
        debugger;
      },
    },
    ka = 0;
  function assert(a, b) {
    a || y("Assertion failed: " + b);
  }
  var la =
    "undefined" !== typeof TextDecoder ? new TextDecoder("utf8") : void 0;
  "undefined" !== typeof TextDecoder && new TextDecoder("utf-16le");
  var buffer, ma, z, na, oa, A, B, pa, qa;
  function ra() {
    c.HEAP8 = ma = new Int8Array(buffer);
    c.HEAP16 = na = new Int16Array(buffer);
    c.HEAP32 = A = new Int32Array(buffer);
    c.HEAPU8 = z = new Uint8Array(buffer);
    c.HEAPU16 = oa = new Uint16Array(buffer);
    c.HEAPU32 = B = new Uint32Array(buffer);
    c.HEAPF32 = pa = new Float32Array(buffer);
    c.HEAPF64 = qa = new Float64Array(buffer);
  }
  var sa, C, ta, ua, va, wa, xa;
  sa = C = ta = ua = va = wa = xa = 0;
  function ya() {
    y(
      "Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " +
        E +
        ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 "
    );
  }
  var za = c.TOTAL_STACK || 5242880,
    E = c.TOTAL_MEMORY || 16777216;
  E < za &&
    x(
      "TOTAL_MEMORY should be larger than TOTAL_STACK, was " +
        E +
        "! (TOTAL_STACK=" +
        za +
        ")"
    );
  c.buffer
    ? (buffer = c.buffer)
    : ("object" === typeof WebAssembly &&
      "function" === typeof WebAssembly.Memory
        ? ((c.wasmMemory = new WebAssembly.Memory({
            initial: E / 65536,
            maximum: E / 65536,
          })),
          (buffer = c.wasmMemory.buffer))
        : (buffer = new ArrayBuffer(E)),
      (c.buffer = buffer));
  ra();
  function Aa(a) {
    for (; 0 < a.length; ) {
      var b = a.shift();
      if ("function" == typeof b) b();
      else {
        var d = b.B;
        "number" === typeof d
          ? void 0 === b.F
            ? c.dynCall_v(d)
            : c.dynCall_vi(d, b.F)
          : d(void 0 === b.F ? null : b.F);
      }
    }
  }
  var Ba = [],
    Ca = [],
    Da = [],
    Ea = [],
    Fa = !1;
  function Ga() {
    var a = c.preRun.shift();
    Ba.unshift(a);
  }
  var Ha = Math.cos,
    Ia = Math.sin,
    F = 0,
    G = null;
  c.preloadedImages = {};
  c.preloadedAudios = {};
  function Ka(a) {
    return String.prototype.startsWith
      ? a.startsWith("data:application/octet-stream;base64,")
      : 0 === a.indexOf("data:application/octet-stream;base64,");
  }
  (function () {
    function a() {
      try {
        console.log("c", c);
        if (c.wasmBinary) return new Uint8Array(c.wasmBinary);
        if (c.readBinary) return c.readBinary(f);
        throw "both async and sync fetching of the wasm failed";
      } catch (g) {
        y(g);
      }
    }
    function b() {
      return c.wasmBinary || (!u && !v) || "function" !== typeof fetch
        ? new Promise(function (b) {
            b(a());
          })
        : fetch(f, { credentials: "same-origin" })
            .then(function (a) {
              if (!a.ok) throw "failed to load wasm binary file at '" + f + "'";
              return a.arrayBuffer();
            })
            .catch(function (e) {
              console.log("e", e, f);
              return a();
            });
    }
    function d(a) {
      function d(a) {
        k = a.exports;
        if (k.memory) {
          a = k.memory;
          var b = c.buffer;
          a.byteLength < b.byteLength &&
            x(
              "the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here"
            );
          b = new Int8Array(b);
          new Int8Array(a).set(b);
          c.buffer = buffer = a;
          ra();
        }
        c.asm = k;
        c.usingWasm = !0;
        F--;
        c.monitorRunDependencies && c.monitorRunDependencies(F);
        0 == F &&
          (G && ((a = G), (G = null), a()));
      }
      function e(a) {
        d(a.instance);
      }
      function g(a) {
        b()
          .then(function (a) {
            return WebAssembly.instantiate(a, h);
          })
          .then(a)
          .catch(function (a) {
            x("failed to asynchronously prepare wasm: " + a);
            y(a);
          });
      }
      if ("object" !== typeof WebAssembly)
        return x("no native wasm support detected"), !1;
      if (!(c.wasmMemory instanceof WebAssembly.Memory))
        return x("no native wasm Memory in use"), !1;
      a.memory = c.wasmMemory;
      h.global = { NaN: NaN, Infinity: Infinity };
      h["global.Math"] = Math;
      h.env = a;
      F++;
      c.monitorRunDependencies && c.monitorRunDependencies(F);
      if (c.instantiateWasm)
        try {
          return c.instantiateWasm(h, d);
        } catch (vb) {
          return (
            x("Module.instantiateWasm callback failed with error: " + vb), !1
          );
        }
      c.wasmBinary ||
      "function" !== typeof WebAssembly.instantiateStreaming ||
      Ka(f) ||
      "function" !== typeof fetch
        ? g(e)
        : WebAssembly.instantiateStreaming(
            fetch(f, { credentials: "same-origin" }),
            h
          )
            .then(e)
            .catch(function (a) {
              x("wasm streaming compile failed: " + a);
              x("falling back to ArrayBuffer instantiation");
              g(e);
            });
      return {};
    }
    var e = "aubio.wast",
      f = "aubio.wasm",
      l = "aubio.temp.asm.js";
    Ka(e) || (e = ca(e));
    Ka(f) || (f = ca(f));
    Ka(l) || (l = ca(l));
    var h = { global: null, env: null, asm2wasm: ja, parent: c },
      k = null;
    c.asmPreload = c.asm;
    c.reallocBuffer;
    c.reallocBuffer = function (a) {
      var b; a: {
          var d = c.usingWasm ? 65536 : 16777216;
          0 < a % d && (a += d - (a % d));
          d = c.buffer.byteLength;
          if (c.usingWasm)
            try {
              b =
                -1 !== c.wasmMemory.grow((a - d) / 65536)
                  ? (c.buffer = c.wasmMemory.buffer)
                  : null;
              break a;
            } catch (t) {
              b = null;
              break a;
            }
          b = void 0;
        }
      return b;
    };
    c.asm = function (a, b) {
      if (!b.table) {
        a = c.wasmTableSize;
        void 0 === a && (a = 1024);
        var e = c.wasmMaxTableSize;
        b.table =
          "object" === typeof WebAssembly &&
          "function" === typeof WebAssembly.Table
            ? void 0 !== e
              ? new WebAssembly.Table({
                  initial: a,
                  maximum: e,
                  element: "anyfunc",
                })
              : new WebAssembly.Table({ initial: a, element: "anyfunc" })
            : Array(a);
        c.wasmTable = b.table;
      }
      b.memoryBase || (b.memoryBase = c.STATIC_BASE);
      b.tableBase || (b.tableBase = 0);
      b = d(b);
      assert(b, "no binaryen method succeeded.");
      return b;
    };
  })();
  sa = 1024;
  C = sa + 9312;
  Ca.push(
    {
      B: function () {
        La();
      },
    },
    {
      B: function () {
        Ma();
      },
    },
    {
      B: function () {
        Na();
      },
    },
    {
      B: function () {
        Oa();
      },
    }
  );
  c.STATIC_BASE = sa;
  c.STATIC_BUMP = 9312;
  C += 16;
  var H = 0;
  function I() {
    H += 4;
    return A[(H - 4) >> 2];
  }
  var Pa = {};
  function J(a, b) {
    H = b;
    try {
      var d = I(),
        e = I(),
        f = I();
      a = 0;
      J.J ||
        ((J.J = [null, [], []]),
        (J.P = function (a, b) {
          var d = J.J[a];
          assert(d);
          if (0 === b || 10 === b) {
            a = 1 === a ? ha : x;
            a: {
              for (var e = (b = 0); d[e]; ) ++e;
              if (16 < e - b && d.subarray && la)
                b = la.decode(d.subarray(b, e));
              else
                for (e = ""; ; ) {
                  var f = d[b++];
                  if (!f) {
                    b = e;
                    break a;
                  }
                  if (f & 128) {
                    var k = d[b++] & 63;
                    if (192 == (f & 224))
                      e += String.fromCharCode(((f & 31) << 6) | k);
                    else {
                      var l = d[b++] & 63;
                      if (224 == (f & 240)) f = ((f & 15) << 12) | (k << 6) | l;
                      else {
                        var h = d[b++] & 63;
                        if (240 == (f & 248))
                          f = ((f & 7) << 18) | (k << 12) | (l << 6) | h;
                        else {
                          var bb = d[b++] & 63;
                          if (248 == (f & 252))
                            f =
                              ((f & 3) << 24) |
                              (k << 18) |
                              (l << 12) |
                              (h << 6) |
                              bb;
                          else {
                            var m = d[b++] & 63;
                            f =
                              ((f & 1) << 30) |
                              (k << 24) |
                              (l << 18) |
                              (h << 12) |
                              (bb << 6) |
                              m;
                          }
                        }
                      }
                      65536 > f
                        ? (e += String.fromCharCode(f))
                        : ((f -= 65536),
                          (e += String.fromCharCode(
                            55296 | (f >> 10),
                            56320 | (f & 1023)
                          )));
                    }
                  } else e += String.fromCharCode(f);
                }
            }
            a(b);
            d.length = 0;
          } else d.push(b);
        }));
      for (b = 0; b < f; b++) {
        for (
          var l = A[(e + 8 * b) >> 2], h = A[(e + (8 * b + 4)) >> 2], k = 0;
          k < h;
          k++
        )
          J.P(d, z[l + k]);
        a += h;
      }
      return a;
    } catch (m) {
      return ("undefined" !== typeof FS && m instanceof FS.I) || y(m), -m.L;
    }
  }
  function Qa(a) {
    switch (a) {
      case 1:
        return 0;
      case 2:
        return 1;
      case 4:
        return 2;
      case 8:
        return 3;
      default:
        throw new TypeError("Unknown type size: " + a);
    }
  }
  var Ra = void 0;
  function K(a) {
    for (var b = ""; z[a]; ) b += Ra[z[a++]];
    return b;
  }
  var L = {},
    M = {},
    Sa = {};
  function Ta(a) {
    if (void 0 === a) return "_unknown";
    a = a.replace(/[^a-zA-Z0-9_]/g, "$");
    var b = a.charCodeAt(0);
    return 48 <= b && 57 >= b ? "_" + a : a;
  }
  function Ua(a, b) {
    a = Ta(a);
    return new Function(
      "body",
      "return function " +
        a +
        '() {\n    "use strict";    return body.apply(this, arguments);\n};\n'
    )(b);
  }
  function Va(a) {
    var b = Error,
      d = Ua(a, function (b) {
        this.name = a;
        this.message = b;
        b = Error(b).stack;
        void 0 !== b &&
          (this.stack =
            this.toString() + "\n" + b.replace(/^Error(:[^\n]*)?\n/, ""));
      });
    d.prototype = Object.create(b.prototype);
    d.prototype.constructor = d;
    d.prototype.toString = function () {
      return void 0 === this.message
        ? this.name
        : this.name + ": " + this.message;
    };
    return d;
  }
  var O = void 0;
  function P(a) {
    throw new O(a);
  }
  var Wa = void 0;
  function Xa(a) {
    throw new Wa(a);
  }
  function Ya(a, b, d) {
    function e(b) {
      b = d(b);
      b.length !== a.length && Xa("Mismatched type converter count");
      for (var e = 0; e < a.length; ++e) Q(a[e], b[e]);
    }
    a.forEach(function (a) {
      Sa[a] = b;
    });
    var f = Array(b.length),
      l = [],
      h = 0;
    b.forEach(function (a, b) {
      M.hasOwnProperty(a)
        ? (f[b] = M[a])
        : (l.push(a),
          L.hasOwnProperty(a) || (L[a] = []),
          L[a].push(function () {
            f[b] = M[a];
            ++h;
            h === l.length && e(f);
          }));
    });
    0 === l.length && e(f);
  }
  function Q(a, b, d) {
    d = d || {};
    if (!("argPackAdvance" in b))
      throw new TypeError(
        "registerType registeredInstance requires argPackAdvance"
      );
    var e = b.name;
    a || P('type "' + e + '" must have a positive integer typeid pointer');
    if (M.hasOwnProperty(a)) {
      if (d.X) return;
      P("Cannot register type '" + e + "' twice");
    }
    M[a] = b;
    delete Sa[a];
    L.hasOwnProperty(a) &&
      ((b = L[a]),
      delete L[a],
      b.forEach(function (a) {
        a();
      }));
  }
  function Za(a) {
    P(a.a.f.b.name + " instance already deleted");
  }
  var $a = void 0,
    ab = [];
  function cb() {
    for (; ab.length; ) {
      var a = ab.pop();
      a.a.s = !1;
      a["delete"]();
    }
  }
  function R() {}
  var db = {};
  function eb(a, b, d) {
    if (void 0 === a[b].j) {
      var e = a[b];
      a[b] = function () {
        a[b].j.hasOwnProperty(arguments.length) ||
          P(
            "Function '" +
              d +
              "' called with an invalid number of arguments (" +
              arguments.length +
              ") - expects one of (" +
              a[b].j +
              ")!"
          );
        return a[b].j[arguments.length].apply(this, arguments);
      };
      a[b].j = [];
      a[b].j[e.A] = e;
    }
  }
  function fb(a, b) {
    c.hasOwnProperty(a)
      ? (P("Cannot register public name '" + a + "' twice"),
        eb(c, a, a),
        c.hasOwnProperty(void 0) &&
          P(
            "Cannot register multiple overloads of a function with the same number of arguments (undefined)!"
          ),
        (c[a].j[void 0] = b))
      : (c[a] = b);
  }
  function gb(a, b, d, e, f, l, h, k) {
    this.name = a;
    this.constructor = b;
    this.u = d;
    this.o = e;
    this.i = f;
    this.T = l;
    this.w = h;
    this.S = k;
    this.Z = [];
  }
  function hb(a, b, d) {
    for (; b !== d; )
      b.w ||
        P(
          "Expected null or instance of " +
            d.name +
            ", got an instance of " +
            b.name
        ),
        (a = b.w(a)),
        (b = b.i);
    return a;
  }
  function ib(a, b) {
    if (null === b) return this.G && P("null is not a valid " + this.name), 0;
    b.a || P('Cannot pass "' + S(b) + '" as a ' + this.name);
    b.a.c || P("Cannot pass deleted object as a pointer of type " + this.name);
    return hb(b.a.c, b.a.f.b, this.b);
  }
  function jb(a, b) {
    if (null === b) {
      this.G && P("null is not a valid " + this.name);
      if (this.D) {
        var d = this.$();
        null !== a && a.push(this.o, d);
        return d;
      }
      return 0;
    }
    b.a || P('Cannot pass "' + S(b) + '" as a ' + this.name);
    b.a.c || P("Cannot pass deleted object as a pointer of type " + this.name);
    !this.C &&
      b.a.f.C &&
      P(
        "Cannot convert argument of type " +
          (b.a.h ? b.a.h.name : b.a.f.name) +
          " to parameter type " +
          this.name
      );
    d = hb(b.a.c, b.a.f.b, this.b);
    if (this.D)
      switch (
        (void 0 === b.a.g &&
          P("Passing raw pointer to smart pointer is illegal"),
        this.ba)
      ) {
        case 0:
          b.a.h === this
            ? (d = b.a.g)
            : P(
                "Cannot convert argument of type " +
                  (b.a.h ? b.a.h.name : b.a.f.name) +
                  " to parameter type " +
                  this.name
              );
          break;
        case 1:
          d = b.a.g;
          break;
        case 2:
          if (b.a.h === this) d = b.a.g;
          else {
            var e = b.clone();
            d = this.aa(
              d,
              T(function () {
                e["delete"]();
              })
            );
            null !== a && a.push(this.o, d);
          }
          break;
        default:
          P("Unsupporting sharing policy");
      }
    return d;
  }
  function kb(a, b) {
    if (null === b) return this.G && P("null is not a valid " + this.name), 0;
    b.a || P('Cannot pass "' + S(b) + '" as a ' + this.name);
    b.a.c || P("Cannot pass deleted object as a pointer of type " + this.name);
    b.a.f.C &&
      P(
        "Cannot convert argument of type " +
          b.a.f.name +
          " to parameter type " +
          this.name
      );
    return hb(b.a.c, b.a.f.b, this.b);
  }
  function lb(a) {
    return this.fromWireType(B[a >> 2]);
  }
  function ob(a, b, d) {
    if (b === d) return a;
    if (void 0 === d.i) return null;
    a = ob(a, b, d.i);
    return null === a ? null : d.S(a);
  }
  var pb = {};
  function qb(a, b) {
    for (void 0 === b && P("ptr should not be undefined"); a.i; )
      (b = a.w(b)), (a = a.i);
    return pb[b];
  }
  function rb(a, b) {
    (b.f && b.c) || Xa("makeClassHandle requires ptr and ptrType");
    !!b.h !== !!b.g && Xa("Both smartPtrType and smartPtr must be specified");
    b.count = { value: 1 };
    return Object.create(a, { a: { value: b } });
  }
  function U(a, b, d, e, f, l, h, k, m, p, g) {
    this.name = a;
    this.b = b;
    this.G = d;
    this.C = e;
    this.D = f;
    this.Y = l;
    this.ba = h;
    this.M = k;
    this.$ = m;
    this.aa = p;
    this.o = g;
    f || void 0 !== b.i
      ? (this.toWireType = jb)
      : ((this.toWireType = e ? ib : kb), (this.l = null));
  }
  function sb(a, b) {
    c.hasOwnProperty(a) || Xa("Replacing nonexistant public symbol");
    c[a] = b;
    c[a].A = void 0;
  }
  function V(a, b) {
    a = K(a);
    if (void 0 !== c["FUNCTION_TABLE_" + a])
      var d = c["FUNCTION_TABLE_" + a][b];
    else if ("undefined" !== typeof FUNCTION_TABLE) d = FUNCTION_TABLE[b];
    else {
      d = c.asm["dynCall_" + a];
      void 0 === d &&
        ((d = c.asm["dynCall_" + a.replace(/f/g, "d")]),
        void 0 === d && P("No dynCall invoker for signature: " + a));
      for (var e = [], f = 1; f < a.length; ++f) e.push("a" + f);
      f =
        "return function " +
        ("dynCall_" + a + "_" + b) +
        "(" +
        e.join(", ") +
        ") {\n";
      f +=
        "    return dynCall(rawFunction" +
        (e.length ? ", " : "") +
        e.join(", ") +
        ");\n";
      d = new Function("dynCall", "rawFunction", f + "};\n")(d, b);
    }
    "function" !== typeof d &&
      P("unknown function pointer with signature " + a + ": " + b);
    return d;
  }
  var tb = void 0;
  function ub(a) {
    a = wb(a);
    var b = K(a);
    X(a);
    return b;
  }
  function xb(a, b) {
    function d(a) {
      f[a] || M[a] || (Sa[a] ? Sa[a].forEach(d) : (e.push(a), (f[a] = !0)));
    }
    var e = [],
      f = {};
    b.forEach(d);
    throw new tb(a + ": " + e.map(ub).join([", "]));
  }
  function yb(a, b) {
    for (var d = [], e = 0; e < a; e++) d.push(A[(b >> 2) + e]);
    return d;
  }
  function zb(a) {
    for (; a.length; ) {
      var b = a.pop();
      a.pop()(b);
    }
  }
  function Ab(a) {
    var b = Function;
    if (!(b instanceof Function))
      throw new TypeError(
        "new_ called with constructor type " +
          typeof b +
          " which is not a function"
      );
    var d = Ua(b.name || "unknownFunctionName", function () {});
    d.prototype = b.prototype;
    d = new d();
    a = b.apply(d, a);
    return a instanceof Object ? a : d;
  }
  var Bb = [],
    Y = [{}, { value: void 0 }, { value: null }, { value: !0 }, { value: !1 }];
  function Cb(a) {
    4 < a && 0 === --Y[a].H && ((Y[a] = void 0), Bb.push(a));
  }
  function T(a) {
    switch (a) {
      case void 0:
        return 1;
      case null:
        return 2;
      case !0:
        return 3;
      case !1:
        return 4;
      default:
        var b = Bb.length ? Bb.pop() : Y.length;
        Y[b] = { H: 1, value: a };
        return b;
    }
  }
  function S(a) {
    if (null === a) return "null";
    var b = typeof a;
    return "object" === b || "array" === b || "function" === b
      ? a.toString()
      : "" + a;
  }
  function Db(a, b) {
    switch (b) {
      case 2:
        return function (a) {
          return this.fromWireType(pa[a >> 2]);
        };
      case 3:
        return function (a) {
          return this.fromWireType(qa[a >> 3]);
        };
      default:
        throw new TypeError("Unknown float type: " + a);
    }
  }
  function Eb(a, b, d) {
    switch (b) {
      case 0:
        return d
          ? function (a) {
              return ma[a];
            }
          : function (a) {
              return z[a];
            };
      case 1:
        return d
          ? function (a) {
              return na[a >> 1];
            }
          : function (a) {
              return oa[a >> 1];
            };
      case 2:
        return d
          ? function (a) {
              return A[a >> 2];
            }
          : function (a) {
              return B[a >> 2];
            };
      default:
        throw new TypeError("Unknown integer type: " + a);
    }
  }
  function Z(a) {
    a || P("Cannot use deleted val. handle = " + a);
    return Y[a].value;
  }
  function Fb(a, b) {
    var d = M[a];
    void 0 === d && P(b + " has unknown type " + ub(a));
    return d;
  }
  for (var Gb = {}, Hb = Array(256), Ib = 0; 256 > Ib; ++Ib)
    Hb[Ib] = String.fromCharCode(Ib);
  Ra = Hb;
  O = c.BindingError = Va("BindingError");
  Wa = c.InternalError = Va("InternalError");
  R.prototype.isAliasOf = function (a) {
    if (!(this instanceof R && a instanceof R)) return !1;
    var b = this.a.f.b,
      d = this.a.c,
      e = a.a.f.b;
    for (a = a.a.c; b.i; ) (d = b.w(d)), (b = b.i);
    for (; e.i; ) (a = e.w(a)), (e = e.i);
    return b === e && d === a;
  };
  R.prototype.clone = function () {
    this.a.c || Za(this);
    if (this.a.v) return (this.a.count.value += 1), this;
    var a = this.a;
    a = Object.create(Object.getPrototypeOf(this), {
      a: {
        value: {
          count: a.count,
          s: a.s,
          v: a.v,
          c: a.c,
          f: a.f,
          g: a.g,
          h: a.h,
        },
      },
    });
    a.a.count.value += 1;
    a.a.s = !1;
    return a;
  };
  R.prototype["delete"] = function () {
    this.a.c || Za(this);
    this.a.s && !this.a.v && P("Object already scheduled for deletion");
    --this.a.count.value;
    if (0 === this.a.count.value) {
      var a = this.a;
      a.g ? a.h.o(a.g) : a.f.b.o(a.c);
    }
    this.a.v || ((this.a.g = void 0), (this.a.c = void 0));
  };
  R.prototype.isDeleted = function () {
    return !this.a.c;
  };
  R.prototype.deleteLater = function () {
    this.a.c || Za(this);
    this.a.s && !this.a.v && P("Object already scheduled for deletion");
    ab.push(this);
    1 === ab.length && $a && $a(cb);
    this.a.s = !0;
    return this;
  };
  U.prototype.U = function (a) {
    this.M && (a = this.M(a));
    return a;
  };
  U.prototype.K = function (a) {
    this.o && this.o(a);
  };
  U.prototype.argPackAdvance = 8;
  U.prototype.readValueFromPointer = lb;
  U.prototype.deleteObject = function (a) {
    if (null !== a) a["delete"]();
  };
  U.prototype.fromWireType = function (a) {
    function b() {
      return this.D
        ? rb(this.b.u, { f: this.Y, c: d, h: this, g: a })
        : rb(this.b.u, { f: this, c: a });
    }
    var d = this.U(a);
    if (!d) return this.K(a), null;
    var e = qb(this.b, d);
    if (void 0 !== e) {
      if (0 === e.a.count.value) return (e.a.c = d), (e.a.g = a), e.clone();
      e = e.clone();
      this.K(a);
      return e;
    }
    e = this.b.T(d);
    e = db[e];
    if (!e) return b.call(this);
    e = this.C ? e.R : e.pointerType;
    var f = ob(d, this.b, e.b);
    return null === f
      ? b.call(this)
      : this.D
      ? rb(e.b.u, { f: e, c: f, h: this, g: a })
      : rb(e.b.u, { f: e, c: f });
  };
  c.getInheritedInstanceCount = function () {
    return Object.keys(pb).length;
  };
  c.getLiveInheritedInstances = function () {
    var a = [],
      b;
    for (b in pb) pb.hasOwnProperty(b) && a.push(pb[b]);
    return a;
  };
  c.flushPendingDeletes = cb;
  c.setDelayFunction = function (a) {
    $a = a;
    ab.length && $a && $a(cb);
  };
  tb = c.UnboundTypeError = Va("UnboundTypeError");
  c.count_emval_handles = function () {
    for (var a = 0, b = 5; b < Y.length; ++b) void 0 !== Y[b] && ++a;
    return a;
  };
  c.get_first_emval = function () {
    for (var a = 5; a < Y.length; ++a) if (void 0 !== Y[a]) return Y[a];
    return null;
  };
  var Jb = C;
  C = (C + 4 + 15) & -16;
  xa = Jb;
  ta = ua = ia(C);
  va = ta + za;
  wa = ia(va);
  A[xa >> 2] = wa;
  c.wasmTableSize = 83;
  c.wasmMaxTableSize = 83;
  c.N = {};
  c.O = {
    abort: y,
    enlargeMemory: function () {
      ya();
    },
    getTotalMemory: function () {
      return E;
    },
    abortOnCannotGrowMemory: ya,
    ___setErrNo: function (a) {
      c.___errno_location && (A[c.___errno_location() >> 2] = a);
      return a;
    },
    ___syscall140: function (a, b) {
      H = b;
      try {
        var d = Pa.V();
        I();
        var e = I(),
          f = I(),
          l = I();
        FS.ea(d, e, l);
        A[f >> 2] = d.position;
        d.W && 0 === e && 0 === l && (d.W = null);
        return 0;
      } catch (h) {
        return ("undefined" !== typeof FS && h instanceof FS.I) || y(h), -h.L;
      }
    },
    ___syscall146: J,
    ___syscall54: function (a, b) {
      H = b;
      return 0;
    },
    ___syscall6: function (a, b) {
      H = b;
      try {
        var d = Pa.V();
        FS.close(d);
        return 0;
      } catch (e) {
        return ("undefined" !== typeof FS && e instanceof FS.I) || y(e), -e.L;
      }
    },
    __embind_register_bool: function (a, b, d, e, f) {
      var l = Qa(d);
      b = K(b);
      Q(a, {
        name: b,
        fromWireType: function (a) {
          return !!a;
        },
        toWireType: function (a, b) {
          return b ? e : f;
        },
        argPackAdvance: 8,
        readValueFromPointer: function (a) {
          if (1 === d) var e = ma;
          else if (2 === d) e = na;
          else if (4 === d) e = A;
          else throw new TypeError("Unknown boolean type size: " + b);
          return this.fromWireType(e[a >> l]);
        },
        l: null,
      });
    },
    __embind_register_class: function (a, b, d, e, f, l, h, k, m, p, g, q, D) {
      g = K(g);
      l = V(f, l);
      k && (k = V(h, k));
      p && (p = V(m, p));
      D = V(q, D);
      var t = Ta(g);
      fb(t, function () {
        xb("Cannot construct " + g + " due to unbound types", [e]);
      });
      Ya([a, b, d], e ? [e] : [], function (b) {
        b = b[0];
        if (e) {
          var d = b.b;
          var f = d.u;
        } else f = R.prototype;
        b = Ua(t, function () {
          if (Object.getPrototypeOf(this) !== h)
            throw new O("Use 'new' to construct " + g);
          if (void 0 === m.m) throw new O(g + " has no accessible constructor");
          var a = m.m[arguments.length];
          if (void 0 === a)
            throw new O(
              "Tried to invoke ctor of " +
                g +
                " with invalid number of parameters (" +
                arguments.length +
                ") - expected (" +
                Object.keys(m.m).toString() +
                ") parameters instead!"
            );
          return a.apply(this, arguments);
        });
        var h = Object.create(f, { constructor: { value: b } });
        b.prototype = h;
        var m = new gb(g, b, h, D, d, l, k, p);
        d = new U(g, m, !0, !1, !1);
        f = new U(g + "*", m, !1, !1, !1);
        var q = new U(g + " const*", m, !1, !0, !1);
        db[a] = { pointerType: f, R: q };
        sb(t, b);
        return [d, f, q];
      });
    },
    __embind_register_class_constructor: function (a, b, d, e, f, l) {
      var h = yb(b, d);
      f = V(e, f);
      Ya([], [a], function (a) {
        a = a[0];
        var d = "constructor " + a.name;
        void 0 === a.b.m && (a.b.m = []);
        if (void 0 !== a.b.m[b - 1])
          throw new O(
            "Cannot register multiple constructors with identical number of parameters (" +
              (b - 1) +
              ") for class '" +
              a.name +
              "'! Overload resolution is currently only performed using the parameter count, not actual type info!"
          );
        a.b.m[b - 1] = function () {
          xb("Cannot construct " + a.name + " due to unbound types", h);
        };
        Ya([], h, function (e) {
          a.b.m[b - 1] = function () {
            arguments.length !== b - 1 &&
              P(
                d +
                  " called with " +
                  arguments.length +
                  " arguments, expected " +
                  (b - 1)
              );
            var a = [],
              h = Array(b);
            h[0] = l;
            for (var k = 1; k < b; ++k)
              h[k] = e[k].toWireType(a, arguments[k - 1]);
            h = f.apply(null, h);
            zb(a);
            return e[0].fromWireType(h);
          };
          return [];
        });
        return [];
      });
    },
    __embind_register_class_function: function (a, b, d, e, f, l, h, k) {
      var m = yb(d, e);
      b = K(b);
      l = V(f, l);
      Ya([], [a], function (a) {
        function e() {
          xb("Cannot call " + f + " due to unbound types", m);
        }
        a = a[0];
        var f = a.name + "." + b;
        k && a.b.Z.push(b);
        var p = a.b.u,
          t = p[b];
        void 0 === t ||
        (void 0 === t.j && t.className !== a.name && t.A === d - 2)
          ? ((e.A = d - 2), (e.className = a.name), (p[b] = e))
          : (eb(p, b, f), (p[b].j[d - 2] = e));
        Ya([], m, function (e) {
          var k = f,
            g = a,
            m = l,
            q = e.length;
          2 > q &&
            P(
              "argTypes array size mismatch! Must at least get return value and 'this' types!"
            );
          var t = null !== e[1] && null !== g,
            D = !1;
          for (g = 1; g < e.length; ++g)
            if (null !== e[g] && void 0 === e[g].l) {
              D = !0;
              break;
            }
          var mb = "void" !== e[0].name,
            N = "",
            W = "";
          for (g = 0; g < q - 2; ++g)
            (N += (0 !== g ? ", " : "") + "arg" + g),
              (W += (0 !== g ? ", " : "") + "arg" + g + "Wired");
          k =
            "return function " +
            Ta(k) +
            "(" +
            N +
            ") {\nif (arguments.length !== " +
            (q - 2) +
            ") {\nthrowBindingError('function " +
            k +
            " called with ' + arguments.length + ' arguments, expected " +
            (q - 2) +
            " args!');\n}\n";
          D && (k += "var destructors = [];\n");
          var nb = D ? "destructors" : "null";
          N =
            "throwBindingError invoker fn runDestructors retType classParam".split(
              " "
            );
          m = [P, m, h, zb, e[0], e[1]];
          t &&
            (k += "var thisWired = classParam.toWireType(" + nb + ", this);\n");
          for (g = 0; g < q - 2; ++g)
            (k +=
              "var arg" +
              g +
              "Wired = argType" +
              g +
              ".toWireType(" +
              nb +
              ", arg" +
              g +
              "); // " +
              e[g + 2].name +
              "\n"),
              N.push("argType" + g),
              m.push(e[g + 2]);
          t && (W = "thisWired" + (0 < W.length ? ", " : "") + W);
          k +=
            (mb ? "var rv = " : "") +
            "invoker(fn" +
            (0 < W.length ? ", " : "") +
            W +
            ");\n";
          if (D) k += "runDestructors(destructors);\n";
          else
            for (g = t ? 1 : 2; g < e.length; ++g)
              (q = 1 === g ? "thisWired" : "arg" + (g - 2) + "Wired"),
                null !== e[g].l &&
                  ((k += q + "_dtor(" + q + "); // " + e[g].name + "\n"),
                  N.push(q + "_dtor"),
                  m.push(e[g].l));
          mb && (k += "var ret = retType.fromWireType(rv);\nreturn ret;\n");
          N.push(k + "}\n");
          e = Ab(N).apply(null, m);
          void 0 === p[b].j ? ((e.A = d - 2), (p[b] = e)) : (p[b].j[d - 2] = e);
          return [];
        });
        return [];
      });
    },
    __embind_register_emval: function (a, b) {
      b = K(b);
      Q(a, {
        name: b,
        fromWireType: function (a) {
          var b = Y[a].value;
          Cb(a);
          return b;
        },
        toWireType: function (a, b) {
          return T(b);
        },
        argPackAdvance: 8,
        readValueFromPointer: lb,
        l: null,
      });
    },
    __embind_register_float: function (a, b, d) {
      d = Qa(d);
      b = K(b);
      Q(a, {
        name: b,
        fromWireType: function (a) {
          return a;
        },
        toWireType: function (a, b) {
          if ("number" !== typeof b && "boolean" !== typeof b)
            throw new TypeError(
              'Cannot convert "' + S(b) + '" to ' + this.name
            );
          return b;
        },
        argPackAdvance: 8,
        readValueFromPointer: Db(b, d),
        l: null,
      });
    },
    __embind_register_integer: function (a, b, d, e, f) {
      function l(a) {
        return a;
      }
      b = K(b);
      -1 === f && (f = 4294967295);
      var h = Qa(d);
      if (0 === e) {
        var k = 32 - 8 * d;
        l = function (a) {
          return (a << k) >>> k;
        };
      }
      var m = -1 != b.indexOf("unsigned");
      Q(a, {
        name: b,
        fromWireType: l,
        toWireType: function (a, d) {
          if ("number" !== typeof d && "boolean" !== typeof d)
            throw new TypeError(
              'Cannot convert "' + S(d) + '" to ' + this.name
            );
          if (d < e || d > f)
            throw new TypeError(
              'Passing a number "' +
                S(d) +
                '" from JS side to C/C++ side to an argument of type "' +
                b +
                '", which is outside the valid range [' +
                e +
                ", " +
                f +
                "]!"
            );
          return m ? d >>> 0 : d | 0;
        },
        argPackAdvance: 8,
        readValueFromPointer: Eb(b, h, 0 !== e),
        l: null,
      });
    },
    __embind_register_memory_view: function (a, b, d) {
      function e(a) {
        a >>= 2;
        var b = B;
        return new f(b.buffer, b[a + 1], b[a]);
      }
      var f = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,
      ][b];
      d = K(d);
      Q(
        a,
        {
          name: d,
          fromWireType: e,
          argPackAdvance: 8,
          readValueFromPointer: e,
        },
        { X: !0 }
      );
    },
    __embind_register_std_string: function (a, b) {
      b = K(b);
      Q(a, {
        name: b,
        fromWireType: function (a) {
          for (var b = B[a >> 2], d = Array(b), l = 0; l < b; ++l)
            d[l] = String.fromCharCode(z[a + 4 + l]);
          X(a);
          return d.join("");
        },
        toWireType: function (a, b) {
          function d(a, b) {
            return a[b];
          }
          function e(a, b) {
            return a.charCodeAt(b);
          }
          b instanceof ArrayBuffer && (b = new Uint8Array(b));
          var h;
          b instanceof Uint8Array
            ? (h = d)
            : b instanceof Uint8ClampedArray
            ? (h = d)
            : b instanceof Int8Array
            ? (h = d)
            : "string" === typeof b
            ? (h = e)
            : P("Cannot pass non-string to std::string");
          var k = b.length,
            m = Kb(4 + k);
          B[m >> 2] = k;
          for (var p = 0; p < k; ++p) {
            var g = h(b, p);
            255 < g &&
              (X(m),
              P("String has UTF-16 code units that do not fit in 8 bits"));
            z[m + 4 + p] = g;
          }
          null !== a && a.push(X, m);
          return m;
        },
        argPackAdvance: 8,
        readValueFromPointer: lb,
        l: function (a) {
          X(a);
        },
      });
    },
    __embind_register_std_wstring: function (a, b, d) {
      d = K(d);
      if (2 === b) {
        var e = function () {
          return oa;
        };
        var f = 1;
      } else
        4 === b &&
          ((e = function () {
            return B;
          }),
          (f = 2));
      Q(a, {
        name: d,
        fromWireType: function (a) {
          for (
            var b = e(), d = B[a >> 2], l = Array(d), p = (a + 4) >> f, g = 0;
            g < d;
            ++g
          )
            l[g] = String.fromCharCode(b[p + g]);
          X(a);
          return l.join("");
        },
        toWireType: function (a, d) {
          var k = e(),
            h = d.length,
            l = Kb(4 + h * b);
          B[l >> 2] = h;
          for (var g = (l + 4) >> f, q = 0; q < h; ++q)
            k[g + q] = d.charCodeAt(q);
          null !== a && a.push(X, l);
          return l;
        },
        argPackAdvance: 8,
        readValueFromPointer: lb,
        l: function (a) {
          X(a);
        },
      });
    },
    __embind_register_void: function (a, b) {
      b = K(b);
      Q(a, {
        da: !0,
        name: b,
        argPackAdvance: 0,
        fromWireType: function () {},
        toWireType: function () {},
      });
    },
    __emval_as: function (a, b, d) {
      a = Z(a);
      b = Fb(b, "emval::as");
      var e = [],
        f = T(e);
      A[d >> 2] = f;
      return b.toWireType(e, a);
    },
    __emval_decref: Cb,
    __emval_get_property: function (a, b) {
      a = Z(a);
      b = Z(b);
      return T(a[b]);
    },
    __emval_incref: function (a) {
      4 < a && (Y[a].H += 1);
    },
    __emval_new_array: function () {
      return T([]);
    },
    __emval_new_cstring: function (a) {
      var b = Gb[a];
      return T(void 0 === b ? K(a) : b);
    },
    __emval_new_object: function () {
      return T({});
    },
    __emval_run_destructors: function (a) {
      zb(Y[a].value);
      Cb(a);
    },
    __emval_set_property: function (a, b, d) {
      a = Z(a);
      b = Z(b);
      d = Z(d);
      a[b] = d;
    },
    __emval_take_value: function (a, b) {
      a = Fb(a, "_emval_take_value");
      a = a.readValueFromPointer(b);
      return T(a);
    },
    _abort: function () {
      c.abort();
    },
    _emscripten_memcpy_big: function (a, b, d) {
      z.set(z.subarray(b, b + d), a);
      return a;
    },
    _llvm_cos_f32: Ha,
    _llvm_log10_f32: function (a) {
      return Math.log(a) / Math.LN10;
    },
    _llvm_sin_f32: Ia,
    DYNAMICTOP_PTR: xa,
    STACKTOP: ua,
  };
  var Lb = c.asm(c.N, c.O, buffer);
  c.asm = Lb;
  var Oa = (c.__GLOBAL__sub_I_bind_cpp = function () {
      return c.asm.__GLOBAL__sub_I_bind_cpp.apply(null, arguments);
    }),
    La = (c.__GLOBAL__sub_I_fft_cc = function () {
      return c.asm.__GLOBAL__sub_I_fft_cc.apply(null, arguments);
    }),
    Na = (c.__GLOBAL__sub_I_pitch_cc = function () {
      return c.asm.__GLOBAL__sub_I_pitch_cc.apply(null, arguments);
    }),
    Ma = (c.__GLOBAL__sub_I_tempo_cc = function () {
      return c.asm.__GLOBAL__sub_I_tempo_cc.apply(null, arguments);
    }),
    wb = (c.___getTypeName = function () {
      return c.asm.___getTypeName.apply(null, arguments);
    }),
    X = (c._free = function () {
      return c.asm._free.apply(null, arguments);
    }),
    Kb = (c._malloc = function () {
      return c.asm._malloc.apply(null, arguments);
    });
  c.dynCall_ffii = function () {
    return c.asm.dynCall_ffii.apply(null, arguments);
  };
  c.dynCall_fi = function () {
    return c.asm.dynCall_fi.apply(null, arguments);
  };
  c.dynCall_fii = function () {
    return c.asm.dynCall_fii.apply(null, arguments);
  };
  c.dynCall_fiii = function () {
    return c.asm.dynCall_fiii.apply(null, arguments);
  };
  c.dynCall_ii = function () {
    return c.asm.dynCall_ii.apply(null, arguments);
  };
  c.dynCall_iii = function () {
    return c.asm.dynCall_iii.apply(null, arguments);
  };
  c.dynCall_iiii = function () {
    return c.asm.dynCall_iiii.apply(null, arguments);
  };
  c.dynCall_iiiii = function () {
    return c.asm.dynCall_iiiii.apply(null, arguments);
  };
  c.dynCall_iiiiii = function () {
    return c.asm.dynCall_iiiiii.apply(null, arguments);
  };
  c.dynCall_v = function () {
    return c.asm.dynCall_v.apply(null, arguments);
  };
  c.dynCall_vi = function () {
    return c.asm.dynCall_vi.apply(null, arguments);
  };
  c.dynCall_viii = function () {
    return c.asm.dynCall_viii.apply(null, arguments);
  };
  c.asm = Lb;
  c.then = function (a) {
    if (c.calledRun) a(c);
    else {
      var b = c.onRuntimeInitialized;
      c.onRuntimeInitialized = function () {
        b && b();
        a(c);
      };
    }
    return c;
  };
  G = function Mb() {
    c.calledRun || Nb();
    c.calledRun || (G = Mb);
  };
  function Nb() {
    function a() {
      if (!c.calledRun && ((c.calledRun = !0), !ka)) {
        Fa || ((Fa = !0), Aa(Ca));
        Aa(Da);
        if (c.onRuntimeInitialized) c.onRuntimeInitialized();
        if (c.postRun)
          for (
            "function" == typeof c.postRun && (c.postRun = [c.postRun]);
            c.postRun.length;

          ) {
            var a = c.postRun.shift();
            Ea.unshift(a);
          }
        Aa(Ea);
      }
    }
    if (!(0 < F)) {
      if (c.preRun)
        for (
          "function" == typeof c.preRun && (c.preRun = [c.preRun]);
          c.preRun.length;

        )
          Ga();
      Aa(Ba);
      0 < F ||
        c.calledRun ||
        (c.setStatus
          ? (c.setStatus("Running..."),
            setTimeout(function () {
              setTimeout(function () {
                c.setStatus("");
              }, 1);
              a();
            }, 1))
          : a());
    }
  }
  c.run = Nb;
  function y(a) {
    if (c.onAbort) c.onAbort(a);
    void 0 !== a ? (ha(a), x(a), (a = JSON.stringify(a))) : (a = "");
    ka = !0;
    throw "abort(" + a + "). Build with -s ASSERTIONS=1 for more info.";
  }
  c.abort = y;
  if (c.preInit)
    for (
      "function" == typeof c.preInit && (c.preInit = [c.preInit]);
      0 < c.preInit.length;

    )
      c.preInit.pop()();
  c.noExitRuntime = !0;
  Nb();

  return Aubio;
};
Aubio = Aubio.bind({
  _currentScript:
    typeof document !== "undefined" ? document.currentScript : undefined,
});
module.exports = Aubio;
});

/* src/routes/gadget/tuner.svelte generated by Svelte v3.38.1 */
const file = "src/routes/gadget/tuner.svelte";

function create_fragment(ctx) {
	let div1;
	let canvas;
	let t0;
	let meter;
	let t1;
	let notes;
	let t2;
	let div0;
	let t3;
	let sub;
	let t4;
	let t5;
	let span;
	let t6;
	let t7;
	let current;

	meter = new Meter({
			props: { deg: /*curDeg*/ ctx[1] },
			$$inline: true
		});

	notes = new Notes({
			props: {
				value: /*curValue*/ ctx[0],
				frequency: /*curFrq*/ ctx[2]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			canvas = element("canvas");
			t0 = space();
			create_component(meter.$$.fragment);
			t1 = space();
			create_component(notes.$$.fragment);
			t2 = space();
			div0 = element("div");
			t3 = text("A");
			sub = element("sub");
			t4 = text("4");
			t5 = text(" = ");
			span = element("span");
			t6 = text("440");
			t7 = text(" Hz");
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { style: true });
			var div1_nodes = children(div1);
			canvas = claim_element(div1_nodes, "CANVAS", { class: true });
			children(canvas).forEach(detach_dev);
			t0 = claim_space(div1_nodes);
			claim_component(meter.$$.fragment, div1_nodes);
			t1 = claim_space(div1_nodes);
			claim_component(notes.$$.fragment, div1_nodes);
			t2 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t3 = claim_text(div0_nodes, "A");
			sub = claim_element(div0_nodes, "SUB", {});
			var sub_nodes = children(sub);
			t4 = claim_text(sub_nodes, "4");
			sub_nodes.forEach(detach_dev);
			t5 = claim_text(div0_nodes, " = ");
			span = claim_element(div0_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t6 = claim_text(span_nodes, "440");
			span_nodes.forEach(detach_dev);
			t7 = claim_text(div0_nodes, " Hz");
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(canvas, "class", "frequency-bars");
			add_location(canvas, file, 98, 3, 2387);
			add_location(sub, file, 101, 21, 2524);
			attr_dev(span, "class", "svelte-1lwvtju");
			add_location(span, file, 101, 36, 2539);
			attr_dev(div0, "class", "a4 svelte-1lwvtju");
			add_location(div0, file, 101, 4, 2507);
			set_style(div1, "height", "100%");
			set_style(div1, "width", "100%");
			add_location(div1, file, 97, 0, 2343);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, canvas);
			append_dev(div1, t0);
			mount_component(meter, div1, null);
			append_dev(div1, t1);
			mount_component(notes, div1, null);
			append_dev(div1, t2);
			append_dev(div1, div0);
			append_dev(div0, t3);
			append_dev(div0, sub);
			append_dev(sub, t4);
			append_dev(div0, t5);
			append_dev(div0, span);
			append_dev(span, t6);
			append_dev(div0, t7);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const meter_changes = {};
			if (dirty & /*curDeg*/ 2) meter_changes.deg = /*curDeg*/ ctx[1];
			meter.$set(meter_changes);
			const notes_changes = {};
			if (dirty & /*curValue*/ 1) notes_changes.value = /*curValue*/ ctx[0];
			if (dirty & /*curFrq*/ 4) notes_changes.frequency = /*curFrq*/ ctx[2];
			notes.$set(notes_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(meter.$$.fragment, local);
			transition_in(notes.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(meter.$$.fragment, local);
			transition_out(notes.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(meter);
			destroy_component(notes);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const middleA = 440;
const semitone = 69;
const bufferSize = 4096;

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Tuner", slots, []);
	let pitchDetector = null; // 计算音高的方法，等Aubio加载之后才能定义
	const noteStrings = ["C", "C♯", "D", "D♯", "E", "F", "F♯", "G", "G♯", "A", "A♯", "B"];
	let curValue = 0;
	let curDeg = 0;
	let curFrq = 0;
	const audioContext = new window.AudioContext();
	const analyser = audioContext.createAnalyser();
	const scriptProcessor = audioContext.createScriptProcessor(bufferSize, 1, 1);

	const getNote = function (frequency) {
		const note = 12 * (Math.log(frequency / middleA) / Math.log(2));
		return Math.round(note) + semitone;
	};

	const getStandardFrequency = function (note) {
		return middleA * Math.pow(2, (note - semitone) / 12);
	};

	const getCents = function (frequency, note) {
		return Math.floor(1200 * Math.log(frequency / getStandardFrequency(note)) / Math.log(2));
	};

	const onNoteDetected = function (note) {
		const { value, cents, frequency } = note;
		$$invalidate(0, curValue = value);
		$$invalidate(1, curDeg = cents / 50 * 45);
		$$invalidate(2, curFrq = frequency);
	};

	const startRecord = () => {
		navigator.mediaDevices.getUserMedia({ audio: true }).then(function (stream) {
			audioContext.createMediaStreamSource(stream).connect(analyser);
			analyser.connect(scriptProcessor);
			scriptProcessor.connect(audioContext.destination);

			scriptProcessor.addEventListener("audioprocess", function (event) {
				const frequency = pitchDetector.do(event.inputBuffer.getChannelData(0));

				if (frequency && onNoteDetected) {
					const note = getNote(frequency);

					onNoteDetected({
						name: noteStrings[note % 12],
						value: note,
						cents: getCents(frequency, note),
						octave: parseInt(note / 12) - 1,
						frequency
					});
				}
			});
		}).catch(function (error) {
			alert(error.name + ": " + error.message);
		});
	};

	aubio().then(function (aubio) {
		pitchDetector = new aubio.Pitch("default", bufferSize, 1, audioContext.sampleRate);
		startRecord();
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tuner> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		Notes,
		Meter,
		Aubio: aubio,
		pitchDetector,
		middleA,
		semitone,
		bufferSize,
		noteStrings,
		curValue,
		curDeg,
		curFrq,
		audioContext,
		analyser,
		scriptProcessor,
		getNote,
		getStandardFrequency,
		getCents,
		onNoteDetected,
		startRecord
	});

	$$self.$inject_state = $$props => {
		if ("pitchDetector" in $$props) pitchDetector = $$props.pitchDetector;
		if ("curValue" in $$props) $$invalidate(0, curValue = $$props.curValue);
		if ("curDeg" in $$props) $$invalidate(1, curDeg = $$props.curDeg);
		if ("curFrq" in $$props) $$invalidate(2, curFrq = $$props.curFrq);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [curValue, curDeg, curFrq];
}

class Tuner extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tuner",
			options,
			id: create_fragment.name
		});
	}
}

export default Tuner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHVuZXIuZmExZDJkMzcuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3R1bmVyL05vdGUuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdHVuZXIvTm90ZXMuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdHVuZXIvTWV0ZXIuc3ZlbHRlIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGlucy9zcmMvZXM2L2VtcHR5LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGlucy9zcmMvZXM2L3BhdGguanMiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy90dW5lci9hdWJpby5qcyIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZ2FkZ2V0L3R1bmVyLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBpbXBvcnQgeyBhZnRlclVwZGF0ZSwgY3JlYXRlRXZlbnREaXNwYXRjaGVyfSBmcm9tICdzdmVsdGUnO1xuXG4gICAgZXhwb3J0IGxldCBpc0FjdGl2ZTtcbiAgICBleHBvcnQgbGV0IG5vdGU7XG4gICAgZXhwb3J0IGxldCBvY3RhdmU7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgbGV0IGN1ck5vZGVEb20gPSBudWxsO1xuXG4gICAgYWZ0ZXJVcGRhdGUoKCk9PntcbiAgICAgICAgaWYoaXNBY3RpdmUpe1xuICAgICAgICAgICAgZGlzcGF0Y2goJ29uQWN0aXZlJyxjdXJOb2RlRG9tKVxuICAgICAgICB9XG4gICAgfSlcbiAgICBcbjwvc2NyaXB0PlxuXG5cbjxkaXYgY2xhc3M9XCJub3RlXCIgY2xhc3M6YWN0aXZlPXtpc0FjdGl2ZX0gYmluZDp0aGlzPXtjdXJOb2RlRG9tfT5cbiAgICB7bm90ZX1cbiAgICA8c3BhbiBjbGFzcz1cIm5vdGUtc2hhcnBcIj48L3NwYW4+XG4gICAgPHNwYW4gY2xhc3M9XCJub3RlLW9jdGF2ZVwiPntvY3RhdmUudG9TdHJpbmcoKX08L3NwYW4+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC5ub3RlIHtcbiAgICBmb250LXNpemU6IDkwcHg7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xuICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgICB9XG5cbiAgICAubm90ZS5hY3RpdmUge1xuICAgIGNvbG9yOiAjZTc0YzNjO1xuICAgIH1cblxuICAgIC5ub3RlIHtcbiAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIC5ub3RlIHNwYW4ge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogMC4yNWVtO1xuICAgIGZvbnQtc2l6ZTogNDAlO1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgfVxuXG4gICAgLm5vdGUtc2hhcnAge1xuICAgIHRvcDogMC4zZW07XG4gICAgfVxuXG4gICAgLm5vdGUtb2N0YXZlIHtcbiAgICBib3R0b206IDAuM2VtO1xuICAgIH1cblxuPC9zdHlsZT4iLCI8c2NyaXB0PlxuICBpbXBvcnQgeyBvbk1vdW50LGFmdGVyVXBkYXRlIH0gZnJvbSAnc3ZlbHRlJztcblxuICBpbXBvcnQgTm90ZSBmcm9tICcuL05vdGUuc3ZlbHRlJ1xuICBleHBvcnQgbGV0IHZhbHVlOyAvL+W9k+WJjeajgOa1i+WIsOeahOmikeeOh3ZhbHVlXG4gIGV4cG9ydCBsZXQgZnJlcXVlbmN5OyAvL+W9k+WJjemikeeOh1xuICBleHBvcnQgbGV0IG5vZGVMaXN0OyAvLyBub2Rl5YiX6KGo55qEZG9t6IqC54K5XG4gIGNvbnN0IG9jdGF2ZUxpc3QgPSBbMiwzLDQsNV07XG4gIGNvbnN0IG5vdGVTdHJpbmdzID0gW1xuICAgICAgJ0MnLFxuICAgICAgJ0Pima8nLFxuICAgICAgJ0QnLFxuICAgICAgJ0Tima8nLFxuICAgICAgJ0UnLFxuICAgICAgJ0YnLFxuICAgICAgJ0bima8nLFxuICAgICAgJ0cnLFxuICAgICAgJ0fima8nLFxuICAgICAgJ0EnLFxuICAgICAgJ0Hima8nLFxuICAgICAgJ0InXG4gICAgXVxuICBcbiAgY29uc3QgaGFuZGxlQWN0aXZlPShkb20pPT57XG4gICAgIG5vZGVMaXN0LnNjcm9sbExlZnQgPSBkb20ub2Zmc2V0TGVmdCAtIChub2RlTGlzdC5jbGllbnRXaWR0aCAtIGRvbS5jbGllbnRXaWR0aCkgLyAyO1xuICB9XG5cblxuXG48L3NjcmlwdD5cblxuPHN0eWxlPlxuLm5vdGVzIHtcbiAgbWFyZ2luOiBhdXRvO1xuICB3aWR0aDogNDAwcHg7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4ubm90ZXMtbGlzdCB7XG4gIG92ZXJmbG93OiBhdXRvO1xuICBvdmVyZmxvdzogLW1vei1zY3JvbGxiYXJzLW5vbmU7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTtcbiAgLXdlYmtpdC1tYXNrLWltYWdlOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudChcbiAgICBsZWZ0LFxuICAgIHJnYmEoMjU1LCAyNTUsIDI1NSwgMCksXG4gICAgI2ZmZixcbiAgICByZ2JhKDI1NSwgMjU1LCAyNTUsIDApXG4gICk7XG59XG5cbi5mcmVxdWVuY3kge1xuICBmb250LXNpemU6IDMycHg7XG59XG5cbi5mcmVxdWVuY3kgc3BhbiB7XG4gIGZvbnQtc2l6ZTogNTAlO1xuICBtYXJnaW4tbGVmdDogMC4yNWVtO1xufVxuXG4ubm90ZXMtbGlzdDo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgLm5vdGVzIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxufVxuXG48L3N0eWxlPlxuXG48ZGl2IGNsYXNzPVwibm90ZXNcIj5cbiAgPGRpdiBjbGFzcz1cIm5vdGVzLWxpc3RcIiBiaW5kOnRoaXM9e25vZGVMaXN0fT5cbiAgICB7I2VhY2ggb2N0YXZlTGlzdCBhcyBvY3RhdmV9XG4gICAgICB7I2VhY2ggbm90ZVN0cmluZ3MgYXMgbm90ZSwgaW5kZXh9XG4gICAgICAgIDxOb3RlIG5vdGU9e25vdGV9IG9jdGF2ZT17b2N0YXZlfSBpc0FjdGl2ZT17dmFsdWUgPT09IDEyKihvY3RhdmUrMSkraW5kZXh9IGxpc3REb209e25vZGVMaXN0fSBvbjpvbkFjdGl2ZT17aGFuZGxlQWN0aXZlfS8+XG4gICAgICB7L2VhY2h9XG4gICAgey9lYWNofVxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImZyZXF1ZW5jeVwiPntmcmVxdWVuY3kudG9GaXhlZCgyKX08c3Bhbj5Iejwvc3Bhbj48L2Rpdj5cbjwvZGl2PiIsIlxuXG48c2NyaXB0PlxuICAgIGV4cG9ydCBsZXQgZGVnID0gMDtcbiAgICBjb25zdCBhcnIgPSBBcnJheS5mcm9tKG5ldyBBcnJheSgxMSkua2V5cygpKTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwibWV0ZXJcIj5cbiAgICA8ZGl2IGNsYXNzPVwibWV0ZXItZG90XCI+PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cIm1ldGVyLXBvaW50ZXJcIiBzdHlsZT17YHRyYW5zZm9ybTpyb3RhdGUoJHtkZWd9ZGVnKWB9PjwvZGl2PlxuICAgIHsjZWFjaCBhcnIgYXMgaX1cbiAgICAgICAgPGRpdiBjbGFzczptZXRlci1zY2FsZT17dHJ1ZX0gY2xhc3M6bWV0ZXItc2NhbGUtc3Ryb25nID0ge2kgJSA1ID09PSAwIH0gc3R5bGU9e2B0cmFuc2Zvcm06cm90YXRlKCR7aSAqIDkgLSA0NX1kZWcpYH0+XG4gICAgICAgIDwvZGl2PlxuICAgIHsvZWFjaH1cbjwvZGl2PlxuXG5cbjxzdHlsZT5cbi5tZXRlciB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogNTAlO1xuICB3aWR0aDogNDAwcHg7XG4gIGhlaWdodDogMzMlO1xuICBtYXJnaW46IDAgYXV0byA1dmggYXV0bztcbn1cblxuLm1ldGVyLXBvaW50ZXIge1xuICB3aWR0aDogMnB4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIGJhY2tncm91bmQ6ICMyYzNlNTA7XG4gIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcbiAgdHJhbnNmb3JtLW9yaWdpbjogYm90dG9tO1xuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC41cztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogNTAlO1xufVxuXG4ubWV0ZXItZG90IHtcbiAgd2lkdGg6IDEwcHg7XG4gIGhlaWdodDogMTBweDtcbiAgYmFja2dyb3VuZDogIzJjM2U1MDtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJvdHRvbTogLTVweDtcbiAgcmlnaHQ6IDUwJTtcbiAgbWFyZ2luLXJpZ2h0OiAtNHB4O1xufVxuXG4ubWV0ZXItc2NhbGUge1xuICB3aWR0aDogMXB4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbTtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMnM7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGJvcmRlci10b3A6IDEwcHggc29saWQ7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgcmlnaHQ6IDUwJTtcbn1cblxuLm1ldGVyLXNjYWxlLXN0cm9uZyB7XG4gIHdpZHRoOiAycHg7XG4gIGJvcmRlci10b3Atd2lkdGg6IDIwcHg7XG59XG48L3N0eWxlPiIsImV4cG9ydCBkZWZhdWx0IHt9O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIHJlc29sdmVzIC4gYW5kIC4uIGVsZW1lbnRzIGluIGEgcGF0aCBhcnJheSB3aXRoIGRpcmVjdG9yeSBuYW1lcyB0aGVyZVxuLy8gbXVzdCBiZSBubyBzbGFzaGVzLCBlbXB0eSBlbGVtZW50cywgb3IgZGV2aWNlIG5hbWVzIChjOlxcKSBpbiB0aGUgYXJyYXlcbi8vIChzbyBhbHNvIG5vIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMgLSBpdCBkb2VzIG5vdCBkaXN0aW5ndWlzaFxuLy8gcmVsYXRpdmUgYW5kIGFic29sdXRlIHBhdGhzKVxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsIGFsbG93QWJvdmVSb290KSB7XG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBsYXN0ID0gcGFydHNbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKGFsbG93QWJvdmVSb290KSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBwYXJ0cy51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuLy8gU3BsaXQgYSBmaWxlbmFtZSBpbnRvIFtyb290LCBkaXIsIGJhc2VuYW1lLCBleHRdLCB1bml4IHZlcnNpb25cbi8vICdyb290JyBpcyBqdXN0IGEgc2xhc2gsIG9yIG5vdGhpbmcuXG52YXIgc3BsaXRQYXRoUmUgPVxuICAgIC9eKFxcLz98KShbXFxzXFxTXSo/KSgoPzpcXC57MSwyfXxbXlxcL10rP3wpKFxcLlteLlxcL10qfCkpKD86W1xcL10qKSQvO1xudmFyIHNwbGl0UGF0aCA9IGZ1bmN0aW9uKGZpbGVuYW1lKSB7XG4gIHJldHVybiBzcGxpdFBhdGhSZS5leGVjKGZpbGVuYW1lKS5zbGljZSgxKTtcbn07XG5cbi8vIHBhdGgucmVzb2x2ZShbZnJvbSAuLi5dLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlKCkge1xuICB2YXIgcmVzb2x2ZWRQYXRoID0gJycsXG4gICAgICByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpID49IC0xICYmICFyZXNvbHZlZEFic29sdXRlOyBpLS0pIHtcbiAgICB2YXIgcGF0aCA9IChpID49IDApID8gYXJndW1lbnRzW2ldIDogJy8nO1xuXG4gICAgLy8gU2tpcCBlbXB0eSBhbmQgaW52YWxpZCBlbnRyaWVzXG4gICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9IGVsc2UgaWYgKCFwYXRoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICByZXNvbHZlZFBhdGggPSBwYXRoICsgJy8nICsgcmVzb2x2ZWRQYXRoO1xuICAgIHJlc29sdmVkQWJzb2x1dGUgPSBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xuICB9XG5cbiAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcGF0aCBzaG91bGQgYmUgcmVzb2x2ZWQgdG8gYSBmdWxsIGFic29sdXRlIHBhdGgsIGJ1dFxuICAvLyBoYW5kbGUgcmVsYXRpdmUgcGF0aHMgdG8gYmUgc2FmZSAobWlnaHQgaGFwcGVuIHdoZW4gcHJvY2Vzcy5jd2QoKSBmYWlscylcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHJlc29sdmVkUGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFyZXNvbHZlZEFic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgcmV0dXJuICgocmVzb2x2ZWRBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHJlc29sdmVkUGF0aCkgfHwgJy4nO1xufTtcblxuLy8gcGF0aC5ub3JtYWxpemUocGF0aClcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUocGF0aCkge1xuICB2YXIgaXNQYXRoQWJzb2x1dGUgPSBpc0Fic29sdXRlKHBhdGgpLFxuICAgICAgdHJhaWxpbmdTbGFzaCA9IHN1YnN0cihwYXRoLCAtMSkgPT09ICcvJztcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihwYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIWlzUGF0aEFic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgaWYgKCFwYXRoICYmICFpc1BhdGhBYnNvbHV0ZSkge1xuICAgIHBhdGggPSAnLic7XG4gIH1cbiAgaWYgKHBhdGggJiYgdHJhaWxpbmdTbGFzaCkge1xuICAgIHBhdGggKz0gJy8nO1xuICB9XG5cbiAgcmV0dXJuIChpc1BhdGhBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHBhdGg7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnQgZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnQgZnVuY3Rpb24gam9pbigpIHtcbiAgdmFyIHBhdGhzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgcmV0dXJuIG5vcm1hbGl6ZShmaWx0ZXIocGF0aHMsIGZ1bmN0aW9uKHAsIGluZGV4KSB7XG4gICAgaWYgKHR5cGVvZiBwICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGguam9pbiBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG4gIH0pLmpvaW4oJy8nKSk7XG59XG5cblxuLy8gcGF0aC5yZWxhdGl2ZShmcm9tLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydCBmdW5jdGlvbiByZWxhdGl2ZShmcm9tLCB0bykge1xuICBmcm9tID0gcmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7XG4gIHRvID0gcmVzb2x2ZSh0bykuc3Vic3RyKDEpO1xuXG4gIGZ1bmN0aW9uIHRyaW0oYXJyKSB7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBmb3IgKDsgc3RhcnQgPCBhcnIubGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICBpZiAoYXJyW3N0YXJ0XSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciBlbmQgPSBhcnIubGVuZ3RoIC0gMTtcbiAgICBmb3IgKDsgZW5kID49IDA7IGVuZC0tKSB7XG4gICAgICBpZiAoYXJyW2VuZF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgPiBlbmQpIHJldHVybiBbXTtcbiAgICByZXR1cm4gYXJyLnNsaWNlKHN0YXJ0LCBlbmQgLSBzdGFydCArIDEpO1xuICB9XG5cbiAgdmFyIGZyb21QYXJ0cyA9IHRyaW0oZnJvbS5zcGxpdCgnLycpKTtcbiAgdmFyIHRvUGFydHMgPSB0cmltKHRvLnNwbGl0KCcvJykpO1xuXG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihmcm9tUGFydHMubGVuZ3RoLCB0b1BhcnRzLmxlbmd0aCk7XG4gIHZhciBzYW1lUGFydHNMZW5ndGggPSBsZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZnJvbVBhcnRzW2ldICE9PSB0b1BhcnRzW2ldKSB7XG4gICAgICBzYW1lUGFydHNMZW5ndGggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIG91dHB1dFBhcnRzID0gW107XG4gIGZvciAodmFyIGkgPSBzYW1lUGFydHNMZW5ndGg7IGkgPCBmcm9tUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRQYXJ0cy5wdXNoKCcuLicpO1xuICB9XG5cbiAgb3V0cHV0UGFydHMgPSBvdXRwdXRQYXJ0cy5jb25jYXQodG9QYXJ0cy5zbGljZShzYW1lUGFydHNMZW5ndGgpKTtcblxuICByZXR1cm4gb3V0cHV0UGFydHMuam9pbignLycpO1xufVxuXG5leHBvcnQgdmFyIHNlcCA9ICcvJztcbmV4cG9ydCB2YXIgZGVsaW1pdGVyID0gJzonO1xuXG5leHBvcnQgZnVuY3Rpb24gZGlybmFtZShwYXRoKSB7XG4gIHZhciByZXN1bHQgPSBzcGxpdFBhdGgocGF0aCksXG4gICAgICByb290ID0gcmVzdWx0WzBdLFxuICAgICAgZGlyID0gcmVzdWx0WzFdO1xuXG4gIGlmICghcm9vdCAmJiAhZGlyKSB7XG4gICAgLy8gTm8gZGlybmFtZSB3aGF0c29ldmVyXG4gICAgcmV0dXJuICcuJztcbiAgfVxuXG4gIGlmIChkaXIpIHtcbiAgICAvLyBJdCBoYXMgYSBkaXJuYW1lLCBzdHJpcCB0cmFpbGluZyBzbGFzaFxuICAgIGRpciA9IGRpci5zdWJzdHIoMCwgZGlyLmxlbmd0aCAtIDEpO1xuICB9XG5cbiAgcmV0dXJuIHJvb3QgKyBkaXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBiYXNlbmFtZShwYXRoLCBleHQpIHtcbiAgdmFyIGYgPSBzcGxpdFBhdGgocGF0aClbMl07XG4gIC8vIFRPRE86IG1ha2UgdGhpcyBjb21wYXJpc29uIGNhc2UtaW5zZW5zaXRpdmUgb24gd2luZG93cz9cbiAgaWYgKGV4dCAmJiBmLnN1YnN0cigtMSAqIGV4dC5sZW5ndGgpID09PSBleHQpIHtcbiAgICBmID0gZi5zdWJzdHIoMCwgZi5sZW5ndGggLSBleHQubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gZjtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZXh0bmFtZShwYXRoKSB7XG4gIHJldHVybiBzcGxpdFBhdGgocGF0aClbM107XG59XG5leHBvcnQgZGVmYXVsdCB7XG4gIGV4dG5hbWU6IGV4dG5hbWUsXG4gIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgZGlybmFtZTogZGlybmFtZSxcbiAgc2VwOiBzZXAsXG4gIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICByZWxhdGl2ZTogcmVsYXRpdmUsXG4gIGpvaW46IGpvaW4sXG4gIGlzQWJzb2x1dGU6IGlzQWJzb2x1dGUsXG4gIG5vcm1hbGl6ZTogbm9ybWFsaXplLFxuICByZXNvbHZlOiByZXNvbHZlXG59O1xuZnVuY3Rpb24gZmlsdGVyICh4cywgZikge1xuICAgIGlmICh4cy5maWx0ZXIpIHJldHVybiB4cy5maWx0ZXIoZik7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGYoeHNbaV0sIGksIHhzKSkgcmVzLnB1c2goeHNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBTdHJpbmcucHJvdG90eXBlLnN1YnN0ciAtIG5lZ2F0aXZlIGluZGV4IGRvbid0IHdvcmsgaW4gSUU4XG52YXIgc3Vic3RyID0gJ2FiJy5zdWJzdHIoLTEpID09PSAnYicgP1xuICAgIGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHsgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbikgfSA6XG4gICAgZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikge1xuICAgICAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IHN0ci5sZW5ndGggKyBzdGFydDtcbiAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbik7XG4gICAgfVxuO1xuIiwidmFyIEF1YmlvID0gZnVuY3Rpb24gKEF1YmlvKSB7XG4gIEF1YmlvID0gQXViaW8gfHwge307XG5cbiAgdmFyIGM7XG4gIGMgfHwgKGMgPSB0eXBlb2YgQXViaW8gIT09IFwidW5kZWZpbmVkXCIgPyBBdWJpbyA6IHt9KTtcbiAgdmFyIG4gPSB7fSxcbiAgICByO1xuICBmb3IgKHIgaW4gYykgYy5oYXNPd25Qcm9wZXJ0eShyKSAmJiAobltyXSA9IGNbcl0pO1xuICBjLmFyZ3VtZW50cyA9IFtdO1xuICBjLnRoaXNQcm9ncmFtID0gXCIuL3RoaXMucHJvZ3JhbVwiO1xuICBjLnF1aXQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHRocm93IGI7XG4gIH07XG4gIGMucHJlUnVuID0gW107XG4gIGMucG9zdFJ1biA9IFtdO1xuICB2YXIgdSA9ICExLFxuICAgIHYgPSAhMSxcbiAgICBhYSA9ICExLFxuICAgIGJhID0gITE7XG4gIHUgPSBcIm9iamVjdFwiID09PSB0eXBlb2Ygd2luZG93O1xuICB2ID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW1wb3J0U2NyaXB0cztcbiAgYWEgPSBcIm9iamVjdFwiID09PSB0eXBlb2YgcHJvY2VzcyAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXF1aXJlICYmICF1ICYmICF2O1xuICBiYSA9ICF1ICYmICFhYSAmJiAhdjtcbiAgdmFyIHcgPSBcIlwiO1xuICBmdW5jdGlvbiBjYShhKSB7XG4gICAgcmV0dXJuIGMubG9jYXRlRmlsZSA/IGMubG9jYXRlRmlsZShhLCB3KSA6IHcgKyBhO1xuICB9XG4gIGlmIChhYSkge1xuICAgIHcgPSBfX2Rpcm5hbWUgKyBcIi9cIjtcbiAgICB2YXIgZGEsIGVhO1xuICAgIGMucmVhZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBkYSB8fCAoZGEgPSByZXF1aXJlKFwiZnNcIikpO1xuICAgICAgZWEgfHwgKGVhID0gcmVxdWlyZShcInBhdGhcIikpO1xuICAgICAgYSA9IGVhLm5vcm1hbGl6ZShhKTtcbiAgICAgIGEgPSBkYS5yZWFkRmlsZVN5bmMoYSk7XG4gICAgICByZXR1cm4gYiA/IGEgOiBhLnRvU3RyaW5nKCk7XG4gICAgfTtcbiAgICBjLnJlYWRCaW5hcnkgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgYSA9IGMucmVhZChhLCAhMCk7XG4gICAgICBhLmJ1ZmZlciB8fCAoYSA9IG5ldyBVaW50OEFycmF5KGEpKTtcbiAgICAgIGFzc2VydChhLmJ1ZmZlcik7XG4gICAgICByZXR1cm4gYTtcbiAgICB9O1xuICAgIDEgPCBwcm9jZXNzLmFyZ3YubGVuZ3RoICYmXG4gICAgICAoYy50aGlzUHJvZ3JhbSA9IHByb2Nlc3MuYXJndlsxXS5yZXBsYWNlKC9cXFxcL2csIFwiL1wiKSk7XG4gICAgYy5hcmd1bWVudHMgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG4gICAgcHJvY2Vzcy5vbihcInVuY2F1Z2h0RXhjZXB0aW9uXCIsIGZ1bmN0aW9uIChhKSB7XG4gICAgICB0aHJvdyBhO1xuICAgIH0pO1xuICAgIHByb2Nlc3Mub24oXCJ1bmhhbmRsZWRSZWplY3Rpb25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgIH0pO1xuICAgIGMucXVpdCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICBwcm9jZXNzLmV4aXQoYSk7XG4gICAgfTtcbiAgICBjLmluc3BlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gXCJbRW1zY3JpcHRlbiBNb2R1bGUgb2JqZWN0XVwiO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoYmEpXG4gICAgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgcmVhZCAmJlxuICAgICAgKGMucmVhZCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiByZWFkKGEpO1xuICAgICAgfSksXG4gICAgICAoYy5yZWFkQmluYXJ5ID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlYWRidWZmZXIpXG4gICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHJlYWRidWZmZXIoYSkpO1xuICAgICAgICBhID0gcmVhZChhLCBcImJpbmFyeVwiKTtcbiAgICAgICAgYXNzZXJ0KFwib2JqZWN0XCIgPT09IHR5cGVvZiBhKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9KSxcbiAgICAgIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHNjcmlwdEFyZ3NcbiAgICAgICAgPyAoYy5hcmd1bWVudHMgPSBzY3JpcHRBcmdzKVxuICAgICAgICA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGFyZ3VtZW50cyAmJiAoYy5hcmd1bWVudHMgPSBhcmd1bWVudHMpLFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcXVpdCAmJlxuICAgICAgICAoYy5xdWl0ID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICBxdWl0KGEpO1xuICAgICAgICB9KTtcbiAgZWxzZSBpZiAodSB8fCB2KSB7XG4gICAgaWYgKHUpIHtcbiAgICAgIHZhciBmYSA9IHRoaXMuX2N1cnJlbnRTY3JpcHQgfHwgZG9jdW1lbnQuY3VycmVudFNjcmlwdDtcbiAgICAgIGlmIChzYSkge1xuICAgICAgICAwICE9PSBmYS5zcmMuaW5kZXhPZihcImJsb2I6XCIpICYmXG4gICAgICAgICAgKHcgPSBmYS5zcmMuc3BsaXQoXCIvXCIpLnNsaWNlKDAsIC0xKS5qb2luKFwiL1wiKSArIFwiL1wiKTtcbiAgICAgIH1cbiAgICB9IGVsc2VcbiAgICAgIHYgJiYgKHcgPSBzZWxmLmxvY2F0aW9uLmhyZWYuc3BsaXQoXCIvXCIpLnNsaWNlKDAsIC0xKS5qb2luKFwiL1wiKSArIFwiL1wiKTtcbiAgICBjLnJlYWQgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgdmFyIGIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIGIub3BlbihcIkdFVFwiLCBhLCAhMSk7XG4gICAgICBiLnNlbmQobnVsbCk7XG4gICAgICByZXR1cm4gYi5yZXNwb25zZVRleHQ7XG4gICAgfTtcbiAgICB2ICYmXG4gICAgICAoYy5yZWFkQmluYXJ5ID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIGIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgYi5vcGVuKFwiR0VUXCIsIGEsICExKTtcbiAgICAgICAgYi5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgICAgIGIuc2VuZChudWxsKTtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGIucmVzcG9uc2UpO1xuICAgICAgfSk7XG4gICAgYy5yZWFkQXN5bmMgPSBmdW5jdGlvbiAoYSwgYiwgZCkge1xuICAgICAgdmFyIGUgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIGUub3BlbihcIkdFVFwiLCBhLCAhMCk7XG4gICAgICBlLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICAgIGUub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAyMDAgPT0gZS5zdGF0dXMgfHwgKDAgPT0gZS5zdGF0dXMgJiYgZS5yZXNwb25zZSkgPyBiKGUucmVzcG9uc2UpIDogZCgpO1xuICAgICAgfTtcbiAgICAgIGUub25lcnJvciA9IGQ7XG4gICAgICBlLnNlbmQobnVsbCk7XG4gICAgfTtcbiAgICBjLnNldFdpbmRvd1RpdGxlID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gYTtcbiAgICB9O1xuICB9XG4gIHZhciBoYSA9XG4gICAgICBjLnByaW50IHx8XG4gICAgICAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIGNvbnNvbGVcbiAgICAgICAgPyBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpXG4gICAgICAgIDogXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIHByaW50XG4gICAgICAgID8gcHJpbnRcbiAgICAgICAgOiBudWxsKSxcbiAgICB4ID1cbiAgICAgIGMucHJpbnRFcnIgfHxcbiAgICAgIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgcHJpbnRFcnJcbiAgICAgICAgPyBwcmludEVyclxuICAgICAgICA6IChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgY29uc29sZSAmJiBjb25zb2xlLndhcm4uYmluZChjb25zb2xlKSkgfHwgaGEpO1xuICBmb3IgKHIgaW4gbikgbi5oYXNPd25Qcm9wZXJ0eShyKSAmJiAoY1tyXSA9IG5bcl0pO1xuICBuID0gdm9pZCAwO1xuICBmdW5jdGlvbiBpYShhKSB7XG4gICAgdmFyIGI7XG4gICAgYiB8fCAoYiA9IDE2KTtcbiAgICByZXR1cm4gTWF0aC5jZWlsKGEgLyBiKSAqIGI7XG4gIH1cbiAgdmFyIGphID0ge1xuICAgICAgXCJmNjQtcmVtXCI6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhICUgYjtcbiAgICAgIH0sXG4gICAgICBkZWJ1Z2dlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgIH0sXG4gICAgfSxcbiAgICBrYSA9IDA7XG4gIGZ1bmN0aW9uIGFzc2VydChhLCBiKSB7XG4gICAgYSB8fCB5KFwiQXNzZXJ0aW9uIGZhaWxlZDogXCIgKyBiKTtcbiAgfVxuICB2YXIgbGEgPVxuICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBUZXh0RGVjb2RlciA/IG5ldyBUZXh0RGVjb2RlcihcInV0ZjhcIikgOiB2b2lkIDA7XG4gIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBUZXh0RGVjb2RlciAmJiBuZXcgVGV4dERlY29kZXIoXCJ1dGYtMTZsZVwiKTtcbiAgdmFyIGJ1ZmZlciwgbWEsIHosIG5hLCBvYSwgQSwgQiwgcGEsIHFhO1xuICBmdW5jdGlvbiByYSgpIHtcbiAgICBjLkhFQVA4ID0gbWEgPSBuZXcgSW50OEFycmF5KGJ1ZmZlcik7XG4gICAgYy5IRUFQMTYgPSBuYSA9IG5ldyBJbnQxNkFycmF5KGJ1ZmZlcik7XG4gICAgYy5IRUFQMzIgPSBBID0gbmV3IEludDMyQXJyYXkoYnVmZmVyKTtcbiAgICBjLkhFQVBVOCA9IHogPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIGMuSEVBUFUxNiA9IG9hID0gbmV3IFVpbnQxNkFycmF5KGJ1ZmZlcik7XG4gICAgYy5IRUFQVTMyID0gQiA9IG5ldyBVaW50MzJBcnJheShidWZmZXIpO1xuICAgIGMuSEVBUEYzMiA9IHBhID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIpO1xuICAgIGMuSEVBUEY2NCA9IHFhID0gbmV3IEZsb2F0NjRBcnJheShidWZmZXIpO1xuICB9XG4gIHZhciBzYSwgQywgdGEsIHVhLCB2YSwgd2EsIHhhO1xuICBzYSA9IEMgPSB0YSA9IHVhID0gdmEgPSB3YSA9IHhhID0gMDtcbiAgZnVuY3Rpb24geWEoKSB7XG4gICAgeShcbiAgICAgIFwiQ2Fubm90IGVubGFyZ2UgbWVtb3J5IGFycmF5cy4gRWl0aGVyICgxKSBjb21waWxlIHdpdGggIC1zIFRPVEFMX01FTU9SWT1YICB3aXRoIFggaGlnaGVyIHRoYW4gdGhlIGN1cnJlbnQgdmFsdWUgXCIgK1xuICAgICAgICBFICtcbiAgICAgICAgXCIsICgyKSBjb21waWxlIHdpdGggIC1zIEFMTE9XX01FTU9SWV9HUk9XVEg9MSAgd2hpY2ggYWxsb3dzIGluY3JlYXNpbmcgdGhlIHNpemUgYXQgcnVudGltZSwgb3IgKDMpIGlmIHlvdSB3YW50IG1hbGxvYyB0byByZXR1cm4gTlVMTCAoMCkgaW5zdGVhZCBvZiB0aGlzIGFib3J0LCBjb21waWxlIHdpdGggIC1zIEFCT1JUSU5HX01BTExPQz0wIFwiXG4gICAgKTtcbiAgfVxuICB2YXIgemEgPSBjLlRPVEFMX1NUQUNLIHx8IDUyNDI4ODAsXG4gICAgRSA9IGMuVE9UQUxfTUVNT1JZIHx8IDE2Nzc3MjE2O1xuICBFIDwgemEgJiZcbiAgICB4KFxuICAgICAgXCJUT1RBTF9NRU1PUlkgc2hvdWxkIGJlIGxhcmdlciB0aGFuIFRPVEFMX1NUQUNLLCB3YXMgXCIgK1xuICAgICAgICBFICtcbiAgICAgICAgXCIhIChUT1RBTF9TVEFDSz1cIiArXG4gICAgICAgIHphICtcbiAgICAgICAgXCIpXCJcbiAgICApO1xuICBjLmJ1ZmZlclxuICAgID8gKGJ1ZmZlciA9IGMuYnVmZmVyKVxuICAgIDogKFwib2JqZWN0XCIgPT09IHR5cGVvZiBXZWJBc3NlbWJseSAmJlxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgV2ViQXNzZW1ibHkuTWVtb3J5XG4gICAgICAgID8gKChjLndhc21NZW1vcnkgPSBuZXcgV2ViQXNzZW1ibHkuTWVtb3J5KHtcbiAgICAgICAgICAgIGluaXRpYWw6IEUgLyA2NTUzNixcbiAgICAgICAgICAgIG1heGltdW06IEUgLyA2NTUzNixcbiAgICAgICAgICB9KSksXG4gICAgICAgICAgKGJ1ZmZlciA9IGMud2FzbU1lbW9yeS5idWZmZXIpKVxuICAgICAgICA6IChidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoRSkpLFxuICAgICAgKGMuYnVmZmVyID0gYnVmZmVyKSk7XG4gIHJhKCk7XG4gIGZ1bmN0aW9uIEFhKGEpIHtcbiAgICBmb3IgKDsgMCA8IGEubGVuZ3RoOyApIHtcbiAgICAgIHZhciBiID0gYS5zaGlmdCgpO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYikgYigpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBkID0gYi5CO1xuICAgICAgICBcIm51bWJlclwiID09PSB0eXBlb2YgZFxuICAgICAgICAgID8gdm9pZCAwID09PSBiLkZcbiAgICAgICAgICAgID8gYy5keW5DYWxsX3YoZClcbiAgICAgICAgICAgIDogYy5keW5DYWxsX3ZpKGQsIGIuRilcbiAgICAgICAgICA6IGQodm9pZCAwID09PSBiLkYgPyBudWxsIDogYi5GKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdmFyIEJhID0gW10sXG4gICAgQ2EgPSBbXSxcbiAgICBEYSA9IFtdLFxuICAgIEVhID0gW10sXG4gICAgRmEgPSAhMTtcbiAgZnVuY3Rpb24gR2EoKSB7XG4gICAgdmFyIGEgPSBjLnByZVJ1bi5zaGlmdCgpO1xuICAgIEJhLnVuc2hpZnQoYSk7XG4gIH1cbiAgdmFyIEhhID0gTWF0aC5jb3MsXG4gICAgSWEgPSBNYXRoLnNpbixcbiAgICBGID0gMCxcbiAgICBKYSA9IG51bGwsXG4gICAgRyA9IG51bGw7XG4gIGMucHJlbG9hZGVkSW1hZ2VzID0ge307XG4gIGMucHJlbG9hZGVkQXVkaW9zID0ge307XG4gIGZ1bmN0aW9uIEthKGEpIHtcbiAgICByZXR1cm4gU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoXG4gICAgICA/IGEuc3RhcnRzV2l0aChcImRhdGE6YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtO2Jhc2U2NCxcIilcbiAgICAgIDogMCA9PT0gYS5pbmRleE9mKFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiKTtcbiAgfVxuICAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGEoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNcIiwgYyk7XG4gICAgICAgIGlmIChjLndhc21CaW5hcnkpIHJldHVybiBuZXcgVWludDhBcnJheShjLndhc21CaW5hcnkpO1xuICAgICAgICBpZiAoYy5yZWFkQmluYXJ5KSByZXR1cm4gYy5yZWFkQmluYXJ5KGYpO1xuICAgICAgICB0aHJvdyBcImJvdGggYXN5bmMgYW5kIHN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkXCI7XG4gICAgICB9IGNhdGNoIChnKSB7XG4gICAgICAgIHkoZyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGIoKSB7XG4gICAgICByZXR1cm4gYy53YXNtQmluYXJ5IHx8ICghdSAmJiAhdikgfHwgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgZmV0Y2hcbiAgICAgICAgPyBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgYihhKCkpO1xuICAgICAgICAgIH0pXG4gICAgICAgIDogZmV0Y2goZiwgeyBjcmVkZW50aWFsczogXCJzYW1lLW9yaWdpblwiIH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICBpZiAoIWEub2spIHRocm93IFwiZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnXCIgKyBmICsgXCInXCI7XG4gICAgICAgICAgICAgIHJldHVybiBhLmFycmF5QnVmZmVyKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZVwiLCBlLCBmKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGEoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkKGEpIHtcbiAgICAgIGZ1bmN0aW9uIGQoYSkge1xuICAgICAgICBrID0gYS5leHBvcnRzO1xuICAgICAgICBpZiAoay5tZW1vcnkpIHtcbiAgICAgICAgICBhID0gay5tZW1vcnk7XG4gICAgICAgICAgdmFyIGIgPSBjLmJ1ZmZlcjtcbiAgICAgICAgICBhLmJ5dGVMZW5ndGggPCBiLmJ5dGVMZW5ndGggJiZcbiAgICAgICAgICAgIHgoXG4gICAgICAgICAgICAgIFwidGhlIG5ldyBidWZmZXIgaW4gbWVyZ2VNZW1vcnkgaXMgc21hbGxlciB0aGFuIHRoZSBwcmV2aW91cyBvbmUuIGluIG5hdGl2ZSB3YXNtLCB3ZSBzaG91bGQgZ3JvdyBtZW1vcnkgaGVyZVwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGIgPSBuZXcgSW50OEFycmF5KGIpO1xuICAgICAgICAgIG5ldyBJbnQ4QXJyYXkoYSkuc2V0KGIpO1xuICAgICAgICAgIGMuYnVmZmVyID0gYnVmZmVyID0gYTtcbiAgICAgICAgICByYSgpO1xuICAgICAgICB9XG4gICAgICAgIGMuYXNtID0gaztcbiAgICAgICAgYy51c2luZ1dhc20gPSAhMDtcbiAgICAgICAgRi0tO1xuICAgICAgICBjLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMgJiYgYy5tb25pdG9yUnVuRGVwZW5kZW5jaWVzKEYpO1xuICAgICAgICAwID09IEYgJiZcbiAgICAgICAgICAobnVsbCAhPT0gSmEgJiYgKGNsZWFySW50ZXJ2YWwoSmEpLCAoSmEgPSBudWxsKSksXG4gICAgICAgICAgRyAmJiAoKGEgPSBHKSwgKEcgPSBudWxsKSwgYSgpKSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBlKGEpIHtcbiAgICAgICAgZChhLmluc3RhbmNlKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGcoYSkge1xuICAgICAgICBiKClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgcmV0dXJuIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGEsIGgpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oYSlcbiAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIHgoXCJmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiBcIiArIGEpO1xuICAgICAgICAgICAgeShhKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChcIm9iamVjdFwiICE9PSB0eXBlb2YgV2ViQXNzZW1ibHkpXG4gICAgICAgIHJldHVybiB4KFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKSwgITE7XG4gICAgICBpZiAoIShjLndhc21NZW1vcnkgaW5zdGFuY2VvZiBXZWJBc3NlbWJseS5NZW1vcnkpKVxuICAgICAgICByZXR1cm4geChcIm5vIG5hdGl2ZSB3YXNtIE1lbW9yeSBpbiB1c2VcIiksICExO1xuICAgICAgYS5tZW1vcnkgPSBjLndhc21NZW1vcnk7XG4gICAgICBoLmdsb2JhbCA9IHsgTmFOOiBOYU4sIEluZmluaXR5OiBJbmZpbml0eSB9O1xuICAgICAgaFtcImdsb2JhbC5NYXRoXCJdID0gTWF0aDtcbiAgICAgIGguZW52ID0gYTtcbiAgICAgIEYrKztcbiAgICAgIGMubW9uaXRvclJ1bkRlcGVuZGVuY2llcyAmJiBjLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMoRik7XG4gICAgICBpZiAoYy5pbnN0YW50aWF0ZVdhc20pXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGMuaW5zdGFudGlhdGVXYXNtKGgsIGQpO1xuICAgICAgICB9IGNhdGNoICh2Yikge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB4KFwiTW9kdWxlLmluc3RhbnRpYXRlV2FzbSBjYWxsYmFjayBmYWlsZWQgd2l0aCBlcnJvcjogXCIgKyB2YiksICExXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgYy53YXNtQmluYXJ5IHx8XG4gICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyB8fFxuICAgICAgS2EoZikgfHxcbiAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGZldGNoXG4gICAgICAgID8gZyhlKVxuICAgICAgICA6IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKFxuICAgICAgICAgICAgZmV0Y2goZiwgeyBjcmVkZW50aWFsczogXCJzYW1lLW9yaWdpblwiIH0pLFxuICAgICAgICAgICAgaFxuICAgICAgICAgIClcbiAgICAgICAgICAgIC50aGVuKGUpXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgeChcIndhc20gc3RyZWFtaW5nIGNvbXBpbGUgZmFpbGVkOiBcIiArIGEpO1xuICAgICAgICAgICAgICB4KFwiZmFsbGluZyBiYWNrIHRvIEFycmF5QnVmZmVyIGluc3RhbnRpYXRpb25cIik7XG4gICAgICAgICAgICAgIGcoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgdmFyIGUgPSBcImF1YmlvLndhc3RcIixcbiAgICAgIGYgPSBcImF1YmlvLndhc21cIixcbiAgICAgIGwgPSBcImF1YmlvLnRlbXAuYXNtLmpzXCI7XG4gICAgS2EoZSkgfHwgKGUgPSBjYShlKSk7XG4gICAgS2EoZikgfHwgKGYgPSBjYShmKSk7XG4gICAgS2EobCkgfHwgKGwgPSBjYShsKSk7XG4gICAgdmFyIGggPSB7IGdsb2JhbDogbnVsbCwgZW52OiBudWxsLCBhc20yd2FzbTogamEsIHBhcmVudDogYyB9LFxuICAgICAgayA9IG51bGw7XG4gICAgYy5hc21QcmVsb2FkID0gYy5hc207XG4gICAgdmFyIG0gPSBjLnJlYWxsb2NCdWZmZXI7XG4gICAgYy5yZWFsbG9jQnVmZmVyID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgIGlmIChcImFzbWpzXCIgPT09IHApIHZhciBiID0gbShhKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYToge1xuICAgICAgICAgIHZhciBkID0gYy51c2luZ1dhc20gPyA2NTUzNiA6IDE2Nzc3MjE2O1xuICAgICAgICAgIDAgPCBhICUgZCAmJiAoYSArPSBkIC0gKGEgJSBkKSk7XG4gICAgICAgICAgZCA9IGMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKGMudXNpbmdXYXNtKVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYiA9XG4gICAgICAgICAgICAgICAgLTEgIT09IGMud2FzbU1lbW9yeS5ncm93KChhIC0gZCkgLyA2NTUzNilcbiAgICAgICAgICAgICAgICAgID8gKGMuYnVmZmVyID0gYy53YXNtTWVtb3J5LmJ1ZmZlcilcbiAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgYiA9IG51bGw7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgYiA9IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgcmV0dXJuIGI7XG4gICAgfTtcbiAgICB2YXIgcCA9IFwiXCI7XG4gICAgYy5hc20gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKCFiLnRhYmxlKSB7XG4gICAgICAgIGEgPSBjLndhc21UYWJsZVNpemU7XG4gICAgICAgIHZvaWQgMCA9PT0gYSAmJiAoYSA9IDEwMjQpO1xuICAgICAgICB2YXIgZSA9IGMud2FzbU1heFRhYmxlU2l6ZTtcbiAgICAgICAgYi50YWJsZSA9XG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIFdlYkFzc2VtYmx5ICYmXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgV2ViQXNzZW1ibHkuVGFibGVcbiAgICAgICAgICAgID8gdm9pZCAwICE9PSBlXG4gICAgICAgICAgICAgID8gbmV3IFdlYkFzc2VtYmx5LlRhYmxlKHtcbiAgICAgICAgICAgICAgICAgIGluaXRpYWw6IGEsXG4gICAgICAgICAgICAgICAgICBtYXhpbXVtOiBlLFxuICAgICAgICAgICAgICAgICAgZWxlbWVudDogXCJhbnlmdW5jXCIsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgOiBuZXcgV2ViQXNzZW1ibHkuVGFibGUoeyBpbml0aWFsOiBhLCBlbGVtZW50OiBcImFueWZ1bmNcIiB9KVxuICAgICAgICAgICAgOiBBcnJheShhKTtcbiAgICAgICAgYy53YXNtVGFibGUgPSBiLnRhYmxlO1xuICAgICAgfVxuICAgICAgYi5tZW1vcnlCYXNlIHx8IChiLm1lbW9yeUJhc2UgPSBjLlNUQVRJQ19CQVNFKTtcbiAgICAgIGIudGFibGVCYXNlIHx8IChiLnRhYmxlQmFzZSA9IDApO1xuICAgICAgYiA9IGQoYik7XG4gICAgICBhc3NlcnQoYiwgXCJubyBiaW5hcnllbiBtZXRob2Qgc3VjY2VlZGVkLlwiKTtcbiAgICAgIHJldHVybiBiO1xuICAgIH07XG4gIH0pKCk7XG4gIHNhID0gMTAyNDtcbiAgQyA9IHNhICsgOTMxMjtcbiAgQ2EucHVzaChcbiAgICB7XG4gICAgICBCOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIExhKCk7XG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgQjogZnVuY3Rpb24gKCkge1xuICAgICAgICBNYSgpO1xuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIEI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTmEoKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICBCOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE9hKCk7XG4gICAgICB9LFxuICAgIH1cbiAgKTtcbiAgYy5TVEFUSUNfQkFTRSA9IHNhO1xuICBjLlNUQVRJQ19CVU1QID0gOTMxMjtcbiAgQyArPSAxNjtcbiAgdmFyIEggPSAwO1xuICBmdW5jdGlvbiBJKCkge1xuICAgIEggKz0gNDtcbiAgICByZXR1cm4gQVsoSCAtIDQpID4+IDJdO1xuICB9XG4gIHZhciBQYSA9IHt9O1xuICBmdW5jdGlvbiBKKGEsIGIpIHtcbiAgICBIID0gYjtcbiAgICB0cnkge1xuICAgICAgdmFyIGQgPSBJKCksXG4gICAgICAgIGUgPSBJKCksXG4gICAgICAgIGYgPSBJKCk7XG4gICAgICBhID0gMDtcbiAgICAgIEouSiB8fFxuICAgICAgICAoKEouSiA9IFtudWxsLCBbXSwgW11dKSxcbiAgICAgICAgKEouUCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgdmFyIGQgPSBKLkpbYV07XG4gICAgICAgICAgYXNzZXJ0KGQpO1xuICAgICAgICAgIGlmICgwID09PSBiIHx8IDEwID09PSBiKSB7XG4gICAgICAgICAgICBhID0gMSA9PT0gYSA/IGhhIDogeDtcbiAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IChiID0gMCk7IGRbZV07ICkgKytlO1xuICAgICAgICAgICAgICBpZiAoMTYgPCBlIC0gYiAmJiBkLnN1YmFycmF5ICYmIGxhKVxuICAgICAgICAgICAgICAgIGIgPSBsYS5kZWNvZGUoZC5zdWJhcnJheShiLCBlKSk7XG4gICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBmb3IgKGUgPSBcIlwiOyA7ICkge1xuICAgICAgICAgICAgICAgICAgdmFyIGYgPSBkW2IrK107XG4gICAgICAgICAgICAgICAgICBpZiAoIWYpIHtcbiAgICAgICAgICAgICAgICAgICAgYiA9IGU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoZiAmIDEyOCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgayA9IGRbYisrXSAmIDYzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoMTkyID09IChmICYgMjI0KSlcbiAgICAgICAgICAgICAgICAgICAgICBlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChmICYgMzEpIDw8IDYpIHwgayk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gZFtiKytdICYgNjM7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKDIyNCA9PSAoZiAmIDI0MCkpIGYgPSAoKGYgJiAxNSkgPDwgMTIpIHwgKGsgPDwgNikgfCBsO1xuICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSBkW2IrK10gJiA2MztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgyNDAgPT0gKGYgJiAyNDgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gKChmICYgNykgPDwgMTgpIHwgKGsgPDwgMTIpIHwgKGwgPDwgNikgfCBoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiYiA9IGRbYisrXSAmIDYzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoMjQ4ID09IChmICYgMjUyKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZiAmIDMpIDw8IDI0KSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoayA8PCAxOCkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwgPDwgMTIpIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoIDw8IDYpIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IGRbYisrXSAmIDYzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChmICYgMSkgPDwgMzApIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChrIDw8IDI0KSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobCA8PCAxOCkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGggPDwgMTIpIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChiYiA8PCA2KSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDY1NTM2ID4gZlxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAoKGYgLT0gNjU1MzYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDU1Mjk2IHwgKGYgPj4gMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDU2MzIwIHwgKGYgJiAxMDIzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICApKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYShiKTtcbiAgICAgICAgICAgIGQubGVuZ3RoID0gMDtcbiAgICAgICAgICB9IGVsc2UgZC5wdXNoKGIpO1xuICAgICAgICB9KSk7XG4gICAgICBmb3IgKGIgPSAwOyBiIDwgZjsgYisrKSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdmFyIGwgPSBBWyhlICsgOCAqIGIpID4+IDJdLCBoID0gQVsoZSArICg4ICogYiArIDQpKSA+PiAyXSwgayA9IDA7XG4gICAgICAgICAgayA8IGg7XG4gICAgICAgICAgaysrXG4gICAgICAgIClcbiAgICAgICAgICBKLlAoZCwgeltsICsga10pO1xuICAgICAgICBhICs9IGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYTtcbiAgICB9IGNhdGNoIChtKSB7XG4gICAgICByZXR1cm4gKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBGUyAmJiBtIGluc3RhbmNlb2YgRlMuSSkgfHwgeShtKSwgLW0uTDtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gUWEoYSkge1xuICAgIHN3aXRjaCAoYSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgY2FzZSA4OlxuICAgICAgICByZXR1cm4gMztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIHR5cGUgc2l6ZTogXCIgKyBhKTtcbiAgICB9XG4gIH1cbiAgdmFyIFJhID0gdm9pZCAwO1xuICBmdW5jdGlvbiBLKGEpIHtcbiAgICBmb3IgKHZhciBiID0gXCJcIjsgelthXTsgKSBiICs9IFJhW3pbYSsrXV07XG4gICAgcmV0dXJuIGI7XG4gIH1cbiAgdmFyIEwgPSB7fSxcbiAgICBNID0ge30sXG4gICAgU2EgPSB7fTtcbiAgZnVuY3Rpb24gVGEoYSkge1xuICAgIGlmICh2b2lkIDAgPT09IGEpIHJldHVybiBcIl91bmtub3duXCI7XG4gICAgYSA9IGEucmVwbGFjZSgvW15hLXpBLVowLTlfXS9nLCBcIiRcIik7XG4gICAgdmFyIGIgPSBhLmNoYXJDb2RlQXQoMCk7XG4gICAgcmV0dXJuIDQ4IDw9IGIgJiYgNTcgPj0gYiA/IFwiX1wiICsgYSA6IGE7XG4gIH1cbiAgZnVuY3Rpb24gVWEoYSwgYikge1xuICAgIGEgPSBUYShhKTtcbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKFxuICAgICAgXCJib2R5XCIsXG4gICAgICBcInJldHVybiBmdW5jdGlvbiBcIiArXG4gICAgICAgIGEgK1xuICAgICAgICAnKCkge1xcbiAgICBcInVzZSBzdHJpY3RcIjsgICAgcmV0dXJuIGJvZHkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG59O1xcbidcbiAgICApKGIpO1xuICB9XG4gIGZ1bmN0aW9uIFZhKGEpIHtcbiAgICB2YXIgYiA9IEVycm9yLFxuICAgICAgZCA9IFVhKGEsIGZ1bmN0aW9uIChiKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IGE7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGI7XG4gICAgICAgIGIgPSBFcnJvcihiKS5zdGFjaztcbiAgICAgICAgdm9pZCAwICE9PSBiICYmXG4gICAgICAgICAgKHRoaXMuc3RhY2sgPVxuICAgICAgICAgICAgdGhpcy50b1N0cmluZygpICsgXCJcXG5cIiArIGIucmVwbGFjZSgvXkVycm9yKDpbXlxcbl0qKT9cXG4vLCBcIlwiKSk7XG4gICAgICB9KTtcbiAgICBkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoYi5wcm90b3R5cGUpO1xuICAgIGQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gZDtcbiAgICBkLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB2b2lkIDAgPT09IHRoaXMubWVzc2FnZVxuICAgICAgICA/IHRoaXMubmFtZVxuICAgICAgICA6IHRoaXMubmFtZSArIFwiOiBcIiArIHRoaXMubWVzc2FnZTtcbiAgICB9O1xuICAgIHJldHVybiBkO1xuICB9XG4gIHZhciBPID0gdm9pZCAwO1xuICBmdW5jdGlvbiBQKGEpIHtcbiAgICB0aHJvdyBuZXcgTyhhKTtcbiAgfVxuICB2YXIgV2EgPSB2b2lkIDA7XG4gIGZ1bmN0aW9uIFhhKGEpIHtcbiAgICB0aHJvdyBuZXcgV2EoYSk7XG4gIH1cbiAgZnVuY3Rpb24gWWEoYSwgYiwgZCkge1xuICAgIGZ1bmN0aW9uIGUoYikge1xuICAgICAgYiA9IGQoYik7XG4gICAgICBiLmxlbmd0aCAhPT0gYS5sZW5ndGggJiYgWGEoXCJNaXNtYXRjaGVkIHR5cGUgY29udmVydGVyIGNvdW50XCIpO1xuICAgICAgZm9yICh2YXIgZSA9IDA7IGUgPCBhLmxlbmd0aDsgKytlKSBRKGFbZV0sIGJbZV0pO1xuICAgIH1cbiAgICBhLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgICAgIFNhW2FdID0gYjtcbiAgICB9KTtcbiAgICB2YXIgZiA9IEFycmF5KGIubGVuZ3RoKSxcbiAgICAgIGwgPSBbXSxcbiAgICAgIGggPSAwO1xuICAgIGIuZm9yRWFjaChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgTS5oYXNPd25Qcm9wZXJ0eShhKVxuICAgICAgICA/IChmW2JdID0gTVthXSlcbiAgICAgICAgOiAobC5wdXNoKGEpLFxuICAgICAgICAgIEwuaGFzT3duUHJvcGVydHkoYSkgfHwgKExbYV0gPSBbXSksXG4gICAgICAgICAgTFthXS5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZbYl0gPSBNW2FdO1xuICAgICAgICAgICAgKytoO1xuICAgICAgICAgICAgaCA9PT0gbC5sZW5ndGggJiYgZShmKTtcbiAgICAgICAgICB9KSk7XG4gICAgfSk7XG4gICAgMCA9PT0gbC5sZW5ndGggJiYgZShmKTtcbiAgfVxuICBmdW5jdGlvbiBRKGEsIGIsIGQpIHtcbiAgICBkID0gZCB8fCB7fTtcbiAgICBpZiAoIShcImFyZ1BhY2tBZHZhbmNlXCIgaW4gYikpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBcInJlZ2lzdGVyVHlwZSByZWdpc3RlcmVkSW5zdGFuY2UgcmVxdWlyZXMgYXJnUGFja0FkdmFuY2VcIlxuICAgICAgKTtcbiAgICB2YXIgZSA9IGIubmFtZTtcbiAgICBhIHx8IFAoJ3R5cGUgXCInICsgZSArICdcIiBtdXN0IGhhdmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIHR5cGVpZCBwb2ludGVyJyk7XG4gICAgaWYgKE0uaGFzT3duUHJvcGVydHkoYSkpIHtcbiAgICAgIGlmIChkLlgpIHJldHVybjtcbiAgICAgIFAoXCJDYW5ub3QgcmVnaXN0ZXIgdHlwZSAnXCIgKyBlICsgXCInIHR3aWNlXCIpO1xuICAgIH1cbiAgICBNW2FdID0gYjtcbiAgICBkZWxldGUgU2FbYV07XG4gICAgTC5oYXNPd25Qcm9wZXJ0eShhKSAmJlxuICAgICAgKChiID0gTFthXSksXG4gICAgICBkZWxldGUgTFthXSxcbiAgICAgIGIuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICAgICAgICBhKCk7XG4gICAgICB9KSk7XG4gIH1cbiAgZnVuY3Rpb24gWmEoYSkge1xuICAgIFAoYS5hLmYuYi5uYW1lICsgXCIgaW5zdGFuY2UgYWxyZWFkeSBkZWxldGVkXCIpO1xuICB9XG4gIHZhciAkYSA9IHZvaWQgMCxcbiAgICBhYiA9IFtdO1xuICBmdW5jdGlvbiBjYigpIHtcbiAgICBmb3IgKDsgYWIubGVuZ3RoOyApIHtcbiAgICAgIHZhciBhID0gYWIucG9wKCk7XG4gICAgICBhLmEucyA9ICExO1xuICAgICAgYVtcImRlbGV0ZVwiXSgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBSKCkge31cbiAgdmFyIGRiID0ge307XG4gIGZ1bmN0aW9uIGViKGEsIGIsIGQpIHtcbiAgICBpZiAodm9pZCAwID09PSBhW2JdLmopIHtcbiAgICAgIHZhciBlID0gYVtiXTtcbiAgICAgIGFbYl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFbYl0uai5oYXNPd25Qcm9wZXJ0eShhcmd1bWVudHMubGVuZ3RoKSB8fFxuICAgICAgICAgIFAoXG4gICAgICAgICAgICBcIkZ1bmN0aW9uICdcIiArXG4gICAgICAgICAgICAgIGQgK1xuICAgICAgICAgICAgICBcIicgY2FsbGVkIHdpdGggYW4gaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzIChcIiArXG4gICAgICAgICAgICAgIGFyZ3VtZW50cy5sZW5ndGggK1xuICAgICAgICAgICAgICBcIikgLSBleHBlY3RzIG9uZSBvZiAoXCIgK1xuICAgICAgICAgICAgICBhW2JdLmogK1xuICAgICAgICAgICAgICBcIikhXCJcbiAgICAgICAgICApO1xuICAgICAgICByZXR1cm4gYVtiXS5qW2FyZ3VtZW50cy5sZW5ndGhdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgYVtiXS5qID0gW107XG4gICAgICBhW2JdLmpbZS5BXSA9IGU7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGZiKGEsIGIpIHtcbiAgICBjLmhhc093blByb3BlcnR5KGEpXG4gICAgICA/IChQKFwiQ2Fubm90IHJlZ2lzdGVyIHB1YmxpYyBuYW1lICdcIiArIGEgKyBcIicgdHdpY2VcIiksXG4gICAgICAgIGViKGMsIGEsIGEpLFxuICAgICAgICBjLmhhc093blByb3BlcnR5KHZvaWQgMCkgJiZcbiAgICAgICAgICBQKFxuICAgICAgICAgICAgXCJDYW5ub3QgcmVnaXN0ZXIgbXVsdGlwbGUgb3ZlcmxvYWRzIG9mIGEgZnVuY3Rpb24gd2l0aCB0aGUgc2FtZSBudW1iZXIgb2YgYXJndW1lbnRzICh1bmRlZmluZWQpIVwiXG4gICAgICAgICAgKSxcbiAgICAgICAgKGNbYV0ualt2b2lkIDBdID0gYikpXG4gICAgICA6IChjW2FdID0gYik7XG4gIH1cbiAgZnVuY3Rpb24gZ2IoYSwgYiwgZCwgZSwgZiwgbCwgaCwgaykge1xuICAgIHRoaXMubmFtZSA9IGE7XG4gICAgdGhpcy5jb25zdHJ1Y3RvciA9IGI7XG4gICAgdGhpcy51ID0gZDtcbiAgICB0aGlzLm8gPSBlO1xuICAgIHRoaXMuaSA9IGY7XG4gICAgdGhpcy5UID0gbDtcbiAgICB0aGlzLncgPSBoO1xuICAgIHRoaXMuUyA9IGs7XG4gICAgdGhpcy5aID0gW107XG4gIH1cbiAgZnVuY3Rpb24gaGIoYSwgYiwgZCkge1xuICAgIGZvciAoOyBiICE9PSBkOyApXG4gICAgICBiLncgfHxcbiAgICAgICAgUChcbiAgICAgICAgICBcIkV4cGVjdGVkIG51bGwgb3IgaW5zdGFuY2Ugb2YgXCIgK1xuICAgICAgICAgICAgZC5uYW1lICtcbiAgICAgICAgICAgIFwiLCBnb3QgYW4gaW5zdGFuY2Ugb2YgXCIgK1xuICAgICAgICAgICAgYi5uYW1lXG4gICAgICAgICksXG4gICAgICAgIChhID0gYi53KGEpKSxcbiAgICAgICAgKGIgPSBiLmkpO1xuICAgIHJldHVybiBhO1xuICB9XG4gIGZ1bmN0aW9uIGliKGEsIGIpIHtcbiAgICBpZiAobnVsbCA9PT0gYikgcmV0dXJuIHRoaXMuRyAmJiBQKFwibnVsbCBpcyBub3QgYSB2YWxpZCBcIiArIHRoaXMubmFtZSksIDA7XG4gICAgYi5hIHx8IFAoJ0Nhbm5vdCBwYXNzIFwiJyArIFMoYikgKyAnXCIgYXMgYSAnICsgdGhpcy5uYW1lKTtcbiAgICBiLmEuYyB8fCBQKFwiQ2Fubm90IHBhc3MgZGVsZXRlZCBvYmplY3QgYXMgYSBwb2ludGVyIG9mIHR5cGUgXCIgKyB0aGlzLm5hbWUpO1xuICAgIHJldHVybiBoYihiLmEuYywgYi5hLmYuYiwgdGhpcy5iKTtcbiAgfVxuICBmdW5jdGlvbiBqYihhLCBiKSB7XG4gICAgaWYgKG51bGwgPT09IGIpIHtcbiAgICAgIHRoaXMuRyAmJiBQKFwibnVsbCBpcyBub3QgYSB2YWxpZCBcIiArIHRoaXMubmFtZSk7XG4gICAgICBpZiAodGhpcy5EKSB7XG4gICAgICAgIHZhciBkID0gdGhpcy4kKCk7XG4gICAgICAgIG51bGwgIT09IGEgJiYgYS5wdXNoKHRoaXMubywgZCk7XG4gICAgICAgIHJldHVybiBkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGIuYSB8fCBQKCdDYW5ub3QgcGFzcyBcIicgKyBTKGIpICsgJ1wiIGFzIGEgJyArIHRoaXMubmFtZSk7XG4gICAgYi5hLmMgfHwgUChcIkNhbm5vdCBwYXNzIGRlbGV0ZWQgb2JqZWN0IGFzIGEgcG9pbnRlciBvZiB0eXBlIFwiICsgdGhpcy5uYW1lKTtcbiAgICAhdGhpcy5DICYmXG4gICAgICBiLmEuZi5DICYmXG4gICAgICBQKFxuICAgICAgICBcIkNhbm5vdCBjb252ZXJ0IGFyZ3VtZW50IG9mIHR5cGUgXCIgK1xuICAgICAgICAgIChiLmEuaCA/IGIuYS5oLm5hbWUgOiBiLmEuZi5uYW1lKSArXG4gICAgICAgICAgXCIgdG8gcGFyYW1ldGVyIHR5cGUgXCIgK1xuICAgICAgICAgIHRoaXMubmFtZVxuICAgICAgKTtcbiAgICBkID0gaGIoYi5hLmMsIGIuYS5mLmIsIHRoaXMuYik7XG4gICAgaWYgKHRoaXMuRClcbiAgICAgIHN3aXRjaCAoXG4gICAgICAgICh2b2lkIDAgPT09IGIuYS5nICYmXG4gICAgICAgICAgUChcIlBhc3NpbmcgcmF3IHBvaW50ZXIgdG8gc21hcnQgcG9pbnRlciBpcyBpbGxlZ2FsXCIpLFxuICAgICAgICB0aGlzLmJhKVxuICAgICAgKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBiLmEuaCA9PT0gdGhpc1xuICAgICAgICAgICAgPyAoZCA9IGIuYS5nKVxuICAgICAgICAgICAgOiBQKFxuICAgICAgICAgICAgICAgIFwiQ2Fubm90IGNvbnZlcnQgYXJndW1lbnQgb2YgdHlwZSBcIiArXG4gICAgICAgICAgICAgICAgICAoYi5hLmggPyBiLmEuaC5uYW1lIDogYi5hLmYubmFtZSkgK1xuICAgICAgICAgICAgICAgICAgXCIgdG8gcGFyYW1ldGVyIHR5cGUgXCIgK1xuICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBkID0gYi5hLmc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBpZiAoYi5hLmggPT09IHRoaXMpIGQgPSBiLmEuZztcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBlID0gYi5jbG9uZSgpO1xuICAgICAgICAgICAgZCA9IHRoaXMuYWEoXG4gICAgICAgICAgICAgIGQsXG4gICAgICAgICAgICAgIFQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGVbXCJkZWxldGVcIl0oKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBudWxsICE9PSBhICYmIGEucHVzaCh0aGlzLm8sIGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBQKFwiVW5zdXBwb3J0aW5nIHNoYXJpbmcgcG9saWN5XCIpO1xuICAgICAgfVxuICAgIHJldHVybiBkO1xuICB9XG4gIGZ1bmN0aW9uIGtiKGEsIGIpIHtcbiAgICBpZiAobnVsbCA9PT0gYikgcmV0dXJuIHRoaXMuRyAmJiBQKFwibnVsbCBpcyBub3QgYSB2YWxpZCBcIiArIHRoaXMubmFtZSksIDA7XG4gICAgYi5hIHx8IFAoJ0Nhbm5vdCBwYXNzIFwiJyArIFMoYikgKyAnXCIgYXMgYSAnICsgdGhpcy5uYW1lKTtcbiAgICBiLmEuYyB8fCBQKFwiQ2Fubm90IHBhc3MgZGVsZXRlZCBvYmplY3QgYXMgYSBwb2ludGVyIG9mIHR5cGUgXCIgKyB0aGlzLm5hbWUpO1xuICAgIGIuYS5mLkMgJiZcbiAgICAgIFAoXG4gICAgICAgIFwiQ2Fubm90IGNvbnZlcnQgYXJndW1lbnQgb2YgdHlwZSBcIiArXG4gICAgICAgICAgYi5hLmYubmFtZSArXG4gICAgICAgICAgXCIgdG8gcGFyYW1ldGVyIHR5cGUgXCIgK1xuICAgICAgICAgIHRoaXMubmFtZVxuICAgICAgKTtcbiAgICByZXR1cm4gaGIoYi5hLmMsIGIuYS5mLmIsIHRoaXMuYik7XG4gIH1cbiAgZnVuY3Rpb24gbGIoYSkge1xuICAgIHJldHVybiB0aGlzLmZyb21XaXJlVHlwZShCW2EgPj4gMl0pO1xuICB9XG4gIGZ1bmN0aW9uIG9iKGEsIGIsIGQpIHtcbiAgICBpZiAoYiA9PT0gZCkgcmV0dXJuIGE7XG4gICAgaWYgKHZvaWQgMCA9PT0gZC5pKSByZXR1cm4gbnVsbDtcbiAgICBhID0gb2IoYSwgYiwgZC5pKTtcbiAgICByZXR1cm4gbnVsbCA9PT0gYSA/IG51bGwgOiBkLlMoYSk7XG4gIH1cbiAgdmFyIHBiID0ge307XG4gIGZ1bmN0aW9uIHFiKGEsIGIpIHtcbiAgICBmb3IgKHZvaWQgMCA9PT0gYiAmJiBQKFwicHRyIHNob3VsZCBub3QgYmUgdW5kZWZpbmVkXCIpOyBhLmk7IClcbiAgICAgIChiID0gYS53KGIpKSwgKGEgPSBhLmkpO1xuICAgIHJldHVybiBwYltiXTtcbiAgfVxuICBmdW5jdGlvbiByYihhLCBiKSB7XG4gICAgKGIuZiAmJiBiLmMpIHx8IFhhKFwibWFrZUNsYXNzSGFuZGxlIHJlcXVpcmVzIHB0ciBhbmQgcHRyVHlwZVwiKTtcbiAgICAhIWIuaCAhPT0gISFiLmcgJiYgWGEoXCJCb3RoIHNtYXJ0UHRyVHlwZSBhbmQgc21hcnRQdHIgbXVzdCBiZSBzcGVjaWZpZWRcIik7XG4gICAgYi5jb3VudCA9IHsgdmFsdWU6IDEgfTtcbiAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShhLCB7IGE6IHsgdmFsdWU6IGIgfSB9KTtcbiAgfVxuICBmdW5jdGlvbiBVKGEsIGIsIGQsIGUsIGYsIGwsIGgsIGssIG0sIHAsIGcpIHtcbiAgICB0aGlzLm5hbWUgPSBhO1xuICAgIHRoaXMuYiA9IGI7XG4gICAgdGhpcy5HID0gZDtcbiAgICB0aGlzLkMgPSBlO1xuICAgIHRoaXMuRCA9IGY7XG4gICAgdGhpcy5ZID0gbDtcbiAgICB0aGlzLmJhID0gaDtcbiAgICB0aGlzLk0gPSBrO1xuICAgIHRoaXMuJCA9IG07XG4gICAgdGhpcy5hYSA9IHA7XG4gICAgdGhpcy5vID0gZztcbiAgICBmIHx8IHZvaWQgMCAhPT0gYi5pXG4gICAgICA/ICh0aGlzLnRvV2lyZVR5cGUgPSBqYilcbiAgICAgIDogKCh0aGlzLnRvV2lyZVR5cGUgPSBlID8gaWIgOiBrYiksICh0aGlzLmwgPSBudWxsKSk7XG4gIH1cbiAgZnVuY3Rpb24gc2IoYSwgYikge1xuICAgIGMuaGFzT3duUHJvcGVydHkoYSkgfHwgWGEoXCJSZXBsYWNpbmcgbm9uZXhpc3RhbnQgcHVibGljIHN5bWJvbFwiKTtcbiAgICBjW2FdID0gYjtcbiAgICBjW2FdLkEgPSB2b2lkIDA7XG4gIH1cbiAgZnVuY3Rpb24gVihhLCBiKSB7XG4gICAgYSA9IEsoYSk7XG4gICAgaWYgKHZvaWQgMCAhPT0gY1tcIkZVTkNUSU9OX1RBQkxFX1wiICsgYV0pXG4gICAgICB2YXIgZCA9IGNbXCJGVU5DVElPTl9UQUJMRV9cIiArIGFdW2JdO1xuICAgIGVsc2UgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBGVU5DVElPTl9UQUJMRSkgZCA9IEZVTkNUSU9OX1RBQkxFW2JdO1xuICAgIGVsc2Uge1xuICAgICAgZCA9IGMuYXNtW1wiZHluQ2FsbF9cIiArIGFdO1xuICAgICAgdm9pZCAwID09PSBkICYmXG4gICAgICAgICgoZCA9IGMuYXNtW1wiZHluQ2FsbF9cIiArIGEucmVwbGFjZSgvZi9nLCBcImRcIildKSxcbiAgICAgICAgdm9pZCAwID09PSBkICYmIFAoXCJObyBkeW5DYWxsIGludm9rZXIgZm9yIHNpZ25hdHVyZTogXCIgKyBhKSk7XG4gICAgICBmb3IgKHZhciBlID0gW10sIGYgPSAxOyBmIDwgYS5sZW5ndGg7ICsrZikgZS5wdXNoKFwiYVwiICsgZik7XG4gICAgICBmID1cbiAgICAgICAgXCJyZXR1cm4gZnVuY3Rpb24gXCIgK1xuICAgICAgICAoXCJkeW5DYWxsX1wiICsgYSArIFwiX1wiICsgYikgK1xuICAgICAgICBcIihcIiArXG4gICAgICAgIGUuam9pbihcIiwgXCIpICtcbiAgICAgICAgXCIpIHtcXG5cIjtcbiAgICAgIGYgKz1cbiAgICAgICAgXCIgICAgcmV0dXJuIGR5bkNhbGwocmF3RnVuY3Rpb25cIiArXG4gICAgICAgIChlLmxlbmd0aCA/IFwiLCBcIiA6IFwiXCIpICtcbiAgICAgICAgZS5qb2luKFwiLCBcIikgK1xuICAgICAgICBcIik7XFxuXCI7XG4gICAgICBkID0gbmV3IEZ1bmN0aW9uKFwiZHluQ2FsbFwiLCBcInJhd0Z1bmN0aW9uXCIsIGYgKyBcIn07XFxuXCIpKGQsIGIpO1xuICAgIH1cbiAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBkICYmXG4gICAgICBQKFwidW5rbm93biBmdW5jdGlvbiBwb2ludGVyIHdpdGggc2lnbmF0dXJlIFwiICsgYSArIFwiOiBcIiArIGIpO1xuICAgIHJldHVybiBkO1xuICB9XG4gIHZhciB0YiA9IHZvaWQgMDtcbiAgZnVuY3Rpb24gdWIoYSkge1xuICAgIGEgPSB3YihhKTtcbiAgICB2YXIgYiA9IEsoYSk7XG4gICAgWChhKTtcbiAgICByZXR1cm4gYjtcbiAgfVxuICBmdW5jdGlvbiB4YihhLCBiKSB7XG4gICAgZnVuY3Rpb24gZChhKSB7XG4gICAgICBmW2FdIHx8IE1bYV0gfHwgKFNhW2FdID8gU2FbYV0uZm9yRWFjaChkKSA6IChlLnB1c2goYSksIChmW2FdID0gITApKSk7XG4gICAgfVxuICAgIHZhciBlID0gW10sXG4gICAgICBmID0ge307XG4gICAgYi5mb3JFYWNoKGQpO1xuICAgIHRocm93IG5ldyB0YihhICsgXCI6IFwiICsgZS5tYXAodWIpLmpvaW4oW1wiLCBcIl0pKTtcbiAgfVxuICBmdW5jdGlvbiB5YihhLCBiKSB7XG4gICAgZm9yICh2YXIgZCA9IFtdLCBlID0gMDsgZSA8IGE7IGUrKykgZC5wdXNoKEFbKGIgPj4gMikgKyBlXSk7XG4gICAgcmV0dXJuIGQ7XG4gIH1cbiAgZnVuY3Rpb24gemIoYSkge1xuICAgIGZvciAoOyBhLmxlbmd0aDsgKSB7XG4gICAgICB2YXIgYiA9IGEucG9wKCk7XG4gICAgICBhLnBvcCgpKGIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBBYihhKSB7XG4gICAgdmFyIGIgPSBGdW5jdGlvbjtcbiAgICBpZiAoIShiIGluc3RhbmNlb2YgRnVuY3Rpb24pKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgXCJuZXdfIGNhbGxlZCB3aXRoIGNvbnN0cnVjdG9yIHR5cGUgXCIgK1xuICAgICAgICAgIHR5cGVvZiBiICtcbiAgICAgICAgICBcIiB3aGljaCBpcyBub3QgYSBmdW5jdGlvblwiXG4gICAgICApO1xuICAgIHZhciBkID0gVWEoYi5uYW1lIHx8IFwidW5rbm93bkZ1bmN0aW9uTmFtZVwiLCBmdW5jdGlvbiAoKSB7fSk7XG4gICAgZC5wcm90b3R5cGUgPSBiLnByb3RvdHlwZTtcbiAgICBkID0gbmV3IGQoKTtcbiAgICBhID0gYi5hcHBseShkLCBhKTtcbiAgICByZXR1cm4gYSBpbnN0YW5jZW9mIE9iamVjdCA/IGEgOiBkO1xuICB9XG4gIHZhciBCYiA9IFtdLFxuICAgIFkgPSBbe30sIHsgdmFsdWU6IHZvaWQgMCB9LCB7IHZhbHVlOiBudWxsIH0sIHsgdmFsdWU6ICEwIH0sIHsgdmFsdWU6ICExIH1dO1xuICBmdW5jdGlvbiBDYihhKSB7XG4gICAgNCA8IGEgJiYgMCA9PT0gLS1ZW2FdLkggJiYgKChZW2FdID0gdm9pZCAwKSwgQmIucHVzaChhKSk7XG4gIH1cbiAgZnVuY3Rpb24gVChhKSB7XG4gICAgc3dpdGNoIChhKSB7XG4gICAgICBjYXNlIHZvaWQgMDpcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBjYXNlIG51bGw6XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgY2FzZSAhMDpcbiAgICAgICAgcmV0dXJuIDM7XG4gICAgICBjYXNlICExOlxuICAgICAgICByZXR1cm4gNDtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHZhciBiID0gQmIubGVuZ3RoID8gQmIucG9wKCkgOiBZLmxlbmd0aDtcbiAgICAgICAgWVtiXSA9IHsgSDogMSwgdmFsdWU6IGEgfTtcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIFMoYSkge1xuICAgIGlmIChudWxsID09PSBhKSByZXR1cm4gXCJudWxsXCI7XG4gICAgdmFyIGIgPSB0eXBlb2YgYTtcbiAgICByZXR1cm4gXCJvYmplY3RcIiA9PT0gYiB8fCBcImFycmF5XCIgPT09IGIgfHwgXCJmdW5jdGlvblwiID09PSBiXG4gICAgICA/IGEudG9TdHJpbmcoKVxuICAgICAgOiBcIlwiICsgYTtcbiAgfVxuICBmdW5jdGlvbiBEYihhLCBiKSB7XG4gICAgc3dpdGNoIChiKSB7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZyb21XaXJlVHlwZShwYVthID4+IDJdKTtcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVdpcmVUeXBlKHFhW2EgPj4gM10pO1xuICAgICAgICB9O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZmxvYXQgdHlwZTogXCIgKyBhKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gRWIoYSwgYiwgZCkge1xuICAgIHN3aXRjaCAoYikge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gZFxuICAgICAgICAgID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG1hW2FdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIDogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHpbYV07XG4gICAgICAgICAgICB9O1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gZFxuICAgICAgICAgID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5hW2EgPj4gMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICByZXR1cm4gb2FbYSA+PiAxXTtcbiAgICAgICAgICAgIH07XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBkXG4gICAgICAgICAgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICByZXR1cm4gQVthID4+IDJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIDogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIEJbYSA+PiAyXTtcbiAgICAgICAgICAgIH07XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBpbnRlZ2VyIHR5cGU6IFwiICsgYSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIFooYSkge1xuICAgIGEgfHwgUChcIkNhbm5vdCB1c2UgZGVsZXRlZCB2YWwuIGhhbmRsZSA9IFwiICsgYSk7XG4gICAgcmV0dXJuIFlbYV0udmFsdWU7XG4gIH1cbiAgZnVuY3Rpb24gRmIoYSwgYikge1xuICAgIHZhciBkID0gTVthXTtcbiAgICB2b2lkIDAgPT09IGQgJiYgUChiICsgXCIgaGFzIHVua25vd24gdHlwZSBcIiArIHViKGEpKTtcbiAgICByZXR1cm4gZDtcbiAgfVxuICBmb3IgKHZhciBHYiA9IHt9LCBIYiA9IEFycmF5KDI1NiksIEliID0gMDsgMjU2ID4gSWI7ICsrSWIpXG4gICAgSGJbSWJdID0gU3RyaW5nLmZyb21DaGFyQ29kZShJYik7XG4gIFJhID0gSGI7XG4gIE8gPSBjLkJpbmRpbmdFcnJvciA9IFZhKFwiQmluZGluZ0Vycm9yXCIpO1xuICBXYSA9IGMuSW50ZXJuYWxFcnJvciA9IFZhKFwiSW50ZXJuYWxFcnJvclwiKTtcbiAgUi5wcm90b3R5cGUuaXNBbGlhc09mID0gZnVuY3Rpb24gKGEpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUiAmJiBhIGluc3RhbmNlb2YgUikpIHJldHVybiAhMTtcbiAgICB2YXIgYiA9IHRoaXMuYS5mLmIsXG4gICAgICBkID0gdGhpcy5hLmMsXG4gICAgICBlID0gYS5hLmYuYjtcbiAgICBmb3IgKGEgPSBhLmEuYzsgYi5pOyApIChkID0gYi53KGQpKSwgKGIgPSBiLmkpO1xuICAgIGZvciAoOyBlLmk7ICkgKGEgPSBlLncoYSkpLCAoZSA9IGUuaSk7XG4gICAgcmV0dXJuIGIgPT09IGUgJiYgZCA9PT0gYTtcbiAgfTtcbiAgUi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hLmMgfHwgWmEodGhpcyk7XG4gICAgaWYgKHRoaXMuYS52KSByZXR1cm4gKHRoaXMuYS5jb3VudC52YWx1ZSArPSAxKSwgdGhpcztcbiAgICB2YXIgYSA9IHRoaXMuYTtcbiAgICBhID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyksIHtcbiAgICAgIGE6IHtcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICBjb3VudDogYS5jb3VudCxcbiAgICAgICAgICBzOiBhLnMsXG4gICAgICAgICAgdjogYS52LFxuICAgICAgICAgIGM6IGEuYyxcbiAgICAgICAgICBmOiBhLmYsXG4gICAgICAgICAgZzogYS5nLFxuICAgICAgICAgIGg6IGEuaCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgYS5hLmNvdW50LnZhbHVlICs9IDE7XG4gICAgYS5hLnMgPSAhMTtcbiAgICByZXR1cm4gYTtcbiAgfTtcbiAgUi5wcm90b3R5cGVbXCJkZWxldGVcIl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hLmMgfHwgWmEodGhpcyk7XG4gICAgdGhpcy5hLnMgJiYgIXRoaXMuYS52ICYmIFAoXCJPYmplY3QgYWxyZWFkeSBzY2hlZHVsZWQgZm9yIGRlbGV0aW9uXCIpO1xuICAgIC0tdGhpcy5hLmNvdW50LnZhbHVlO1xuICAgIGlmICgwID09PSB0aGlzLmEuY291bnQudmFsdWUpIHtcbiAgICAgIHZhciBhID0gdGhpcy5hO1xuICAgICAgYS5nID8gYS5oLm8oYS5nKSA6IGEuZi5iLm8oYS5jKTtcbiAgICB9XG4gICAgdGhpcy5hLnYgfHwgKCh0aGlzLmEuZyA9IHZvaWQgMCksICh0aGlzLmEuYyA9IHZvaWQgMCkpO1xuICB9O1xuICBSLnByb3RvdHlwZS5pc0RlbGV0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICF0aGlzLmEuYztcbiAgfTtcbiAgUi5wcm90b3R5cGUuZGVsZXRlTGF0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hLmMgfHwgWmEodGhpcyk7XG4gICAgdGhpcy5hLnMgJiYgIXRoaXMuYS52ICYmIFAoXCJPYmplY3QgYWxyZWFkeSBzY2hlZHVsZWQgZm9yIGRlbGV0aW9uXCIpO1xuICAgIGFiLnB1c2godGhpcyk7XG4gICAgMSA9PT0gYWIubGVuZ3RoICYmICRhICYmICRhKGNiKTtcbiAgICB0aGlzLmEucyA9ICEwO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBVLnByb3RvdHlwZS5VID0gZnVuY3Rpb24gKGEpIHtcbiAgICB0aGlzLk0gJiYgKGEgPSB0aGlzLk0oYSkpO1xuICAgIHJldHVybiBhO1xuICB9O1xuICBVLnByb3RvdHlwZS5LID0gZnVuY3Rpb24gKGEpIHtcbiAgICB0aGlzLm8gJiYgdGhpcy5vKGEpO1xuICB9O1xuICBVLnByb3RvdHlwZS5hcmdQYWNrQWR2YW5jZSA9IDg7XG4gIFUucHJvdG90eXBlLnJlYWRWYWx1ZUZyb21Qb2ludGVyID0gbGI7XG4gIFUucHJvdG90eXBlLmRlbGV0ZU9iamVjdCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgaWYgKG51bGwgIT09IGEpIGFbXCJkZWxldGVcIl0oKTtcbiAgfTtcbiAgVS5wcm90b3R5cGUuZnJvbVdpcmVUeXBlID0gZnVuY3Rpb24gKGEpIHtcbiAgICBmdW5jdGlvbiBiKCkge1xuICAgICAgcmV0dXJuIHRoaXMuRFxuICAgICAgICA/IHJiKHRoaXMuYi51LCB7IGY6IHRoaXMuWSwgYzogZCwgaDogdGhpcywgZzogYSB9KVxuICAgICAgICA6IHJiKHRoaXMuYi51LCB7IGY6IHRoaXMsIGM6IGEgfSk7XG4gICAgfVxuICAgIHZhciBkID0gdGhpcy5VKGEpO1xuICAgIGlmICghZCkgcmV0dXJuIHRoaXMuSyhhKSwgbnVsbDtcbiAgICB2YXIgZSA9IHFiKHRoaXMuYiwgZCk7XG4gICAgaWYgKHZvaWQgMCAhPT0gZSkge1xuICAgICAgaWYgKDAgPT09IGUuYS5jb3VudC52YWx1ZSkgcmV0dXJuIChlLmEuYyA9IGQpLCAoZS5hLmcgPSBhKSwgZS5jbG9uZSgpO1xuICAgICAgZSA9IGUuY2xvbmUoKTtcbiAgICAgIHRoaXMuSyhhKTtcbiAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICBlID0gdGhpcy5iLlQoZCk7XG4gICAgZSA9IGRiW2VdO1xuICAgIGlmICghZSkgcmV0dXJuIGIuY2FsbCh0aGlzKTtcbiAgICBlID0gdGhpcy5DID8gZS5SIDogZS5wb2ludGVyVHlwZTtcbiAgICB2YXIgZiA9IG9iKGQsIHRoaXMuYiwgZS5iKTtcbiAgICByZXR1cm4gbnVsbCA9PT0gZlxuICAgICAgPyBiLmNhbGwodGhpcylcbiAgICAgIDogdGhpcy5EXG4gICAgICA/IHJiKGUuYi51LCB7IGY6IGUsIGM6IGYsIGg6IHRoaXMsIGc6IGEgfSlcbiAgICAgIDogcmIoZS5iLnUsIHsgZjogZSwgYzogZiB9KTtcbiAgfTtcbiAgYy5nZXRJbmhlcml0ZWRJbnN0YW5jZUNvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwYikubGVuZ3RoO1xuICB9O1xuICBjLmdldExpdmVJbmhlcml0ZWRJbnN0YW5jZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGEgPSBbXSxcbiAgICAgIGI7XG4gICAgZm9yIChiIGluIHBiKSBwYi5oYXNPd25Qcm9wZXJ0eShiKSAmJiBhLnB1c2gocGJbYl0pO1xuICAgIHJldHVybiBhO1xuICB9O1xuICBjLmZsdXNoUGVuZGluZ0RlbGV0ZXMgPSBjYjtcbiAgYy5zZXREZWxheUZ1bmN0aW9uID0gZnVuY3Rpb24gKGEpIHtcbiAgICAkYSA9IGE7XG4gICAgYWIubGVuZ3RoICYmICRhICYmICRhKGNiKTtcbiAgfTtcbiAgdGIgPSBjLlVuYm91bmRUeXBlRXJyb3IgPSBWYShcIlVuYm91bmRUeXBlRXJyb3JcIik7XG4gIGMuY291bnRfZW12YWxfaGFuZGxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBhID0gMCwgYiA9IDU7IGIgPCBZLmxlbmd0aDsgKytiKSB2b2lkIDAgIT09IFlbYl0gJiYgKythO1xuICAgIHJldHVybiBhO1xuICB9O1xuICBjLmdldF9maXJzdF9lbXZhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBhID0gNTsgYSA8IFkubGVuZ3RoOyArK2EpIGlmICh2b2lkIDAgIT09IFlbYV0pIHJldHVybiBZW2FdO1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuICB2YXIgSmIgPSBDO1xuICBDID0gKEMgKyA0ICsgMTUpICYgLTE2O1xuICB4YSA9IEpiO1xuICB0YSA9IHVhID0gaWEoQyk7XG4gIHZhID0gdGEgKyB6YTtcbiAgd2EgPSBpYSh2YSk7XG4gIEFbeGEgPj4gMl0gPSB3YTtcbiAgYy53YXNtVGFibGVTaXplID0gODM7XG4gIGMud2FzbU1heFRhYmxlU2l6ZSA9IDgzO1xuICBjLk4gPSB7fTtcbiAgYy5PID0ge1xuICAgIGFib3J0OiB5LFxuICAgIGVubGFyZ2VNZW1vcnk6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHlhKCk7XG4gICAgfSxcbiAgICBnZXRUb3RhbE1lbW9yeTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIEU7XG4gICAgfSxcbiAgICBhYm9ydE9uQ2Fubm90R3Jvd01lbW9yeTogeWEsXG4gICAgX19fc2V0RXJyTm86IGZ1bmN0aW9uIChhKSB7XG4gICAgICBjLl9fX2Vycm5vX2xvY2F0aW9uICYmIChBW2MuX19fZXJybm9fbG9jYXRpb24oKSA+PiAyXSA9IGEpO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfSxcbiAgICBfX19zeXNjYWxsMTQwOiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgSCA9IGI7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZCA9IFBhLlYoKTtcbiAgICAgICAgSSgpO1xuICAgICAgICB2YXIgZSA9IEkoKSxcbiAgICAgICAgICBmID0gSSgpLFxuICAgICAgICAgIGwgPSBJKCk7XG4gICAgICAgIEZTLmVhKGQsIGUsIGwpO1xuICAgICAgICBBW2YgPj4gMl0gPSBkLnBvc2l0aW9uO1xuICAgICAgICBkLlcgJiYgMCA9PT0gZSAmJiAwID09PSBsICYmIChkLlcgPSBudWxsKTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IGNhdGNoIChoKSB7XG4gICAgICAgIHJldHVybiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIEZTICYmIGggaW5zdGFuY2VvZiBGUy5JKSB8fCB5KGgpLCAtaC5MO1xuICAgICAgfVxuICAgIH0sXG4gICAgX19fc3lzY2FsbDE0NjogSixcbiAgICBfX19zeXNjYWxsNTQ6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBIID0gYjtcbiAgICAgIHJldHVybiAwO1xuICAgIH0sXG4gICAgX19fc3lzY2FsbDY6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBIID0gYjtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBkID0gUGEuVigpO1xuICAgICAgICBGUy5jbG9zZShkKTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIEZTICYmIGUgaW5zdGFuY2VvZiBGUy5JKSB8fCB5KGUpLCAtZS5MO1xuICAgICAgfVxuICAgIH0sXG4gICAgX19lbWJpbmRfcmVnaXN0ZXJfYm9vbDogZnVuY3Rpb24gKGEsIGIsIGQsIGUsIGYpIHtcbiAgICAgIHZhciBsID0gUWEoZCk7XG4gICAgICBiID0gSyhiKTtcbiAgICAgIFEoYSwge1xuICAgICAgICBuYW1lOiBiLFxuICAgICAgICBmcm9tV2lyZVR5cGU6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgcmV0dXJuICEhYTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9XaXJlVHlwZTogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gYiA/IGUgOiBmO1xuICAgICAgICB9LFxuICAgICAgICBhcmdQYWNrQWR2YW5jZTogOCxcbiAgICAgICAgcmVhZFZhbHVlRnJvbVBvaW50ZXI6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgaWYgKDEgPT09IGQpIHZhciBlID0gbWE7XG4gICAgICAgICAgZWxzZSBpZiAoMiA9PT0gZCkgZSA9IG5hO1xuICAgICAgICAgIGVsc2UgaWYgKDQgPT09IGQpIGUgPSBBO1xuICAgICAgICAgIGVsc2UgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gYm9vbGVhbiB0eXBlIHNpemU6IFwiICsgYik7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVdpcmVUeXBlKGVbYSA+PiBsXSk7XG4gICAgICAgIH0sXG4gICAgICAgIGw6IG51bGwsXG4gICAgICB9KTtcbiAgICB9LFxuICAgIF9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzOiBmdW5jdGlvbiAoYSwgYiwgZCwgZSwgZiwgbCwgaCwgaywgbSwgcCwgZywgcSwgRCkge1xuICAgICAgZyA9IEsoZyk7XG4gICAgICBsID0gVihmLCBsKTtcbiAgICAgIGsgJiYgKGsgPSBWKGgsIGspKTtcbiAgICAgIHAgJiYgKHAgPSBWKG0sIHApKTtcbiAgICAgIEQgPSBWKHEsIEQpO1xuICAgICAgdmFyIHQgPSBUYShnKTtcbiAgICAgIGZiKHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgeGIoXCJDYW5ub3QgY29uc3RydWN0IFwiICsgZyArIFwiIGR1ZSB0byB1bmJvdW5kIHR5cGVzXCIsIFtlXSk7XG4gICAgICB9KTtcbiAgICAgIFlhKFthLCBiLCBkXSwgZSA/IFtlXSA6IFtdLCBmdW5jdGlvbiAoYikge1xuICAgICAgICBiID0gYlswXTtcbiAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICB2YXIgZCA9IGIuYjtcbiAgICAgICAgICB2YXIgZiA9IGQudTtcbiAgICAgICAgfSBlbHNlIGYgPSBSLnByb3RvdHlwZTtcbiAgICAgICAgYiA9IFVhKHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpICE9PSBoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IE8oXCJVc2UgJ25ldycgdG8gY29uc3RydWN0IFwiICsgZyk7XG4gICAgICAgICAgaWYgKHZvaWQgMCA9PT0gbS5tKSB0aHJvdyBuZXcgTyhnICsgXCIgaGFzIG5vIGFjY2Vzc2libGUgY29uc3RydWN0b3JcIik7XG4gICAgICAgICAgdmFyIGEgPSBtLm1bYXJndW1lbnRzLmxlbmd0aF07XG4gICAgICAgICAgaWYgKHZvaWQgMCA9PT0gYSlcbiAgICAgICAgICAgIHRocm93IG5ldyBPKFxuICAgICAgICAgICAgICBcIlRyaWVkIHRvIGludm9rZSBjdG9yIG9mIFwiICtcbiAgICAgICAgICAgICAgICBnICtcbiAgICAgICAgICAgICAgICBcIiB3aXRoIGludmFsaWQgbnVtYmVyIG9mIHBhcmFtZXRlcnMgKFwiICtcbiAgICAgICAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoICtcbiAgICAgICAgICAgICAgICBcIikgLSBleHBlY3RlZCAoXCIgK1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG0ubSkudG9TdHJpbmcoKSArXG4gICAgICAgICAgICAgICAgXCIpIHBhcmFtZXRlcnMgaW5zdGVhZCFcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gYS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGggPSBPYmplY3QuY3JlYXRlKGYsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IGIgfSB9KTtcbiAgICAgICAgYi5wcm90b3R5cGUgPSBoO1xuICAgICAgICB2YXIgbSA9IG5ldyBnYihnLCBiLCBoLCBELCBkLCBsLCBrLCBwKTtcbiAgICAgICAgZCA9IG5ldyBVKGcsIG0sICEwLCAhMSwgITEpO1xuICAgICAgICBmID0gbmV3IFUoZyArIFwiKlwiLCBtLCAhMSwgITEsICExKTtcbiAgICAgICAgdmFyIHEgPSBuZXcgVShnICsgXCIgY29uc3QqXCIsIG0sICExLCAhMCwgITEpO1xuICAgICAgICBkYlthXSA9IHsgcG9pbnRlclR5cGU6IGYsIFI6IHEgfTtcbiAgICAgICAgc2IodCwgYik7XG4gICAgICAgIHJldHVybiBbZCwgZiwgcV07XG4gICAgICB9KTtcbiAgICB9LFxuICAgIF9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2NvbnN0cnVjdG9yOiBmdW5jdGlvbiAoYSwgYiwgZCwgZSwgZiwgbCkge1xuICAgICAgdmFyIGggPSB5YihiLCBkKTtcbiAgICAgIGYgPSBWKGUsIGYpO1xuICAgICAgWWEoW10sIFthXSwgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgYSA9IGFbMF07XG4gICAgICAgIHZhciBkID0gXCJjb25zdHJ1Y3RvciBcIiArIGEubmFtZTtcbiAgICAgICAgdm9pZCAwID09PSBhLmIubSAmJiAoYS5iLm0gPSBbXSk7XG4gICAgICAgIGlmICh2b2lkIDAgIT09IGEuYi5tW2IgLSAxXSlcbiAgICAgICAgICB0aHJvdyBuZXcgTyhcbiAgICAgICAgICAgIFwiQ2Fubm90IHJlZ2lzdGVyIG11bHRpcGxlIGNvbnN0cnVjdG9ycyB3aXRoIGlkZW50aWNhbCBudW1iZXIgb2YgcGFyYW1ldGVycyAoXCIgK1xuICAgICAgICAgICAgICAoYiAtIDEpICtcbiAgICAgICAgICAgICAgXCIpIGZvciBjbGFzcyAnXCIgK1xuICAgICAgICAgICAgICBhLm5hbWUgK1xuICAgICAgICAgICAgICBcIichIE92ZXJsb2FkIHJlc29sdXRpb24gaXMgY3VycmVudGx5IG9ubHkgcGVyZm9ybWVkIHVzaW5nIHRoZSBwYXJhbWV0ZXIgY291bnQsIG5vdCBhY3R1YWwgdHlwZSBpbmZvIVwiXG4gICAgICAgICAgKTtcbiAgICAgICAgYS5iLm1bYiAtIDFdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHhiKFwiQ2Fubm90IGNvbnN0cnVjdCBcIiArIGEubmFtZSArIFwiIGR1ZSB0byB1bmJvdW5kIHR5cGVzXCIsIGgpO1xuICAgICAgICB9O1xuICAgICAgICBZYShbXSwgaCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBhLmIubVtiIC0gMV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoICE9PSBiIC0gMSAmJlxuICAgICAgICAgICAgICBQKFxuICAgICAgICAgICAgICAgIGQgK1xuICAgICAgICAgICAgICAgICAgXCIgY2FsbGVkIHdpdGggXCIgK1xuICAgICAgICAgICAgICAgICAgYXJndW1lbnRzLmxlbmd0aCArXG4gICAgICAgICAgICAgICAgICBcIiBhcmd1bWVudHMsIGV4cGVjdGVkIFwiICtcbiAgICAgICAgICAgICAgICAgIChiIC0gMSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHZhciBhID0gW10sXG4gICAgICAgICAgICAgIGggPSBBcnJheShiKTtcbiAgICAgICAgICAgIGhbMF0gPSBsO1xuICAgICAgICAgICAgZm9yICh2YXIgayA9IDE7IGsgPCBiOyArK2spXG4gICAgICAgICAgICAgIGhba10gPSBlW2tdLnRvV2lyZVR5cGUoYSwgYXJndW1lbnRzW2sgLSAxXSk7XG4gICAgICAgICAgICBoID0gZi5hcHBseShudWxsLCBoKTtcbiAgICAgICAgICAgIHpiKGEpO1xuICAgICAgICAgICAgcmV0dXJuIGVbMF0uZnJvbVdpcmVUeXBlKGgpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBfX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19mdW5jdGlvbjogZnVuY3Rpb24gKGEsIGIsIGQsIGUsIGYsIGwsIGgsIGspIHtcbiAgICAgIHZhciBtID0geWIoZCwgZSk7XG4gICAgICBiID0gSyhiKTtcbiAgICAgIGwgPSBWKGYsIGwpO1xuICAgICAgWWEoW10sIFthXSwgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgZnVuY3Rpb24gZSgpIHtcbiAgICAgICAgICB4YihcIkNhbm5vdCBjYWxsIFwiICsgZiArIFwiIGR1ZSB0byB1bmJvdW5kIHR5cGVzXCIsIG0pO1xuICAgICAgICB9XG4gICAgICAgIGEgPSBhWzBdO1xuICAgICAgICB2YXIgZiA9IGEubmFtZSArIFwiLlwiICsgYjtcbiAgICAgICAgayAmJiBhLmIuWi5wdXNoKGIpO1xuICAgICAgICB2YXIgcCA9IGEuYi51LFxuICAgICAgICAgIHQgPSBwW2JdO1xuICAgICAgICB2b2lkIDAgPT09IHQgfHxcbiAgICAgICAgKHZvaWQgMCA9PT0gdC5qICYmIHQuY2xhc3NOYW1lICE9PSBhLm5hbWUgJiYgdC5BID09PSBkIC0gMilcbiAgICAgICAgICA/ICgoZS5BID0gZCAtIDIpLCAoZS5jbGFzc05hbWUgPSBhLm5hbWUpLCAocFtiXSA9IGUpKVxuICAgICAgICAgIDogKGViKHAsIGIsIGYpLCAocFtiXS5qW2QgLSAyXSA9IGUpKTtcbiAgICAgICAgWWEoW10sIG0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdmFyIGsgPSBmLFxuICAgICAgICAgICAgZyA9IGEsXG4gICAgICAgICAgICBtID0gbCxcbiAgICAgICAgICAgIHEgPSBlLmxlbmd0aDtcbiAgICAgICAgICAyID4gcSAmJlxuICAgICAgICAgICAgUChcbiAgICAgICAgICAgICAgXCJhcmdUeXBlcyBhcnJheSBzaXplIG1pc21hdGNoISBNdXN0IGF0IGxlYXN0IGdldCByZXR1cm4gdmFsdWUgYW5kICd0aGlzJyB0eXBlcyFcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB2YXIgdCA9IG51bGwgIT09IGVbMV0gJiYgbnVsbCAhPT0gZyxcbiAgICAgICAgICAgIEQgPSAhMTtcbiAgICAgICAgICBmb3IgKGcgPSAxOyBnIDwgZS5sZW5ndGg7ICsrZylcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBlW2ddICYmIHZvaWQgMCA9PT0gZVtnXS5sKSB7XG4gICAgICAgICAgICAgIEQgPSAhMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG1iID0gXCJ2b2lkXCIgIT09IGVbMF0ubmFtZSxcbiAgICAgICAgICAgIE4gPSBcIlwiLFxuICAgICAgICAgICAgVyA9IFwiXCI7XG4gICAgICAgICAgZm9yIChnID0gMDsgZyA8IHEgLSAyOyArK2cpXG4gICAgICAgICAgICAoTiArPSAoMCAhPT0gZyA/IFwiLCBcIiA6IFwiXCIpICsgXCJhcmdcIiArIGcpLFxuICAgICAgICAgICAgICAoVyArPSAoMCAhPT0gZyA/IFwiLCBcIiA6IFwiXCIpICsgXCJhcmdcIiArIGcgKyBcIldpcmVkXCIpO1xuICAgICAgICAgIGsgPVxuICAgICAgICAgICAgXCJyZXR1cm4gZnVuY3Rpb24gXCIgK1xuICAgICAgICAgICAgVGEoaykgK1xuICAgICAgICAgICAgXCIoXCIgK1xuICAgICAgICAgICAgTiArXG4gICAgICAgICAgICBcIikge1xcbmlmIChhcmd1bWVudHMubGVuZ3RoICE9PSBcIiArXG4gICAgICAgICAgICAocSAtIDIpICtcbiAgICAgICAgICAgIFwiKSB7XFxudGhyb3dCaW5kaW5nRXJyb3IoJ2Z1bmN0aW9uIFwiICtcbiAgICAgICAgICAgIGsgK1xuICAgICAgICAgICAgXCIgY2FsbGVkIHdpdGggJyArIGFyZ3VtZW50cy5sZW5ndGggKyAnIGFyZ3VtZW50cywgZXhwZWN0ZWQgXCIgK1xuICAgICAgICAgICAgKHEgLSAyKSArXG4gICAgICAgICAgICBcIiBhcmdzIScpO1xcbn1cXG5cIjtcbiAgICAgICAgICBEICYmIChrICs9IFwidmFyIGRlc3RydWN0b3JzID0gW107XFxuXCIpO1xuICAgICAgICAgIHZhciBuYiA9IEQgPyBcImRlc3RydWN0b3JzXCIgOiBcIm51bGxcIjtcbiAgICAgICAgICBOID1cbiAgICAgICAgICAgIFwidGhyb3dCaW5kaW5nRXJyb3IgaW52b2tlciBmbiBydW5EZXN0cnVjdG9ycyByZXRUeXBlIGNsYXNzUGFyYW1cIi5zcGxpdChcbiAgICAgICAgICAgICAgXCIgXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgbSA9IFtQLCBtLCBoLCB6YiwgZVswXSwgZVsxXV07XG4gICAgICAgICAgdCAmJlxuICAgICAgICAgICAgKGsgKz0gXCJ2YXIgdGhpc1dpcmVkID0gY2xhc3NQYXJhbS50b1dpcmVUeXBlKFwiICsgbmIgKyBcIiwgdGhpcyk7XFxuXCIpO1xuICAgICAgICAgIGZvciAoZyA9IDA7IGcgPCBxIC0gMjsgKytnKVxuICAgICAgICAgICAgKGsgKz1cbiAgICAgICAgICAgICAgXCJ2YXIgYXJnXCIgK1xuICAgICAgICAgICAgICBnICtcbiAgICAgICAgICAgICAgXCJXaXJlZCA9IGFyZ1R5cGVcIiArXG4gICAgICAgICAgICAgIGcgK1xuICAgICAgICAgICAgICBcIi50b1dpcmVUeXBlKFwiICtcbiAgICAgICAgICAgICAgbmIgK1xuICAgICAgICAgICAgICBcIiwgYXJnXCIgK1xuICAgICAgICAgICAgICBnICtcbiAgICAgICAgICAgICAgXCIpOyAvLyBcIiArXG4gICAgICAgICAgICAgIGVbZyArIDJdLm5hbWUgK1xuICAgICAgICAgICAgICBcIlxcblwiKSxcbiAgICAgICAgICAgICAgTi5wdXNoKFwiYXJnVHlwZVwiICsgZyksXG4gICAgICAgICAgICAgIG0ucHVzaChlW2cgKyAyXSk7XG4gICAgICAgICAgdCAmJiAoVyA9IFwidGhpc1dpcmVkXCIgKyAoMCA8IFcubGVuZ3RoID8gXCIsIFwiIDogXCJcIikgKyBXKTtcbiAgICAgICAgICBrICs9XG4gICAgICAgICAgICAobWIgPyBcInZhciBydiA9IFwiIDogXCJcIikgK1xuICAgICAgICAgICAgXCJpbnZva2VyKGZuXCIgK1xuICAgICAgICAgICAgKDAgPCBXLmxlbmd0aCA/IFwiLCBcIiA6IFwiXCIpICtcbiAgICAgICAgICAgIFcgK1xuICAgICAgICAgICAgXCIpO1xcblwiO1xuICAgICAgICAgIGlmIChEKSBrICs9IFwicnVuRGVzdHJ1Y3RvcnMoZGVzdHJ1Y3RvcnMpO1xcblwiO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZvciAoZyA9IHQgPyAxIDogMjsgZyA8IGUubGVuZ3RoOyArK2cpXG4gICAgICAgICAgICAgIChxID0gMSA9PT0gZyA/IFwidGhpc1dpcmVkXCIgOiBcImFyZ1wiICsgKGcgLSAyKSArIFwiV2lyZWRcIiksXG4gICAgICAgICAgICAgICAgbnVsbCAhPT0gZVtnXS5sICYmXG4gICAgICAgICAgICAgICAgICAoKGsgKz0gcSArIFwiX2R0b3IoXCIgKyBxICsgXCIpOyAvLyBcIiArIGVbZ10ubmFtZSArIFwiXFxuXCIpLFxuICAgICAgICAgICAgICAgICAgTi5wdXNoKHEgKyBcIl9kdG9yXCIpLFxuICAgICAgICAgICAgICAgICAgbS5wdXNoKGVbZ10ubCkpO1xuICAgICAgICAgIG1iICYmIChrICs9IFwidmFyIHJldCA9IHJldFR5cGUuZnJvbVdpcmVUeXBlKHJ2KTtcXG5yZXR1cm4gcmV0O1xcblwiKTtcbiAgICAgICAgICBOLnB1c2goayArIFwifVxcblwiKTtcbiAgICAgICAgICBlID0gQWIoTikuYXBwbHkobnVsbCwgbSk7XG4gICAgICAgICAgdm9pZCAwID09PSBwW2JdLmogPyAoKGUuQSA9IGQgLSAyKSwgKHBbYl0gPSBlKSkgOiAocFtiXS5qW2QgLSAyXSA9IGUpO1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgX19lbWJpbmRfcmVnaXN0ZXJfZW12YWw6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBiID0gSyhiKTtcbiAgICAgIFEoYSwge1xuICAgICAgICBuYW1lOiBiLFxuICAgICAgICBmcm9tV2lyZVR5cGU6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgdmFyIGIgPSBZW2FdLnZhbHVlO1xuICAgICAgICAgIENiKGEpO1xuICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICB9LFxuICAgICAgICB0b1dpcmVUeXBlOiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBUKGIpO1xuICAgICAgICB9LFxuICAgICAgICBhcmdQYWNrQWR2YW5jZTogOCxcbiAgICAgICAgcmVhZFZhbHVlRnJvbVBvaW50ZXI6IGxiLFxuICAgICAgICBsOiBudWxsLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBfX2VtYmluZF9yZWdpc3Rlcl9mbG9hdDogZnVuY3Rpb24gKGEsIGIsIGQpIHtcbiAgICAgIGQgPSBRYShkKTtcbiAgICAgIGIgPSBLKGIpO1xuICAgICAgUShhLCB7XG4gICAgICAgIG5hbWU6IGIsXG4gICAgICAgIGZyb21XaXJlVHlwZTogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9XaXJlVHlwZTogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICBpZiAoXCJudW1iZXJcIiAhPT0gdHlwZW9mIGIgJiYgXCJib29sZWFuXCIgIT09IHR5cGVvZiBiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICAgJ0Nhbm5vdCBjb252ZXJ0IFwiJyArIFMoYikgKyAnXCIgdG8gJyArIHRoaXMubmFtZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfSxcbiAgICAgICAgYXJnUGFja0FkdmFuY2U6IDgsXG4gICAgICAgIHJlYWRWYWx1ZUZyb21Qb2ludGVyOiBEYihiLCBkKSxcbiAgICAgICAgbDogbnVsbCxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgX19lbWJpbmRfcmVnaXN0ZXJfaW50ZWdlcjogZnVuY3Rpb24gKGEsIGIsIGQsIGUsIGYpIHtcbiAgICAgIGZ1bmN0aW9uIGwoYSkge1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICAgIGIgPSBLKGIpO1xuICAgICAgLTEgPT09IGYgJiYgKGYgPSA0Mjk0OTY3Mjk1KTtcbiAgICAgIHZhciBoID0gUWEoZCk7XG4gICAgICBpZiAoMCA9PT0gZSkge1xuICAgICAgICB2YXIgayA9IDMyIC0gOCAqIGQ7XG4gICAgICAgIGwgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHJldHVybiAoYSA8PCBrKSA+Pj4gaztcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhciBtID0gLTEgIT0gYi5pbmRleE9mKFwidW5zaWduZWRcIik7XG4gICAgICBRKGEsIHtcbiAgICAgICAgbmFtZTogYixcbiAgICAgICAgZnJvbVdpcmVUeXBlOiBsLFxuICAgICAgICB0b1dpcmVUeXBlOiBmdW5jdGlvbiAoYSwgZCkge1xuICAgICAgICAgIGlmIChcIm51bWJlclwiICE9PSB0eXBlb2YgZCAmJiBcImJvb2xlYW5cIiAhPT0gdHlwZW9mIGQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgICAnQ2Fubm90IGNvbnZlcnQgXCInICsgUyhkKSArICdcIiB0byAnICsgdGhpcy5uYW1lXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGlmIChkIDwgZSB8fCBkID4gZilcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAgICdQYXNzaW5nIGEgbnVtYmVyIFwiJyArXG4gICAgICAgICAgICAgICAgUyhkKSArXG4gICAgICAgICAgICAgICAgJ1wiIGZyb20gSlMgc2lkZSB0byBDL0MrKyBzaWRlIHRvIGFuIGFyZ3VtZW50IG9mIHR5cGUgXCInICtcbiAgICAgICAgICAgICAgICBiICtcbiAgICAgICAgICAgICAgICAnXCIsIHdoaWNoIGlzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIFsnICtcbiAgICAgICAgICAgICAgICBlICtcbiAgICAgICAgICAgICAgICBcIiwgXCIgK1xuICAgICAgICAgICAgICAgIGYgK1xuICAgICAgICAgICAgICAgIFwiXSFcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gbSA/IGQgPj4+IDAgOiBkIHwgMDtcbiAgICAgICAgfSxcbiAgICAgICAgYXJnUGFja0FkdmFuY2U6IDgsXG4gICAgICAgIHJlYWRWYWx1ZUZyb21Qb2ludGVyOiBFYihiLCBoLCAwICE9PSBlKSxcbiAgICAgICAgbDogbnVsbCxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgX19lbWJpbmRfcmVnaXN0ZXJfbWVtb3J5X3ZpZXc6IGZ1bmN0aW9uIChhLCBiLCBkKSB7XG4gICAgICBmdW5jdGlvbiBlKGEpIHtcbiAgICAgICAgYSA+Pj0gMjtcbiAgICAgICAgdmFyIGIgPSBCO1xuICAgICAgICByZXR1cm4gbmV3IGYoYi5idWZmZXIsIGJbYSArIDFdLCBiW2FdKTtcbiAgICAgIH1cbiAgICAgIHZhciBmID0gW1xuICAgICAgICBJbnQ4QXJyYXksXG4gICAgICAgIFVpbnQ4QXJyYXksXG4gICAgICAgIEludDE2QXJyYXksXG4gICAgICAgIFVpbnQxNkFycmF5LFxuICAgICAgICBJbnQzMkFycmF5LFxuICAgICAgICBVaW50MzJBcnJheSxcbiAgICAgICAgRmxvYXQzMkFycmF5LFxuICAgICAgICBGbG9hdDY0QXJyYXksXG4gICAgICBdW2JdO1xuICAgICAgZCA9IEsoZCk7XG4gICAgICBRKFxuICAgICAgICBhLFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogZCxcbiAgICAgICAgICBmcm9tV2lyZVR5cGU6IGUsXG4gICAgICAgICAgYXJnUGFja0FkdmFuY2U6IDgsXG4gICAgICAgICAgcmVhZFZhbHVlRnJvbVBvaW50ZXI6IGUsXG4gICAgICAgIH0sXG4gICAgICAgIHsgWDogITAgfVxuICAgICAgKTtcbiAgICB9LFxuICAgIF9fZW1iaW5kX3JlZ2lzdGVyX3N0ZF9zdHJpbmc6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBiID0gSyhiKTtcbiAgICAgIFEoYSwge1xuICAgICAgICBuYW1lOiBiLFxuICAgICAgICBmcm9tV2lyZVR5cGU6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgZm9yICh2YXIgYiA9IEJbYSA+PiAyXSwgZCA9IEFycmF5KGIpLCBsID0gMDsgbCA8IGI7ICsrbClcbiAgICAgICAgICAgIGRbbF0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHpbYSArIDQgKyBsXSk7XG4gICAgICAgICAgWChhKTtcbiAgICAgICAgICByZXR1cm4gZC5qb2luKFwiXCIpO1xuICAgICAgICB9LFxuICAgICAgICB0b1dpcmVUeXBlOiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIGZ1bmN0aW9uIGQoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGFbYl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGUoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEuY2hhckNvZGVBdChiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyICYmIChiID0gbmV3IFVpbnQ4QXJyYXkoYikpO1xuICAgICAgICAgIHZhciBoO1xuICAgICAgICAgIGIgaW5zdGFuY2VvZiBVaW50OEFycmF5XG4gICAgICAgICAgICA/IChoID0gZClcbiAgICAgICAgICAgIDogYiBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5XG4gICAgICAgICAgICA/IChoID0gZClcbiAgICAgICAgICAgIDogYiBpbnN0YW5jZW9mIEludDhBcnJheVxuICAgICAgICAgICAgPyAoaCA9IGQpXG4gICAgICAgICAgICA6IFwic3RyaW5nXCIgPT09IHR5cGVvZiBiXG4gICAgICAgICAgICA/IChoID0gZSlcbiAgICAgICAgICAgIDogUChcIkNhbm5vdCBwYXNzIG5vbi1zdHJpbmcgdG8gc3RkOjpzdHJpbmdcIik7XG4gICAgICAgICAgdmFyIGsgPSBiLmxlbmd0aCxcbiAgICAgICAgICAgIG0gPSBLYig0ICsgayk7XG4gICAgICAgICAgQlttID4+IDJdID0gaztcbiAgICAgICAgICBmb3IgKHZhciBwID0gMDsgcCA8IGs7ICsrcCkge1xuICAgICAgICAgICAgdmFyIGcgPSBoKGIsIHApO1xuICAgICAgICAgICAgMjU1IDwgZyAmJlxuICAgICAgICAgICAgICAoWChtKSxcbiAgICAgICAgICAgICAgUChcIlN0cmluZyBoYXMgVVRGLTE2IGNvZGUgdW5pdHMgdGhhdCBkbyBub3QgZml0IGluIDggYml0c1wiKSk7XG4gICAgICAgICAgICB6W20gKyA0ICsgcF0gPSBnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBudWxsICE9PSBhICYmIGEucHVzaChYLCBtKTtcbiAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfSxcbiAgICAgICAgYXJnUGFja0FkdmFuY2U6IDgsXG4gICAgICAgIHJlYWRWYWx1ZUZyb21Qb2ludGVyOiBsYixcbiAgICAgICAgbDogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICBYKGEpO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBfX2VtYmluZF9yZWdpc3Rlcl9zdGRfd3N0cmluZzogZnVuY3Rpb24gKGEsIGIsIGQpIHtcbiAgICAgIGQgPSBLKGQpO1xuICAgICAgaWYgKDIgPT09IGIpIHtcbiAgICAgICAgdmFyIGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIG9hO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZiA9IDE7XG4gICAgICB9IGVsc2VcbiAgICAgICAgNCA9PT0gYiAmJlxuICAgICAgICAgICgoZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBCO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIChmID0gMikpO1xuICAgICAgUShhLCB7XG4gICAgICAgIG5hbWU6IGQsXG4gICAgICAgIGZyb21XaXJlVHlwZTogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgdmFyIGIgPSBlKCksIGQgPSBCW2EgPj4gMl0sIGwgPSBBcnJheShkKSwgcCA9IChhICsgNCkgPj4gZiwgZyA9IDA7XG4gICAgICAgICAgICBnIDwgZDtcbiAgICAgICAgICAgICsrZ1xuICAgICAgICAgIClcbiAgICAgICAgICAgIGxbZ10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJbcCArIGddKTtcbiAgICAgICAgICBYKGEpO1xuICAgICAgICAgIHJldHVybiBsLmpvaW4oXCJcIik7XG4gICAgICAgIH0sXG4gICAgICAgIHRvV2lyZVR5cGU6IGZ1bmN0aW9uIChhLCBkKSB7XG4gICAgICAgICAgdmFyIGsgPSBlKCksXG4gICAgICAgICAgICBoID0gZC5sZW5ndGgsXG4gICAgICAgICAgICBsID0gS2IoNCArIGggKiBiKTtcbiAgICAgICAgICBCW2wgPj4gMl0gPSBoO1xuICAgICAgICAgIGZvciAodmFyIGcgPSAobCArIDQpID4+IGYsIHEgPSAwOyBxIDwgaDsgKytxKVxuICAgICAgICAgICAga1tnICsgcV0gPSBkLmNoYXJDb2RlQXQocSk7XG4gICAgICAgICAgbnVsbCAhPT0gYSAmJiBhLnB1c2goWCwgbCk7XG4gICAgICAgICAgcmV0dXJuIGw7XG4gICAgICAgIH0sXG4gICAgICAgIGFyZ1BhY2tBZHZhbmNlOiA4LFxuICAgICAgICByZWFkVmFsdWVGcm9tUG9pbnRlcjogbGIsXG4gICAgICAgIGw6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgWChhKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgX19lbWJpbmRfcmVnaXN0ZXJfdm9pZDogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGIgPSBLKGIpO1xuICAgICAgUShhLCB7XG4gICAgICAgIGRhOiAhMCxcbiAgICAgICAgbmFtZTogYixcbiAgICAgICAgYXJnUGFja0FkdmFuY2U6IDAsXG4gICAgICAgIGZyb21XaXJlVHlwZTogZnVuY3Rpb24gKCkge30sXG4gICAgICAgIHRvV2lyZVR5cGU6IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBfX2VtdmFsX2FzOiBmdW5jdGlvbiAoYSwgYiwgZCkge1xuICAgICAgYSA9IFooYSk7XG4gICAgICBiID0gRmIoYiwgXCJlbXZhbDo6YXNcIik7XG4gICAgICB2YXIgZSA9IFtdLFxuICAgICAgICBmID0gVChlKTtcbiAgICAgIEFbZCA+PiAyXSA9IGY7XG4gICAgICByZXR1cm4gYi50b1dpcmVUeXBlKGUsIGEpO1xuICAgIH0sXG4gICAgX19lbXZhbF9kZWNyZWY6IENiLFxuICAgIF9fZW12YWxfZ2V0X3Byb3BlcnR5OiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgYSA9IFooYSk7XG4gICAgICBiID0gWihiKTtcbiAgICAgIHJldHVybiBUKGFbYl0pO1xuICAgIH0sXG4gICAgX19lbXZhbF9pbmNyZWY6IGZ1bmN0aW9uIChhKSB7XG4gICAgICA0IDwgYSAmJiAoWVthXS5IICs9IDEpO1xuICAgIH0sXG4gICAgX19lbXZhbF9uZXdfYXJyYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBUKFtdKTtcbiAgICB9LFxuICAgIF9fZW12YWxfbmV3X2NzdHJpbmc6IGZ1bmN0aW9uIChhKSB7XG4gICAgICB2YXIgYiA9IEdiW2FdO1xuICAgICAgcmV0dXJuIFQodm9pZCAwID09PSBiID8gSyhhKSA6IGIpO1xuICAgIH0sXG4gICAgX19lbXZhbF9uZXdfb2JqZWN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gVCh7fSk7XG4gICAgfSxcbiAgICBfX2VtdmFsX3J1bl9kZXN0cnVjdG9yczogZnVuY3Rpb24gKGEpIHtcbiAgICAgIHpiKFlbYV0udmFsdWUpO1xuICAgICAgQ2IoYSk7XG4gICAgfSxcbiAgICBfX2VtdmFsX3NldF9wcm9wZXJ0eTogZnVuY3Rpb24gKGEsIGIsIGQpIHtcbiAgICAgIGEgPSBaKGEpO1xuICAgICAgYiA9IFooYik7XG4gICAgICBkID0gWihkKTtcbiAgICAgIGFbYl0gPSBkO1xuICAgIH0sXG4gICAgX19lbXZhbF90YWtlX3ZhbHVlOiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgYSA9IEZiKGEsIFwiX2VtdmFsX3Rha2VfdmFsdWVcIik7XG4gICAgICBhID0gYS5yZWFkVmFsdWVGcm9tUG9pbnRlcihiKTtcbiAgICAgIHJldHVybiBUKGEpO1xuICAgIH0sXG4gICAgX2Fib3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBjLmFib3J0KCk7XG4gICAgfSxcbiAgICBfZW1zY3JpcHRlbl9tZW1jcHlfYmlnOiBmdW5jdGlvbiAoYSwgYiwgZCkge1xuICAgICAgei5zZXQoei5zdWJhcnJheShiLCBiICsgZCksIGEpO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfSxcbiAgICBfbGx2bV9jb3NfZjMyOiBIYSxcbiAgICBfbGx2bV9sb2cxMF9mMzI6IGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gTWF0aC5sb2coYSkgLyBNYXRoLkxOMTA7XG4gICAgfSxcbiAgICBfbGx2bV9zaW5fZjMyOiBJYSxcbiAgICBEWU5BTUlDVE9QX1BUUjogeGEsXG4gICAgU1RBQ0tUT1A6IHVhLFxuICB9O1xuICB2YXIgTGIgPSBjLmFzbShjLk4sIGMuTywgYnVmZmVyKTtcbiAgYy5hc20gPSBMYjtcbiAgdmFyIE9hID0gKGMuX19HTE9CQUxfX3N1Yl9JX2JpbmRfY3BwID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGMuYXNtLl9fR0xPQkFMX19zdWJfSV9iaW5kX2NwcC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH0pLFxuICAgIExhID0gKGMuX19HTE9CQUxfX3N1Yl9JX2ZmdF9jYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjLmFzbS5fX0dMT0JBTF9fc3ViX0lfZmZ0X2NjLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfSksXG4gICAgTmEgPSAoYy5fX0dMT0JBTF9fc3ViX0lfcGl0Y2hfY2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYy5hc20uX19HTE9CQUxfX3N1Yl9JX3BpdGNoX2NjLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfSksXG4gICAgTWEgPSAoYy5fX0dMT0JBTF9fc3ViX0lfdGVtcG9fY2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYy5hc20uX19HTE9CQUxfX3N1Yl9JX3RlbXBvX2NjLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfSksXG4gICAgd2IgPSAoYy5fX19nZXRUeXBlTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjLmFzbS5fX19nZXRUeXBlTmFtZS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH0pLFxuICAgIFggPSAoYy5fZnJlZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjLmFzbS5fZnJlZS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH0pLFxuICAgIEtiID0gKGMuX21hbGxvYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjLmFzbS5fbWFsbG9jLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfSk7XG4gIGMuZHluQ2FsbF9mZmlpID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjLmFzbS5keW5DYWxsX2ZmaWkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgfTtcbiAgYy5keW5DYWxsX2ZpID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjLmFzbS5keW5DYWxsX2ZpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG4gIGMuZHluQ2FsbF9maWkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGMuYXNtLmR5bkNhbGxfZmlpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG4gIGMuZHluQ2FsbF9maWlpID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjLmFzbS5keW5DYWxsX2ZpaWkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgfTtcbiAgYy5keW5DYWxsX2lpID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjLmFzbS5keW5DYWxsX2lpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG4gIGMuZHluQ2FsbF9paWkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGMuYXNtLmR5bkNhbGxfaWlpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG4gIGMuZHluQ2FsbF9paWlpID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjLmFzbS5keW5DYWxsX2lpaWkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgfTtcbiAgYy5keW5DYWxsX2lpaWlpID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjLmFzbS5keW5DYWxsX2lpaWlpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG4gIGMuZHluQ2FsbF9paWlpaWkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGMuYXNtLmR5bkNhbGxfaWlpaWlpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG4gIGMuZHluQ2FsbF92ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjLmFzbS5keW5DYWxsX3YuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgfTtcbiAgYy5keW5DYWxsX3ZpID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjLmFzbS5keW5DYWxsX3ZpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG4gIGMuZHluQ2FsbF92aWlpID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjLmFzbS5keW5DYWxsX3ZpaWkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgfTtcbiAgYy5hc20gPSBMYjtcbiAgYy50aGVuID0gZnVuY3Rpb24gKGEpIHtcbiAgICBpZiAoYy5jYWxsZWRSdW4pIGEoYyk7XG4gICAgZWxzZSB7XG4gICAgICB2YXIgYiA9IGMub25SdW50aW1lSW5pdGlhbGl6ZWQ7XG4gICAgICBjLm9uUnVudGltZUluaXRpYWxpemVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBiICYmIGIoKTtcbiAgICAgICAgYShjKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBjO1xuICB9O1xuICBHID0gZnVuY3Rpb24gTWIoKSB7XG4gICAgYy5jYWxsZWRSdW4gfHwgTmIoKTtcbiAgICBjLmNhbGxlZFJ1biB8fCAoRyA9IE1iKTtcbiAgfTtcbiAgZnVuY3Rpb24gTmIoKSB7XG4gICAgZnVuY3Rpb24gYSgpIHtcbiAgICAgIGlmICghYy5jYWxsZWRSdW4gJiYgKChjLmNhbGxlZFJ1biA9ICEwKSwgIWthKSkge1xuICAgICAgICBGYSB8fCAoKEZhID0gITApLCBBYShDYSkpO1xuICAgICAgICBBYShEYSk7XG4gICAgICAgIGlmIChjLm9uUnVudGltZUluaXRpYWxpemVkKSBjLm9uUnVudGltZUluaXRpYWxpemVkKCk7XG4gICAgICAgIGlmIChjLnBvc3RSdW4pXG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYy5wb3N0UnVuICYmIChjLnBvc3RSdW4gPSBbYy5wb3N0UnVuXSk7XG4gICAgICAgICAgICBjLnBvc3RSdW4ubGVuZ3RoO1xuXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGMucG9zdFJ1bi5zaGlmdCgpO1xuICAgICAgICAgICAgRWEudW5zaGlmdChhKTtcbiAgICAgICAgICB9XG4gICAgICAgIEFhKEVhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCEoMCA8IEYpKSB7XG4gICAgICBpZiAoYy5wcmVSdW4pXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBjLnByZVJ1biAmJiAoYy5wcmVSdW4gPSBbYy5wcmVSdW5dKTtcbiAgICAgICAgICBjLnByZVJ1bi5sZW5ndGg7XG5cbiAgICAgICAgKVxuICAgICAgICAgIEdhKCk7XG4gICAgICBBYShCYSk7XG4gICAgICAwIDwgRiB8fFxuICAgICAgICBjLmNhbGxlZFJ1biB8fFxuICAgICAgICAoYy5zZXRTdGF0dXNcbiAgICAgICAgICA/IChjLnNldFN0YXR1cyhcIlJ1bm5pbmcuLi5cIiksXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYy5zZXRTdGF0dXMoXCJcIik7XG4gICAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICAgICAgICBhKCk7XG4gICAgICAgICAgICB9LCAxKSlcbiAgICAgICAgICA6IGEoKSk7XG4gICAgfVxuICB9XG4gIGMucnVuID0gTmI7XG4gIGZ1bmN0aW9uIHkoYSkge1xuICAgIGlmIChjLm9uQWJvcnQpIGMub25BYm9ydChhKTtcbiAgICB2b2lkIDAgIT09IGEgPyAoaGEoYSksIHgoYSksIChhID0gSlNPTi5zdHJpbmdpZnkoYSkpKSA6IChhID0gXCJcIik7XG4gICAga2EgPSAhMDtcbiAgICB0aHJvdyBcImFib3J0KFwiICsgYSArIFwiKS4gQnVpbGQgd2l0aCAtcyBBU1NFUlRJT05TPTEgZm9yIG1vcmUgaW5mby5cIjtcbiAgfVxuICBjLmFib3J0ID0geTtcbiAgaWYgKGMucHJlSW5pdClcbiAgICBmb3IgKFxuICAgICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBjLnByZUluaXQgJiYgKGMucHJlSW5pdCA9IFtjLnByZUluaXRdKTtcbiAgICAgIDAgPCBjLnByZUluaXQubGVuZ3RoO1xuXG4gICAgKVxuICAgICAgYy5wcmVJbml0LnBvcCgpKCk7XG4gIGMubm9FeGl0UnVudGltZSA9ICEwO1xuICBOYigpO1xuXG4gIHJldHVybiBBdWJpbztcbn07XG5BdWJpbyA9IEF1YmlvLmJpbmQoe1xuICBfY3VycmVudFNjcmlwdDpcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0IDogdW5kZWZpbmVkLFxufSk7XG5pZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIilcbiAgbW9kdWxlLmV4cG9ydHMgPSBBdWJpbztcbmVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmVbXCJhbWRcIl0pXG4gIGRlZmluZShbXSwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBBdWJpbztcbiAgfSk7XG5lbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikgZXhwb3J0c1tcIkF1YmlvXCJdID0gQXViaW87XG4iLCI8c2NyaXB0PlxuaW1wb3J0IE5vdGVzIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvdHVuZXIvTm90ZXMuc3ZlbHRlJ1xuaW1wb3J0IE1ldGVyIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvdHVuZXIvTWV0ZXIuc3ZlbHRlJ1xuaW1wb3J0IEF1YmlvIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvdHVuZXIvYXViaW8uanMnXG5sZXQgcGl0Y2hEZXRlY3RvciA9IG51bGw7IC8vIOiuoeeul+mfs+mrmOeahOaWueazle+8jOetiUF1Ymlv5Yqg6L295LmL5ZCO5omN6IO95a6a5LmJXG5cbmNvbnN0IG1pZGRsZUEgPSA0NDA7XG5jb25zdCBzZW1pdG9uZSA9IDY5O1xuY29uc3QgYnVmZmVyU2l6ZSA9IDQwOTY7XG5jb25zdCBub3RlU3RyaW5ncyA9IFtcbiAgICAnQycsXG4gICAgJ0Pima8nLFxuICAgICdEJyxcbiAgICAnROKZrycsXG4gICAgJ0UnLFxuICAgICdGJyxcbiAgICAnRuKZrycsXG4gICAgJ0cnLFxuICAgICdH4pmvJyxcbiAgICAnQScsXG4gICAgJ0Hima8nLFxuICAgICdCJ1xuICBdXG5cbmxldCBjdXJWYWx1ZSA9IDA7XG5sZXQgY3VyRGVnID0gMDtcbmxldCBjdXJGcnEgPSAwO1xuY29uc3QgYXVkaW9Db250ZXh0ID0gbmV3IHdpbmRvdy5BdWRpb0NvbnRleHQoKTtcbmNvbnN0IGFuYWx5c2VyID0gICBhdWRpb0NvbnRleHQuY3JlYXRlQW5hbHlzZXIoKTtcbmNvbnN0IHNjcmlwdFByb2Nlc3NvciA9ICAgYXVkaW9Db250ZXh0LmNyZWF0ZVNjcmlwdFByb2Nlc3NvcihcbiAgICAgIGJ1ZmZlclNpemUsXG4gICAgMSxcbiAgICAxXG4gICk7XG5cbmNvbnN0IGdldE5vdGUgPSBmdW5jdGlvbihmcmVxdWVuY3kpIHtcbiAgY29uc3Qgbm90ZSA9IDEyICogKE1hdGgubG9nKGZyZXF1ZW5jeSAvIG1pZGRsZUEpIC8gTWF0aC5sb2coMikpXG4gIHJldHVybiBNYXRoLnJvdW5kKG5vdGUpICsgICBzZW1pdG9uZVxufTtcblxuY29uc3QgZ2V0U3RhbmRhcmRGcmVxdWVuY3kgPSBmdW5jdGlvbiAobm90ZSkge1xuICByZXR1cm4gbWlkZGxlQSAqIE1hdGgucG93KDIsIChub3RlIC0gc2VtaXRvbmUpIC8gMTIpO1xufTtcblxuY29uc3QgZ2V0Q2VudHMgPSBmdW5jdGlvbihmcmVxdWVuY3ksIG5vdGUpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoXG4gICAgKDEyMDAgKiBNYXRoLmxvZyhmcmVxdWVuY3kgLyBnZXRTdGFuZGFyZEZyZXF1ZW5jeShub3RlKSkpIC8gTWF0aC5sb2coMilcbiAgKVxufVxuXG5jb25zdCBvbk5vdGVEZXRlY3RlZCA9IGZ1bmN0aW9uKG5vdGUpIHtcbiAgY29uc3Qge3ZhbHVlLGNlbnRzLGZyZXF1ZW5jeX0gPSBub3RlO1xuICBjdXJWYWx1ZSA9IHZhbHVlO1xuICBjdXJEZWcgPSAoY2VudHMgLyA1MCkgKiA0NVxuICBjdXJGcnEgPSBmcmVxdWVuY3k7XG59XG5cbmNvbnN0IHN0YXJ0UmVjb3JkPSgpPT57XG4gIG5hdmlnYXRvci5tZWRpYURldmljZXNcbiAgICAgIC5nZXRVc2VyTWVkaWEoeyBhdWRpbzogdHJ1ZSB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgICBhdWRpb0NvbnRleHQuY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2Uoc3RyZWFtKS5jb25uZWN0KCBhbmFseXNlcilcbiAgICAgICAgIGFuYWx5c2VyLmNvbm5lY3QoIHNjcmlwdFByb2Nlc3NvcilcbiAgICAgICAgIHNjcmlwdFByb2Nlc3Nvci5jb25uZWN0KCBhdWRpb0NvbnRleHQuZGVzdGluYXRpb24pXG4gICAgICAgICBzY3JpcHRQcm9jZXNzb3IuYWRkRXZlbnRMaXN0ZW5lcignYXVkaW9wcm9jZXNzJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICBjb25zdCBmcmVxdWVuY3kgPSAgcGl0Y2hEZXRlY3Rvci5kbyhcbiAgICAgICAgICAgIGV2ZW50LmlucHV0QnVmZmVyLmdldENoYW5uZWxEYXRhKDApXG4gICAgICAgICAgKVxuICAgICAgICAgIGlmIChmcmVxdWVuY3kgJiYgIG9uTm90ZURldGVjdGVkKSB7XG4gICAgICAgICAgICBjb25zdCBub3RlID0gIGdldE5vdGUoZnJlcXVlbmN5KVxuICAgICAgICAgICAgIG9uTm90ZURldGVjdGVkKHtcbiAgICAgICAgICAgICAgbmFtZTogIG5vdGVTdHJpbmdzW25vdGUgJSAxMl0sXG4gICAgICAgICAgICAgIHZhbHVlOiBub3RlLFxuICAgICAgICAgICAgICBjZW50czogIGdldENlbnRzKGZyZXF1ZW5jeSwgbm90ZSksXG4gICAgICAgICAgICAgIG9jdGF2ZTogcGFyc2VJbnQobm90ZSAvIDEyKSAtIDEsXG4gICAgICAgICAgICAgIGZyZXF1ZW5jeTogZnJlcXVlbmN5XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgYWxlcnQoZXJyb3IubmFtZSArICc6ICcgKyBlcnJvci5tZXNzYWdlKVxuICAgICAgfSlcbn1cblxuQXViaW8oKS50aGVuKGZ1bmN0aW9uKGF1YmlvKSB7XG4gIHBpdGNoRGV0ZWN0b3IgPSBuZXcgYXViaW8uUGl0Y2goXG4gICAgJ2RlZmF1bHQnLFxuICAgIGJ1ZmZlclNpemUsXG4gICAgMSxcbiAgICBhdWRpb0NvbnRleHQuc2FtcGxlUmF0ZVxuICApXG4gIHN0YXJ0UmVjb3JkKClcbn0pXG48L3NjcmlwdD5cblxuXG48ZGl2IHN0eWxlPVwiaGVpZ2h0OiAxMDAlOyB3aWR0aDogMTAwJTtcIj5cbiAgIDxjYW52YXMgY2xhc3M9XCJmcmVxdWVuY3ktYmFyc1wiPjwvY2FudmFzPlxuICAgIDxNZXRlciBkZWc9e2N1ckRlZ30vPlxuICAgIDxOb3RlcyB2YWx1ZT17Y3VyVmFsdWV9IGZyZXF1ZW5jeT17Y3VyRnJxfS8+XG4gICAgPGRpdiBjbGFzcz1cImE0XCI+QTxzdWI+NDwvc3ViPiA9IDxzcGFuPjQ0MDwvc3Bhbj4gSHo8L2Rpdj5cbjwvZGl2PlxuXG48c3R5bGU+XG4uYTQge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMTZweDtcbiAgbGVmdDogMTZweDtcbn1cblxuLmE0IHNwYW4ge1xuICBjb2xvcjogI2U3NGMzYztcbn1cbjwvc3R5bGU+Il0sIm5hbWVzIjpbInJlcXVpcmUiLCJBdWJpbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OzsyQkF1QitCLEdBQU0sSUFBQyxRQUFROzs7Ozs7c0JBRnpDLEdBQUk7Ozs7Ozs7Ozs7O3VDQUFKLEdBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0Q0FEdUIsR0FBUTs7Ozs7Ozs7Ozs7Ozs7cURBQ25DLEdBQUk7bUVBRXNCLEdBQU0sSUFBQyxRQUFROzs7NkNBSGQsR0FBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQWpCekIsUUFBUTtPQUNSLElBQUk7T0FDSixNQUFNO09BRVgsUUFBUSxHQUFHLHFCQUFxQjtLQUVsQyxVQUFVLEdBQUcsSUFBSTs7Q0FFckIsV0FBVztNQUNKLFFBQVE7R0FDUCxRQUFRLENBQUMsVUFBVSxFQUFDLFVBQVU7Ozs7Ozs7Ozs7OztHQU9XLFVBQVU7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QUN0QyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7QUFDeEUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztBQUN6QixJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRTtBQUNsQyxNQUFNLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDckIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLEtBQUs7QUFDTCxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNELEdBQUcsQ0FBQztBQUNKLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWTtBQUN0QyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNyQixHQUFHLENBQUM7QUFDSixFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFlBQVk7QUFDeEMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsSUFBSSxJQUFJLENB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QVk7QUFDOUIsSUFBSSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDcEQsR0FBRyxDQUFDO0FBQ0osRUFBRSxDQUFDLENBQUMsWUFBWSxHQUFHLFlBQVk7QUFDL0IsSUFBSSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDckQsR0FBRyxDQUFDO0FBQ0osRUFBRSxDQUFDLENBQUMsVUFBVSxHQUFHLFlBQVk7QUFDN0IsSUFBSSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDbkQsR0FBRyxDQUFDO0FBQ0osRUFBRSxDQUFDLENBQUMsV0FBVyxHQUFHLFlBQVk7QUFDOUIsSUFBSSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDcEQsR0FBRyxDQUFDO0FBQ0osRUFBRSxDQUFDLENBQUMsWUFBWSxHQUFHLFlBQVk7QUFDL0IsSUFBSSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDckQsR0FBRyxDQUFDO0FBQ0osRUFBRSxDQUFDLENBQUMsYUFBYSxHQUFHLFlBQVk7QUFDaEMsSUFBSSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDdEQsR0FBRyxDQUFDO0FBQ0osRUFBRSxDQUFDLENBQUMsY0FBYyxHQUFHLFlBQVk7QUFDakMsSUFBSSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDdkQsR0FBRyxDQUFDO0FBQ0osRUFB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
