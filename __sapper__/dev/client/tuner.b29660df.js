import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, t as text, a as space, f as claim_element, g as children, h as claim_text, c as claim_space, b as detach_dev, j as attr_dev, k as add_location, y as toggle_class, l as insert_dev, m as append_dev, w as set_data_dev, n as noop, z as validate_each_argument, x as empty, A as transition_in, B as group_outros, C as transition_out, D as check_outros, E as destroy_each, F as create_component, G as claim_component, I as mount_component, J as destroy_component, o as globals, K as set_style } from './client.7d687ebf.js';
import { c as createCommonjsModule, a as commonjsRequire } from './_commonjsHelpers.edce28ac.js';

/* src/components/tuner/Note.svelte generated by Svelte v3.38.1 */

const file$3 = "src/components/tuner/Note.svelte";

function create_fragment$3(ctx) {
	let div;
	let t0;
	let t1;
	let span0;
	let t2;
	let span1;
	let t3_value = /*octave*/ ctx[2].toString() + "";
	let t3;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(/*note*/ ctx[1]);
			t1 = space();
			span0 = element("span");
			t2 = space();
			span1 = element("span");
			t3 = text(t3_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, /*note*/ ctx[1]);
			t1 = claim_space(div_nodes);
			span0 = claim_element(div_nodes, "SPAN", { class: true });
			children(span0).forEach(detach_dev);
			t2 = claim_space(div_nodes);
			span1 = claim_element(div_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t3 = claim_text(span1_nodes, t3_value);
			span1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "class", "note-sharp svelte-lzwyxs");
			add_location(span0, file$3, 17, 4, 424);
			attr_dev(span1, "class", "note-octave svelte-lzwyxs");
			add_location(span1, file$3, 18, 4, 461);
			attr_dev(div, "class", "note svelte-lzwyxs");
			toggle_class(div, "active", /*isActive*/ ctx[0]);
			add_location(div, file$3, 15, 0, 366);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			append_dev(div, span0);
			append_dev(div, t2);
			append_dev(div, span1);
			append_dev(span1, t3);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*note*/ 2) set_data_dev(t0, /*note*/ ctx[1]);
			if (dirty & /*octave*/ 4 && t3_value !== (t3_value = /*octave*/ ctx[2].toString() + "")) set_data_dev(t3, t3_value);

			if (dirty & /*isActive*/ 1) {
				toggle_class(div, "active", /*isActive*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const middleA$1 = 440;
const semitone$1 = 69;

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Note", slots, []);
	let { isActive } = $$props;
	let { note } = $$props;
	let { index } = $$props;
	let { octave } = $$props;

	const getStandardFrequency = function (note) {
		return middleA$1 * Math.pow(2, (note - semitone$1) / 12);
	};

	const value = 12 * (octave + 1) + index;
	const frequency = getStandardFrequency(value);
	const writable_props = ["isActive", "note", "index", "octave"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Note> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("isActive" in $$props) $$invalidate(0, isActive = $$props.isActive);
		if ("note" in $$props) $$invalidate(1, note = $$props.note);
		if ("index" in $$props) $$invalidate(3, index = $$props.index);
		if ("octave" in $$props) $$invalidate(2, octave = $$props.octave);
	};

	$$self.$capture_state = () => ({
		isActive,
		note,
		index,
		octave,
		middleA: middleA$1,
		semitone: semitone$1,
		getStandardFrequency,
		value,
		frequency
	});

	$$self.$inject_state = $$props => {
		if ("isActive" in $$props) $$invalidate(0, isActive = $$props.isActive);
		if ("note" in $$props) $$invalidate(1, note = $$props.note);
		if ("index" in $$props) $$invalidate(3, index = $$props.index);
		if ("octave" in $$props) $$invalidate(2, octave = $$props.octave);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [isActive, note, octave, index];
}

class Note extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			isActive: 0,
			note: 1,
			index: 3,
			octave: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Note",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*isActive*/ ctx[0] === undefined && !("isActive" in props)) {
			console.warn("<Note> was created without expected prop 'isActive'");
		}

		if (/*note*/ ctx[1] === undefined && !("note" in props)) {
			console.warn("<Note> was created without expected prop 'note'");
		}

		if (/*index*/ ctx[3] === undefined && !("index" in props)) {
			console.warn("<Note> was created without expected prop 'index'");
		}

		if (/*octave*/ ctx[2] === undefined && !("octave" in props)) {
			console.warn("<Note> was created without expected prop 'octave'");
		}
	}

	get isActive() {
		throw new Error("<Note>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isActive(value) {
		throw new Error("<Note>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get note() {
		throw new Error("<Note>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set note(value) {
		throw new Error("<Note>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get index() {
		throw new Error("<Note>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set index(value) {
		throw new Error("<Note>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get octave() {
		throw new Error("<Note>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set octave(value) {
		throw new Error("<Note>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/tuner/Notes.svelte generated by Svelte v3.38.1 */
const file$2 = "src/components/tuner/Notes.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	child_ctx[8] = i;
	return child_ctx;
}

// (76:6) {#each noteStrings as note, index}
function create_each_block_1(ctx) {
	let note;
	let current;

	note = new Note({
			props: {
				note: /*note*/ ctx[6],
				index: /*index*/ ctx[8],
				octave: /*octave*/ ctx[3],
				isActive: /*value*/ ctx[0] === 12 * (/*octave*/ ctx[3] + 1) + /*index*/ ctx[8]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(note.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(note.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(note, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const note_changes = {};
			if (dirty & /*value*/ 1) note_changes.isActive = /*value*/ ctx[0] === 12 * (/*octave*/ ctx[3] + 1) + /*index*/ ctx[8];
			note.$set(note_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(note.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(note.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(note, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(76:6) {#each noteStrings as note, index}",
		ctx
	});

	return block;
}

// (75:4) {#each octaveList as octave}
function create_each_block$1(ctx) {
	let each_1_anchor;
	let current;
	let each_value_1 = /*noteStrings*/ ctx[2];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*noteStrings, octaveList, value*/ 7) {
				each_value_1 = /*noteStrings*/ ctx[2];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(75:4) {#each octaveList as octave}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div2;
	let div0;
	let t0;
	let div1;
	let span;
	let t1;
	let current;
	let each_value = /*octaveList*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			div1 = element("div");
			span = element("span");
			t1 = text("Hz");
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			span = claim_element(div1_nodes, "SPAN", {});
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, "Hz");
			span_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "notes-list svelte-1cit9er");
			add_location(div0, file$2, 73, 2, 994);
			add_location(span, file$2, 80, 25, 1252);
			attr_dev(div1, "class", "frequency");
			add_location(div1, file$2, 80, 2, 1229);
			attr_dev(div2, "class", "notes svelte-1cit9er");
			add_location(div2, file$2, 72, 0, 972);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, span);
			append_dev(span, t1);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*noteStrings, octaveList, value*/ 7) {
				each_value = /*octaveList*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Notes", slots, []);
	let { value } = $$props; //当前检测到的频率value
	const octaveList = [2, 3, 4, 5];
	const noteStrings = ["C", "C♯", "D", "D♯", "E", "F", "F♯", "G", "G♯", "A", "A♯", "B"];
	const writable_props = ["value"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Notes> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
	};

	$$self.$capture_state = () => ({ Note, value, octaveList, noteStrings });

	$$self.$inject_state = $$props => {
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, octaveList, noteStrings];
}

class Notes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { value: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Notes",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*value*/ ctx[0] === undefined && !("value" in props)) {
			console.warn("<Notes> was created without expected prop 'value'");
		}
	}

	get value() {
		throw new Error("<Notes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Notes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/tuner/Meter.svelte generated by Svelte v3.38.1 */

const file$1 = "src/components/tuner/Meter.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (11:4) {#each arr as i}
function create_each_block(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "style", `transform:rotate(${/*i*/ ctx[2] * 9 - 45}deg)`);
			attr_dev(div, "class", "svelte-yyo3d6");
			toggle_class(div, "meter-scale", true);
			toggle_class(div, "meter-scale-strong", /*i*/ ctx[2] % 5 === 0);
			add_location(div, file$1, 11, 8, 255);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(11:4) {#each arr as i}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div2;
	let div0;
	let t0;
	let div1;
	let div1_style_value;
	let t1;
	let each_value = /*arr*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			children(div0).forEach(detach_dev);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true, style: true });
			children(div1).forEach(detach_dev);
			t1 = claim_space(div2_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div2_nodes);
			}

			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "meter-dot svelte-yyo3d6");
			add_location(div0, file$1, 8, 4, 120);
			attr_dev(div1, "class", "meter-pointer svelte-yyo3d6");
			attr_dev(div1, "style", div1_style_value = `transform:rotate(${/*deg*/ ctx[0]}deg)`);
			add_location(div1, file$1, 9, 4, 154);
			attr_dev(div2, "class", "meter svelte-yyo3d6");
			add_location(div2, file$1, 7, 0, 96);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div2, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*deg*/ 1 && div1_style_value !== (div1_style_value = `transform:rotate(${/*deg*/ ctx[0]}deg)`)) {
				attr_dev(div1, "style", div1_style_value);
			}

			if (dirty & /*arr*/ 2) {
				each_value = /*arr*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Meter", slots, []);
	let { deg = 0 } = $$props;
	const arr = Array.from(new Array(10).keys());
	const writable_props = ["deg"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Meter> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("deg" in $$props) $$invalidate(0, deg = $$props.deg);
	};

	$$self.$capture_state = () => ({ deg, arr });

	$$self.$inject_state = $$props => {
		if ("deg" in $$props) $$invalidate(0, deg = $$props.deg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [deg, arr];
}

class Meter extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { deg: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Meter",
			options,
			id: create_fragment$1.name
		});
	}

	get deg() {
		throw new Error("<Meter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set deg(value) {
		throw new Error("<Meter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var require$$0 = {};

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
function resolve() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : '/';

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
}
// path.normalize(path)
// posix version
function normalize(path) {
  var isPathAbsolute = isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isPathAbsolute).join('/');

  if (!path && !isPathAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isPathAbsolute ? '/' : '') + path;
}
// posix version
function isAbsolute(path) {
  return path.charAt(0) === '/';
}

// posix version
function join() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
}


// path.relative(from, to)
// posix version
function relative(from, to) {
  from = resolve(from).substr(1);
  to = resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
}

var sep = '/';
var delimiter = ':';

function dirname(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
}

function basename(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
}


function extname(path) {
  return splitPath(path)[3];
}
var require$$1 = {
  extname: extname,
  basename: basename,
  dirname: dirname,
  sep: sep,
  delimiter: delimiter,
  relative: relative,
  join: join,
  isAbsolute: isAbsolute,
  normalize: normalize,
  resolve: resolve
};
function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b' ?
    function (str, start, len) { return str.substr(start, len) } :
    function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

var aubio = createCommonjsModule(function (module, exports) {
var Aubio = function (Aubio) {
  Aubio = Aubio || {};

  var c;
  c || (c = typeof Aubio !== "undefined" ? Aubio : {});
  var n = {},
    r;
  for (r in c) c.hasOwnProperty(r) && (n[r] = c[r]);
  c.arguments = [];
  c.thisProgram = "./this.program";
  c.quit = function (a, b) {
    throw b;
  };
  c.preRun = [];
  c.postRun = [];
  var u = !1,
    v = !1,
    aa = !1,
    ba = !1;
  u = "object" === typeof window;
  v = "function" === typeof importScripts;
  aa = "object" === typeof process && "function" === typeof commonjsRequire && !u && !v;
  ba = !u && !aa && !v;
  var w = "";
  function ca(a) {
    return c.locateFile ? c.locateFile(a, w) : w + a;
  }
  if (aa) {
    w = __dirname + "/";
    var da, ea;
    c.read = function (a, b) {
      da || (da = require$$0);
      ea || (ea = require$$1);
      a = ea.normalize(a);
      a = da.readFileSync(a);
      return b ? a : a.toString();
    };
    c.readBinary = function (a) {
      a = c.read(a, !0);
      a.buffer || (a = new Uint8Array(a));
      assert(a.buffer);
      return a;
    };
    1 < process.argv.length &&
      (c.thisProgram = process.argv[1].replace(/\\/g, "/"));
    c.arguments = process.argv.slice(2);
    process.on("uncaughtException", function (a) {
      throw a;
    });
    process.on("unhandledRejection", function () {
      process.exit(1);
    });
    c.quit = function (a) {
      process.exit(a);
    };
    c.inspect = function () {
      return "[Emscripten Module object]";
    };
  } else if (ba)
    "undefined" != typeof read &&
      (c.read = function (a) {
        return read(a);
      }),
      (c.readBinary = function (a) {
        if ("function" === typeof readbuffer)
          return new Uint8Array(readbuffer(a));
        a = read(a, "binary");
        assert("object" === typeof a);
        return a;
      }),
      "undefined" != typeof scriptArgs
        ? (c.arguments = scriptArgs)
        : "undefined" != typeof arguments && (c.arguments = arguments),
      "function" === typeof quit &&
        (c.quit = function (a) {
          quit(a);
        });
  else if (u || v) {
    if (u) {
      var fa = this._currentScript || document.currentScript;
      if (sa) {
        0 !== fa.src.indexOf("blob:") &&
          (w = fa.src.split("/").slice(0, -1).join("/") + "/");
      }
    } else
      v && (w = self.location.href.split("/").slice(0, -1).join("/") + "/");
    c.read = function (a) {
      var b = new XMLHttpRequest();
      b.open("GET", a, !1);
      b.send(null);
      return b.responseText;
    };
    v &&
      (c.readBinary = function (a) {
        var b = new XMLHttpRequest();
        b.open("GET", a, !1);
        b.responseType = "arraybuffer";
        b.send(null);
        return new Uint8Array(b.response);
      });
    c.readAsync = function (a, b, d) {
      var e = new XMLHttpRequest();
      e.open("GET", a, !0);
      e.responseType = "arraybuffer";
      e.onload = function () {
        200 == e.status || (0 == e.status && e.response) ? b(e.response) : d();
      };
      e.onerror = d;
      e.send(null);
    };
    c.setWindowTitle = function (a) {
      document.title = a;
    };
  }
  var ha =
      c.print ||
      ("undefined" !== typeof console
        ? console.log.bind(console)
        : "undefined" !== typeof print
        ? print
        : null),
    x =
      c.printErr ||
      ("undefined" !== typeof printErr
        ? printErr
        : ("undefined" !== typeof console && console.warn.bind(console)) || ha);
  for (r in n) n.hasOwnProperty(r) && (c[r] = n[r]);
  n = void 0;
  function ia(a) {
    var b;
    b || (b = 16);
    return Math.ceil(a / b) * b;
  }
  var ja = {
      "f64-rem": function (a, b) {
        return a % b;
      },
      debugger: function () {
        debugger;
      },
    },
    ka = 0;
  function assert(a, b) {
    a || y("Assertion failed: " + b);
  }
  var la =
    "undefined" !== typeof TextDecoder ? new TextDecoder("utf8") : void 0;
  "undefined" !== typeof TextDecoder && new TextDecoder("utf-16le");
  var buffer, ma, z, na, oa, A, B, pa, qa;
  function ra() {
    c.HEAP8 = ma = new Int8Array(buffer);
    c.HEAP16 = na = new Int16Array(buffer);
    c.HEAP32 = A = new Int32Array(buffer);
    c.HEAPU8 = z = new Uint8Array(buffer);
    c.HEAPU16 = oa = new Uint16Array(buffer);
    c.HEAPU32 = B = new Uint32Array(buffer);
    c.HEAPF32 = pa = new Float32Array(buffer);
    c.HEAPF64 = qa = new Float64Array(buffer);
  }
  var sa, C, ta, ua, va, wa, xa;
  sa = C = ta = ua = va = wa = xa = 0;
  function ya() {
    y(
      "Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " +
        E +
        ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 "
    );
  }
  var za = c.TOTAL_STACK || 5242880,
    E = c.TOTAL_MEMORY || 16777216;
  E < za &&
    x(
      "TOTAL_MEMORY should be larger than TOTAL_STACK, was " +
        E +
        "! (TOTAL_STACK=" +
        za +
        ")"
    );
  c.buffer
    ? (buffer = c.buffer)
    : ("object" === typeof WebAssembly &&
      "function" === typeof WebAssembly.Memory
        ? ((c.wasmMemory = new WebAssembly.Memory({
            initial: E / 65536,
            maximum: E / 65536,
          })),
          (buffer = c.wasmMemory.buffer))
        : (buffer = new ArrayBuffer(E)),
      (c.buffer = buffer));
  ra();
  function Aa(a) {
    for (; 0 < a.length; ) {
      var b = a.shift();
      if ("function" == typeof b) b();
      else {
        var d = b.B;
        "number" === typeof d
          ? void 0 === b.F
            ? c.dynCall_v(d)
            : c.dynCall_vi(d, b.F)
          : d(void 0 === b.F ? null : b.F);
      }
    }
  }
  var Ba = [],
    Ca = [],
    Da = [],
    Ea = [],
    Fa = !1;
  function Ga() {
    var a = c.preRun.shift();
    Ba.unshift(a);
  }
  var Ha = Math.cos,
    Ia = Math.sin,
    F = 0,
    G = null;
  c.preloadedImages = {};
  c.preloadedAudios = {};
  function Ka(a) {
    return String.prototype.startsWith
      ? a.startsWith("data:application/octet-stream;base64,")
      : 0 === a.indexOf("data:application/octet-stream;base64,");
  }
  (function () {
    function a() {
      try {
        console.log("c", c);
        if (c.wasmBinary) return new Uint8Array(c.wasmBinary);
        if (c.readBinary) return c.readBinary(f);
        throw "both async and sync fetching of the wasm failed";
      } catch (g) {
        y(g);
      }
    }
    function b() {
      return c.wasmBinary || (!u && !v) || "function" !== typeof fetch
        ? new Promise(function (b) {
            b(a());
          })
        : fetch(f, { credentials: "same-origin" })
            .then(function (a) {
              if (!a.ok) throw "failed to load wasm binary file at '" + f + "'";
              return a.arrayBuffer();
            })
            .catch(function (e) {
              console.log("e", e, f);
              return a();
            });
    }
    function d(a) {
      function d(a) {
        k = a.exports;
        if (k.memory) {
          a = k.memory;
          var b = c.buffer;
          a.byteLength < b.byteLength &&
            x(
              "the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here"
            );
          b = new Int8Array(b);
          new Int8Array(a).set(b);
          c.buffer = buffer = a;
          ra();
        }
        c.asm = k;
        c.usingWasm = !0;
        F--;
        c.monitorRunDependencies && c.monitorRunDependencies(F);
        0 == F &&
          (G && ((a = G), (G = null), a()));
      }
      function e(a) {
        d(a.instance);
      }
      function g(a) {
        b()
          .then(function (a) {
            return WebAssembly.instantiate(a, h);
          })
          .then(a)
          .catch(function (a) {
            x("failed to asynchronously prepare wasm: " + a);
            y(a);
          });
      }
      if ("object" !== typeof WebAssembly)
        return x("no native wasm support detected"), !1;
      if (!(c.wasmMemory instanceof WebAssembly.Memory))
        return x("no native wasm Memory in use"), !1;
      a.memory = c.wasmMemory;
      h.global = { NaN: NaN, Infinity: Infinity };
      h["global.Math"] = Math;
      h.env = a;
      F++;
      c.monitorRunDependencies && c.monitorRunDependencies(F);
      if (c.instantiateWasm)
        try {
          return c.instantiateWasm(h, d);
        } catch (vb) {
          return (
            x("Module.instantiateWasm callback failed with error: " + vb), !1
          );
        }
      c.wasmBinary ||
      "function" !== typeof WebAssembly.instantiateStreaming ||
      Ka(f) ||
      "function" !== typeof fetch
        ? g(e)
        : WebAssembly.instantiateStreaming(
            fetch(f, { credentials: "same-origin" }),
            h
          )
            .then(e)
            .catch(function (a) {
              x("wasm streaming compile failed: " + a);
              x("falling back to ArrayBuffer instantiation");
              g(e);
            });
      return {};
    }
    var e = "aubio.wast",
      f = "aubio.wasm",
      l = "aubio.temp.asm.js";
    Ka(e) || (e = ca(e));
    Ka(f) || (f = ca(f));
    Ka(l) || (l = ca(l));
    var h = { global: null, env: null, asm2wasm: ja, parent: c },
      k = null;
    c.asmPreload = c.asm;
    c.reallocBuffer;
    c.reallocBuffer = function (a) {
      var b; a: {
          var d = c.usingWasm ? 65536 : 16777216;
          0 < a % d && (a += d - (a % d));
          d = c.buffer.byteLength;
          if (c.usingWasm)
            try {
              b =
                -1 !== c.wasmMemory.grow((a - d) / 65536)
                  ? (c.buffer = c.wasmMemory.buffer)
                  : null;
              break a;
            } catch (t) {
              b = null;
              break a;
            }
          b = void 0;
        }
      return b;
    };
    c.asm = function (a, b) {
      if (!b.table) {
        a = c.wasmTableSize;
        void 0 === a && (a = 1024);
        var e = c.wasmMaxTableSize;
        b.table =
          "object" === typeof WebAssembly &&
          "function" === typeof WebAssembly.Table
            ? void 0 !== e
              ? new WebAssembly.Table({
                  initial: a,
                  maximum: e,
                  element: "anyfunc",
                })
              : new WebAssembly.Table({ initial: a, element: "anyfunc" })
            : Array(a);
        c.wasmTable = b.table;
      }
      b.memoryBase || (b.memoryBase = c.STATIC_BASE);
      b.tableBase || (b.tableBase = 0);
      b = d(b);
      assert(b, "no binaryen method succeeded.");
      return b;
    };
  })();
  sa = 1024;
  C = sa + 9312;
  Ca.push(
    {
      B: function () {
        La();
      },
    },
    {
      B: function () {
        Ma();
      },
    },
    {
      B: function () {
        Na();
      },
    },
    {
      B: function () {
        Oa();
      },
    }
  );
  c.STATIC_BASE = sa;
  c.STATIC_BUMP = 9312;
  C += 16;
  var H = 0;
  function I() {
    H += 4;
    return A[(H - 4) >> 2];
  }
  var Pa = {};
  function J(a, b) {
    H = b;
    try {
      var d = I(),
        e = I(),
        f = I();
      a = 0;
      J.J ||
        ((J.J = [null, [], []]),
        (J.P = function (a, b) {
          var d = J.J[a];
          assert(d);
          if (0 === b || 10 === b) {
            a = 1 === a ? ha : x;
            a: {
              for (var e = (b = 0); d[e]; ) ++e;
              if (16 < e - b && d.subarray && la)
                b = la.decode(d.subarray(b, e));
              else
                for (e = ""; ; ) {
                  var f = d[b++];
                  if (!f) {
                    b = e;
                    break a;
                  }
                  if (f & 128) {
                    var k = d[b++] & 63;
                    if (192 == (f & 224))
                      e += String.fromCharCode(((f & 31) << 6) | k);
                    else {
                      var l = d[b++] & 63;
                      if (224 == (f & 240)) f = ((f & 15) << 12) | (k << 6) | l;
                      else {
                        var h = d[b++] & 63;
                        if (240 == (f & 248))
                          f = ((f & 7) << 18) | (k << 12) | (l << 6) | h;
                        else {
                          var bb = d[b++] & 63;
                          if (248 == (f & 252))
                            f =
                              ((f & 3) << 24) |
                              (k << 18) |
                              (l << 12) |
                              (h << 6) |
                              bb;
                          else {
                            var m = d[b++] & 63;
                            f =
                              ((f & 1) << 30) |
                              (k << 24) |
                              (l << 18) |
                              (h << 12) |
                              (bb << 6) |
                              m;
                          }
                        }
                      }
                      65536 > f
                        ? (e += String.fromCharCode(f))
                        : ((f -= 65536),
                          (e += String.fromCharCode(
                            55296 | (f >> 10),
                            56320 | (f & 1023)
                          )));
                    }
                  } else e += String.fromCharCode(f);
                }
            }
            a(b);
            d.length = 0;
          } else d.push(b);
        }));
      for (b = 0; b < f; b++) {
        for (
          var l = A[(e + 8 * b) >> 2], h = A[(e + (8 * b + 4)) >> 2], k = 0;
          k < h;
          k++
        )
          J.P(d, z[l + k]);
        a += h;
      }
      return a;
    } catch (m) {
      return ("undefined" !== typeof FS && m instanceof FS.I) || y(m), -m.L;
    }
  }
  function Qa(a) {
    switch (a) {
      case 1:
        return 0;
      case 2:
        return 1;
      case 4:
        return 2;
      case 8:
        return 3;
      default:
        throw new TypeError("Unknown type size: " + a);
    }
  }
  var Ra = void 0;
  function K(a) {
    for (var b = ""; z[a]; ) b += Ra[z[a++]];
    return b;
  }
  var L = {},
    M = {},
    Sa = {};
  function Ta(a) {
    if (void 0 === a) return "_unknown";
    a = a.replace(/[^a-zA-Z0-9_]/g, "$");
    var b = a.charCodeAt(0);
    return 48 <= b && 57 >= b ? "_" + a : a;
  }
  function Ua(a, b) {
    a = Ta(a);
    return new Function(
      "body",
      "return function " +
        a +
        '() {\n    "use strict";    return body.apply(this, arguments);\n};\n'
    )(b);
  }
  function Va(a) {
    var b = Error,
      d = Ua(a, function (b) {
        this.name = a;
        this.message = b;
        b = Error(b).stack;
        void 0 !== b &&
          (this.stack =
            this.toString() + "\n" + b.replace(/^Error(:[^\n]*)?\n/, ""));
      });
    d.prototype = Object.create(b.prototype);
    d.prototype.constructor = d;
    d.prototype.toString = function () {
      return void 0 === this.message
        ? this.name
        : this.name + ": " + this.message;
    };
    return d;
  }
  var O = void 0;
  function P(a) {
    throw new O(a);
  }
  var Wa = void 0;
  function Xa(a) {
    throw new Wa(a);
  }
  function Ya(a, b, d) {
    function e(b) {
      b = d(b);
      b.length !== a.length && Xa("Mismatched type converter count");
      for (var e = 0; e < a.length; ++e) Q(a[e], b[e]);
    }
    a.forEach(function (a) {
      Sa[a] = b;
    });
    var f = Array(b.length),
      l = [],
      h = 0;
    b.forEach(function (a, b) {
      M.hasOwnProperty(a)
        ? (f[b] = M[a])
        : (l.push(a),
          L.hasOwnProperty(a) || (L[a] = []),
          L[a].push(function () {
            f[b] = M[a];
            ++h;
            h === l.length && e(f);
          }));
    });
    0 === l.length && e(f);
  }
  function Q(a, b, d) {
    d = d || {};
    if (!("argPackAdvance" in b))
      throw new TypeError(
        "registerType registeredInstance requires argPackAdvance"
      );
    var e = b.name;
    a || P('type "' + e + '" must have a positive integer typeid pointer');
    if (M.hasOwnProperty(a)) {
      if (d.X) return;
      P("Cannot register type '" + e + "' twice");
    }
    M[a] = b;
    delete Sa[a];
    L.hasOwnProperty(a) &&
      ((b = L[a]),
      delete L[a],
      b.forEach(function (a) {
        a();
      }));
  }
  function Za(a) {
    P(a.a.f.b.name + " instance already deleted");
  }
  var $a = void 0,
    ab = [];
  function cb() {
    for (; ab.length; ) {
      var a = ab.pop();
      a.a.s = !1;
      a["delete"]();
    }
  }
  function R() {}
  var db = {};
  function eb(a, b, d) {
    if (void 0 === a[b].j) {
      var e = a[b];
      a[b] = function () {
        a[b].j.hasOwnProperty(arguments.length) ||
          P(
            "Function '" +
              d +
              "' called with an invalid number of arguments (" +
              arguments.length +
              ") - expects one of (" +
              a[b].j +
              ")!"
          );
        return a[b].j[arguments.length].apply(this, arguments);
      };
      a[b].j = [];
      a[b].j[e.A] = e;
    }
  }
  function fb(a, b) {
    c.hasOwnProperty(a)
      ? (P("Cannot register public name '" + a + "' twice"),
        eb(c, a, a),
        c.hasOwnProperty(void 0) &&
          P(
            "Cannot register multiple overloads of a function with the same number of arguments (undefined)!"
          ),
        (c[a].j[void 0] = b))
      : (c[a] = b);
  }
  function gb(a, b, d, e, f, l, h, k) {
    this.name = a;
    this.constructor = b;
    this.u = d;
    this.o = e;
    this.i = f;
    this.T = l;
    this.w = h;
    this.S = k;
    this.Z = [];
  }
  function hb(a, b, d) {
    for (; b !== d; )
      b.w ||
        P(
          "Expected null or instance of " +
            d.name +
            ", got an instance of " +
            b.name
        ),
        (a = b.w(a)),
        (b = b.i);
    return a;
  }
  function ib(a, b) {
    if (null === b) return this.G && P("null is not a valid " + this.name), 0;
    b.a || P('Cannot pass "' + S(b) + '" as a ' + this.name);
    b.a.c || P("Cannot pass deleted object as a pointer of type " + this.name);
    return hb(b.a.c, b.a.f.b, this.b);
  }
  function jb(a, b) {
    if (null === b) {
      this.G && P("null is not a valid " + this.name);
      if (this.D) {
        var d = this.$();
        null !== a && a.push(this.o, d);
        return d;
      }
      return 0;
    }
    b.a || P('Cannot pass "' + S(b) + '" as a ' + this.name);
    b.a.c || P("Cannot pass deleted object as a pointer of type " + this.name);
    !this.C &&
      b.a.f.C &&
      P(
        "Cannot convert argument of type " +
          (b.a.h ? b.a.h.name : b.a.f.name) +
          " to parameter type " +
          this.name
      );
    d = hb(b.a.c, b.a.f.b, this.b);
    if (this.D)
      switch (
        (void 0 === b.a.g &&
          P("Passing raw pointer to smart pointer is illegal"),
        this.ba)
      ) {
        case 0:
          b.a.h === this
            ? (d = b.a.g)
            : P(
                "Cannot convert argument of type " +
                  (b.a.h ? b.a.h.name : b.a.f.name) +
                  " to parameter type " +
                  this.name
              );
          break;
        case 1:
          d = b.a.g;
          break;
        case 2:
          if (b.a.h === this) d = b.a.g;
          else {
            var e = b.clone();
            d = this.aa(
              d,
              T(function () {
                e["delete"]();
              })
            );
            null !== a && a.push(this.o, d);
          }
          break;
        default:
          P("Unsupporting sharing policy");
      }
    return d;
  }
  function kb(a, b) {
    if (null === b) return this.G && P("null is not a valid " + this.name), 0;
    b.a || P('Cannot pass "' + S(b) + '" as a ' + this.name);
    b.a.c || P("Cannot pass deleted object as a pointer of type " + this.name);
    b.a.f.C &&
      P(
        "Cannot convert argument of type " +
          b.a.f.name +
          " to parameter type " +
          this.name
      );
    return hb(b.a.c, b.a.f.b, this.b);
  }
  function lb(a) {
    return this.fromWireType(B[a >> 2]);
  }
  function ob(a, b, d) {
    if (b === d) return a;
    if (void 0 === d.i) return null;
    a = ob(a, b, d.i);
    return null === a ? null : d.S(a);
  }
  var pb = {};
  function qb(a, b) {
    for (void 0 === b && P("ptr should not be undefined"); a.i; )
      (b = a.w(b)), (a = a.i);
    return pb[b];
  }
  function rb(a, b) {
    (b.f && b.c) || Xa("makeClassHandle requires ptr and ptrType");
    !!b.h !== !!b.g && Xa("Both smartPtrType and smartPtr must be specified");
    b.count = { value: 1 };
    return Object.create(a, { a: { value: b } });
  }
  function U(a, b, d, e, f, l, h, k, m, p, g) {
    this.name = a;
    this.b = b;
    this.G = d;
    this.C = e;
    this.D = f;
    this.Y = l;
    this.ba = h;
    this.M = k;
    this.$ = m;
    this.aa = p;
    this.o = g;
    f || void 0 !== b.i
      ? (this.toWireType = jb)
      : ((this.toWireType = e ? ib : kb), (this.l = null));
  }
  function sb(a, b) {
    c.hasOwnProperty(a) || Xa("Replacing nonexistant public symbol");
    c[a] = b;
    c[a].A = void 0;
  }
  function V(a, b) {
    a = K(a);
    if (void 0 !== c["FUNCTION_TABLE_" + a])
      var d = c["FUNCTION_TABLE_" + a][b];
    else if ("undefined" !== typeof FUNCTION_TABLE) d = FUNCTION_TABLE[b];
    else {
      d = c.asm["dynCall_" + a];
      void 0 === d &&
        ((d = c.asm["dynCall_" + a.replace(/f/g, "d")]),
        void 0 === d && P("No dynCall invoker for signature: " + a));
      for (var e = [], f = 1; f < a.length; ++f) e.push("a" + f);
      f =
        "return function " +
        ("dynCall_" + a + "_" + b) +
        "(" +
        e.join(", ") +
        ") {\n";
      f +=
        "    return dynCall(rawFunction" +
        (e.length ? ", " : "") +
        e.join(", ") +
        ");\n";
      d = new Function("dynCall", "rawFunction", f + "};\n")(d, b);
    }
    "function" !== typeof d &&
      P("unknown function pointer with signature " + a + ": " + b);
    return d;
  }
  var tb = void 0;
  function ub(a) {
    a = wb(a);
    var b = K(a);
    X(a);
    return b;
  }
  function xb(a, b) {
    function d(a) {
      f[a] || M[a] || (Sa[a] ? Sa[a].forEach(d) : (e.push(a), (f[a] = !0)));
    }
    var e = [],
      f = {};
    b.forEach(d);
    throw new tb(a + ": " + e.map(ub).join([", "]));
  }
  function yb(a, b) {
    for (var d = [], e = 0; e < a; e++) d.push(A[(b >> 2) + e]);
    return d;
  }
  function zb(a) {
    for (; a.length; ) {
      var b = a.pop();
      a.pop()(b);
    }
  }
  function Ab(a) {
    var b = Function;
    if (!(b instanceof Function))
      throw new TypeError(
        "new_ called with constructor type " +
          typeof b +
          " which is not a function"
      );
    var d = Ua(b.name || "unknownFunctionName", function () {});
    d.prototype = b.prototype;
    d = new d();
    a = b.apply(d, a);
    return a instanceof Object ? a : d;
  }
  var Bb = [],
    Y = [{}, { value: void 0 }, { value: null }, { value: !0 }, { value: !1 }];
  function Cb(a) {
    4 < a && 0 === --Y[a].H && ((Y[a] = void 0), Bb.push(a));
  }
  function T(a) {
    switch (a) {
      case void 0:
        return 1;
      case null:
        return 2;
      case !0:
        return 3;
      case !1:
        return 4;
      default:
        var b = Bb.length ? Bb.pop() : Y.length;
        Y[b] = { H: 1, value: a };
        return b;
    }
  }
  function S(a) {
    if (null === a) return "null";
    var b = typeof a;
    return "object" === b || "array" === b || "function" === b
      ? a.toString()
      : "" + a;
  }
  function Db(a, b) {
    switch (b) {
      case 2:
        return function (a) {
          return this.fromWireType(pa[a >> 2]);
        };
      case 3:
        return function (a) {
          return this.fromWireType(qa[a >> 3]);
        };
      default:
        throw new TypeError("Unknown float type: " + a);
    }
  }
  function Eb(a, b, d) {
    switch (b) {
      case 0:
        return d
          ? function (a) {
              return ma[a];
            }
          : function (a) {
              return z[a];
            };
      case 1:
        return d
          ? function (a) {
              return na[a >> 1];
            }
          : function (a) {
              return oa[a >> 1];
            };
      case 2:
        return d
          ? function (a) {
              return A[a >> 2];
            }
          : function (a) {
              return B[a >> 2];
            };
      default:
        throw new TypeError("Unknown integer type: " + a);
    }
  }
  function Z(a) {
    a || P("Cannot use deleted val. handle = " + a);
    return Y[a].value;
  }
  function Fb(a, b) {
    var d = M[a];
    void 0 === d && P(b + " has unknown type " + ub(a));
    return d;
  }
  for (var Gb = {}, Hb = Array(256), Ib = 0; 256 > Ib; ++Ib)
    Hb[Ib] = String.fromCharCode(Ib);
  Ra = Hb;
  O = c.BindingError = Va("BindingError");
  Wa = c.InternalError = Va("InternalError");
  R.prototype.isAliasOf = function (a) {
    if (!(this instanceof R && a instanceof R)) return !1;
    var b = this.a.f.b,
      d = this.a.c,
      e = a.a.f.b;
    for (a = a.a.c; b.i; ) (d = b.w(d)), (b = b.i);
    for (; e.i; ) (a = e.w(a)), (e = e.i);
    return b === e && d === a;
  };
  R.prototype.clone = function () {
    this.a.c || Za(this);
    if (this.a.v) return (this.a.count.value += 1), this;
    var a = this.a;
    a = Object.create(Object.getPrototypeOf(this), {
      a: {
        value: {
          count: a.count,
          s: a.s,
          v: a.v,
          c: a.c,
          f: a.f,
          g: a.g,
          h: a.h,
        },
      },
    });
    a.a.count.value += 1;
    a.a.s = !1;
    return a;
  };
  R.prototype["delete"] = function () {
    this.a.c || Za(this);
    this.a.s && !this.a.v && P("Object already scheduled for deletion");
    --this.a.count.value;
    if (0 === this.a.count.value) {
      var a = this.a;
      a.g ? a.h.o(a.g) : a.f.b.o(a.c);
    }
    this.a.v || ((this.a.g = void 0), (this.a.c = void 0));
  };
  R.prototype.isDeleted = function () {
    return !this.a.c;
  };
  R.prototype.deleteLater = function () {
    this.a.c || Za(this);
    this.a.s && !this.a.v && P("Object already scheduled for deletion");
    ab.push(this);
    1 === ab.length && $a && $a(cb);
    this.a.s = !0;
    return this;
  };
  U.prototype.U = function (a) {
    this.M && (a = this.M(a));
    return a;
  };
  U.prototype.K = function (a) {
    this.o && this.o(a);
  };
  U.prototype.argPackAdvance = 8;
  U.prototype.readValueFromPointer = lb;
  U.prototype.deleteObject = function (a) {
    if (null !== a) a["delete"]();
  };
  U.prototype.fromWireType = function (a) {
    function b() {
      return this.D
        ? rb(this.b.u, { f: this.Y, c: d, h: this, g: a })
        : rb(this.b.u, { f: this, c: a });
    }
    var d = this.U(a);
    if (!d) return this.K(a), null;
    var e = qb(this.b, d);
    if (void 0 !== e) {
      if (0 === e.a.count.value) return (e.a.c = d), (e.a.g = a), e.clone();
      e = e.clone();
      this.K(a);
      return e;
    }
    e = this.b.T(d);
    e = db[e];
    if (!e) return b.call(this);
    e = this.C ? e.R : e.pointerType;
    var f = ob(d, this.b, e.b);
    return null === f
      ? b.call(this)
      : this.D
      ? rb(e.b.u, { f: e, c: f, h: this, g: a })
      : rb(e.b.u, { f: e, c: f });
  };
  c.getInheritedInstanceCount = function () {
    return Object.keys(pb).length;
  };
  c.getLiveInheritedInstances = function () {
    var a = [],
      b;
    for (b in pb) pb.hasOwnProperty(b) && a.push(pb[b]);
    return a;
  };
  c.flushPendingDeletes = cb;
  c.setDelayFunction = function (a) {
    $a = a;
    ab.length && $a && $a(cb);
  };
  tb = c.UnboundTypeError = Va("UnboundTypeError");
  c.count_emval_handles = function () {
    for (var a = 0, b = 5; b < Y.length; ++b) void 0 !== Y[b] && ++a;
    return a;
  };
  c.get_first_emval = function () {
    for (var a = 5; a < Y.length; ++a) if (void 0 !== Y[a]) return Y[a];
    return null;
  };
  var Jb = C;
  C = (C + 4 + 15) & -16;
  xa = Jb;
  ta = ua = ia(C);
  va = ta + za;
  wa = ia(va);
  A[xa >> 2] = wa;
  c.wasmTableSize = 83;
  c.wasmMaxTableSize = 83;
  c.N = {};
  c.O = {
    abort: y,
    enlargeMemory: function () {
      ya();
    },
    getTotalMemory: function () {
      return E;
    },
    abortOnCannotGrowMemory: ya,
    ___setErrNo: function (a) {
      c.___errno_location && (A[c.___errno_location() >> 2] = a);
      return a;
    },
    ___syscall140: function (a, b) {
      H = b;
      try {
        var d = Pa.V();
        I();
        var e = I(),
          f = I(),
          l = I();
        FS.ea(d, e, l);
        A[f >> 2] = d.position;
        d.W && 0 === e && 0 === l && (d.W = null);
        return 0;
      } catch (h) {
        return ("undefined" !== typeof FS && h instanceof FS.I) || y(h), -h.L;
      }
    },
    ___syscall146: J,
    ___syscall54: function (a, b) {
      H = b;
      return 0;
    },
    ___syscall6: function (a, b) {
      H = b;
      try {
        var d = Pa.V();
        FS.close(d);
        return 0;
      } catch (e) {
        return ("undefined" !== typeof FS && e instanceof FS.I) || y(e), -e.L;
      }
    },
    __embind_register_bool: function (a, b, d, e, f) {
      var l = Qa(d);
      b = K(b);
      Q(a, {
        name: b,
        fromWireType: function (a) {
          return !!a;
        },
        toWireType: function (a, b) {
          return b ? e : f;
        },
        argPackAdvance: 8,
        readValueFromPointer: function (a) {
          if (1 === d) var e = ma;
          else if (2 === d) e = na;
          else if (4 === d) e = A;
          else throw new TypeError("Unknown boolean type size: " + b);
          return this.fromWireType(e[a >> l]);
        },
        l: null,
      });
    },
    __embind_register_class: function (a, b, d, e, f, l, h, k, m, p, g, q, D) {
      g = K(g);
      l = V(f, l);
      k && (k = V(h, k));
      p && (p = V(m, p));
      D = V(q, D);
      var t = Ta(g);
      fb(t, function () {
        xb("Cannot construct " + g + " due to unbound types", [e]);
      });
      Ya([a, b, d], e ? [e] : [], function (b) {
        b = b[0];
        if (e) {
          var d = b.b;
          var f = d.u;
        } else f = R.prototype;
        b = Ua(t, function () {
          if (Object.getPrototypeOf(this) !== h)
            throw new O("Use 'new' to construct " + g);
          if (void 0 === m.m) throw new O(g + " has no accessible constructor");
          var a = m.m[arguments.length];
          if (void 0 === a)
            throw new O(
              "Tried to invoke ctor of " +
                g +
                " with invalid number of parameters (" +
                arguments.length +
                ") - expected (" +
                Object.keys(m.m).toString() +
                ") parameters instead!"
            );
          return a.apply(this, arguments);
        });
        var h = Object.create(f, { constructor: { value: b } });
        b.prototype = h;
        var m = new gb(g, b, h, D, d, l, k, p);
        d = new U(g, m, !0, !1, !1);
        f = new U(g + "*", m, !1, !1, !1);
        var q = new U(g + " const*", m, !1, !0, !1);
        db[a] = { pointerType: f, R: q };
        sb(t, b);
        return [d, f, q];
      });
    },
    __embind_register_class_constructor: function (a, b, d, e, f, l) {
      var h = yb(b, d);
      f = V(e, f);
      Ya([], [a], function (a) {
        a = a[0];
        var d = "constructor " + a.name;
        void 0 === a.b.m && (a.b.m = []);
        if (void 0 !== a.b.m[b - 1])
          throw new O(
            "Cannot register multiple constructors with identical number of parameters (" +
              (b - 1) +
              ") for class '" +
              a.name +
              "'! Overload resolution is currently only performed using the parameter count, not actual type info!"
          );
        a.b.m[b - 1] = function () {
          xb("Cannot construct " + a.name + " due to unbound types", h);
        };
        Ya([], h, function (e) {
          a.b.m[b - 1] = function () {
            arguments.length !== b - 1 &&
              P(
                d +
                  " called with " +
                  arguments.length +
                  " arguments, expected " +
                  (b - 1)
              );
            var a = [],
              h = Array(b);
            h[0] = l;
            for (var k = 1; k < b; ++k)
              h[k] = e[k].toWireType(a, arguments[k - 1]);
            h = f.apply(null, h);
            zb(a);
            return e[0].fromWireType(h);
          };
          return [];
        });
        return [];
      });
    },
    __embind_register_class_function: function (a, b, d, e, f, l, h, k) {
      var m = yb(d, e);
      b = K(b);
      l = V(f, l);
      Ya([], [a], function (a) {
        function e() {
          xb("Cannot call " + f + " due to unbound types", m);
        }
        a = a[0];
        var f = a.name + "." + b;
        k && a.b.Z.push(b);
        var p = a.b.u,
          t = p[b];
        void 0 === t ||
        (void 0 === t.j && t.className !== a.name && t.A === d - 2)
          ? ((e.A = d - 2), (e.className = a.name), (p[b] = e))
          : (eb(p, b, f), (p[b].j[d - 2] = e));
        Ya([], m, function (e) {
          var k = f,
            g = a,
            m = l,
            q = e.length;
          2 > q &&
            P(
              "argTypes array size mismatch! Must at least get return value and 'this' types!"
            );
          var t = null !== e[1] && null !== g,
            D = !1;
          for (g = 1; g < e.length; ++g)
            if (null !== e[g] && void 0 === e[g].l) {
              D = !0;
              break;
            }
          var mb = "void" !== e[0].name,
            N = "",
            W = "";
          for (g = 0; g < q - 2; ++g)
            (N += (0 !== g ? ", " : "") + "arg" + g),
              (W += (0 !== g ? ", " : "") + "arg" + g + "Wired");
          k =
            "return function " +
            Ta(k) +
            "(" +
            N +
            ") {\nif (arguments.length !== " +
            (q - 2) +
            ") {\nthrowBindingError('function " +
            k +
            " called with ' + arguments.length + ' arguments, expected " +
            (q - 2) +
            " args!');\n}\n";
          D && (k += "var destructors = [];\n");
          var nb = D ? "destructors" : "null";
          N =
            "throwBindingError invoker fn runDestructors retType classParam".split(
              " "
            );
          m = [P, m, h, zb, e[0], e[1]];
          t &&
            (k += "var thisWired = classParam.toWireType(" + nb + ", this);\n");
          for (g = 0; g < q - 2; ++g)
            (k +=
              "var arg" +
              g +
              "Wired = argType" +
              g +
              ".toWireType(" +
              nb +
              ", arg" +
              g +
              "); // " +
              e[g + 2].name +
              "\n"),
              N.push("argType" + g),
              m.push(e[g + 2]);
          t && (W = "thisWired" + (0 < W.length ? ", " : "") + W);
          k +=
            (mb ? "var rv = " : "") +
            "invoker(fn" +
            (0 < W.length ? ", " : "") +
            W +
            ");\n";
          if (D) k += "runDestructors(destructors);\n";
          else
            for (g = t ? 1 : 2; g < e.length; ++g)
              (q = 1 === g ? "thisWired" : "arg" + (g - 2) + "Wired"),
                null !== e[g].l &&
                  ((k += q + "_dtor(" + q + "); // " + e[g].name + "\n"),
                  N.push(q + "_dtor"),
                  m.push(e[g].l));
          mb && (k += "var ret = retType.fromWireType(rv);\nreturn ret;\n");
          N.push(k + "}\n");
          e = Ab(N).apply(null, m);
          void 0 === p[b].j ? ((e.A = d - 2), (p[b] = e)) : (p[b].j[d - 2] = e);
          return [];
        });
        return [];
      });
    },
    __embind_register_emval: function (a, b) {
      b = K(b);
      Q(a, {
        name: b,
        fromWireType: function (a) {
          var b = Y[a].value;
          Cb(a);
          return b;
        },
        toWireType: function (a, b) {
          return T(b);
        },
        argPackAdvance: 8,
        readValueFromPointer: lb,
        l: null,
      });
    },
    __embind_register_float: function (a, b, d) {
      d = Qa(d);
      b = K(b);
      Q(a, {
        name: b,
        fromWireType: function (a) {
          return a;
        },
        toWireType: function (a, b) {
          if ("number" !== typeof b && "boolean" !== typeof b)
            throw new TypeError(
              'Cannot convert "' + S(b) + '" to ' + this.name
            );
          return b;
        },
        argPackAdvance: 8,
        readValueFromPointer: Db(b, d),
        l: null,
      });
    },
    __embind_register_integer: function (a, b, d, e, f) {
      function l(a) {
        return a;
      }
      b = K(b);
      -1 === f && (f = 4294967295);
      var h = Qa(d);
      if (0 === e) {
        var k = 32 - 8 * d;
        l = function (a) {
          return (a << k) >>> k;
        };
      }
      var m = -1 != b.indexOf("unsigned");
      Q(a, {
        name: b,
        fromWireType: l,
        toWireType: function (a, d) {
          if ("number" !== typeof d && "boolean" !== typeof d)
            throw new TypeError(
              'Cannot convert "' + S(d) + '" to ' + this.name
            );
          if (d < e || d > f)
            throw new TypeError(
              'Passing a number "' +
                S(d) +
                '" from JS side to C/C++ side to an argument of type "' +
                b +
                '", which is outside the valid range [' +
                e +
                ", " +
                f +
                "]!"
            );
          return m ? d >>> 0 : d | 0;
        },
        argPackAdvance: 8,
        readValueFromPointer: Eb(b, h, 0 !== e),
        l: null,
      });
    },
    __embind_register_memory_view: function (a, b, d) {
      function e(a) {
        a >>= 2;
        var b = B;
        return new f(b.buffer, b[a + 1], b[a]);
      }
      var f = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,
      ][b];
      d = K(d);
      Q(
        a,
        {
          name: d,
          fromWireType: e,
          argPackAdvance: 8,
          readValueFromPointer: e,
        },
        { X: !0 }
      );
    },
    __embind_register_std_string: function (a, b) {
      b = K(b);
      Q(a, {
        name: b,
        fromWireType: function (a) {
          for (var b = B[a >> 2], d = Array(b), l = 0; l < b; ++l)
            d[l] = String.fromCharCode(z[a + 4 + l]);
          X(a);
          return d.join("");
        },
        toWireType: function (a, b) {
          function d(a, b) {
            return a[b];
          }
          function e(a, b) {
            return a.charCodeAt(b);
          }
          b instanceof ArrayBuffer && (b = new Uint8Array(b));
          var h;
          b instanceof Uint8Array
            ? (h = d)
            : b instanceof Uint8ClampedArray
            ? (h = d)
            : b instanceof Int8Array
            ? (h = d)
            : "string" === typeof b
            ? (h = e)
            : P("Cannot pass non-string to std::string");
          var k = b.length,
            m = Kb(4 + k);
          B[m >> 2] = k;
          for (var p = 0; p < k; ++p) {
            var g = h(b, p);
            255 < g &&
              (X(m),
              P("String has UTF-16 code units that do not fit in 8 bits"));
            z[m + 4 + p] = g;
          }
          null !== a && a.push(X, m);
          return m;
        },
        argPackAdvance: 8,
        readValueFromPointer: lb,
        l: function (a) {
          X(a);
        },
      });
    },
    __embind_register_std_wstring: function (a, b, d) {
      d = K(d);
      if (2 === b) {
        var e = function () {
          return oa;
        };
        var f = 1;
      } else
        4 === b &&
          ((e = function () {
            return B;
          }),
          (f = 2));
      Q(a, {
        name: d,
        fromWireType: function (a) {
          for (
            var b = e(), d = B[a >> 2], l = Array(d), p = (a + 4) >> f, g = 0;
            g < d;
            ++g
          )
            l[g] = String.fromCharCode(b[p + g]);
          X(a);
          return l.join("");
        },
        toWireType: function (a, d) {
          var k = e(),
            h = d.length,
            l = Kb(4 + h * b);
          B[l >> 2] = h;
          for (var g = (l + 4) >> f, q = 0; q < h; ++q)
            k[g + q] = d.charCodeAt(q);
          null !== a && a.push(X, l);
          return l;
        },
        argPackAdvance: 8,
        readValueFromPointer: lb,
        l: function (a) {
          X(a);
        },
      });
    },
    __embind_register_void: function (a, b) {
      b = K(b);
      Q(a, {
        da: !0,
        name: b,
        argPackAdvance: 0,
        fromWireType: function () {},
        toWireType: function () {},
      });
    },
    __emval_as: function (a, b, d) {
      a = Z(a);
      b = Fb(b, "emval::as");
      var e = [],
        f = T(e);
      A[d >> 2] = f;
      return b.toWireType(e, a);
    },
    __emval_decref: Cb,
    __emval_get_property: function (a, b) {
      a = Z(a);
      b = Z(b);
      return T(a[b]);
    },
    __emval_incref: function (a) {
      4 < a && (Y[a].H += 1);
    },
    __emval_new_array: function () {
      return T([]);
    },
    __emval_new_cstring: function (a) {
      var b = Gb[a];
      return T(void 0 === b ? K(a) : b);
    },
    __emval_new_object: function () {
      return T({});
    },
    __emval_run_destructors: function (a) {
      zb(Y[a].value);
      Cb(a);
    },
    __emval_set_property: function (a, b, d) {
      a = Z(a);
      b = Z(b);
      d = Z(d);
      a[b] = d;
    },
    __emval_take_value: function (a, b) {
      a = Fb(a, "_emval_take_value");
      a = a.readValueFromPointer(b);
      return T(a);
    },
    _abort: function () {
      c.abort();
    },
    _emscripten_memcpy_big: function (a, b, d) {
      z.set(z.subarray(b, b + d), a);
      return a;
    },
    _llvm_cos_f32: Ha,
    _llvm_log10_f32: function (a) {
      return Math.log(a) / Math.LN10;
    },
    _llvm_sin_f32: Ia,
    DYNAMICTOP_PTR: xa,
    STACKTOP: ua,
  };
  var Lb = c.asm(c.N, c.O, buffer);
  c.asm = Lb;
  var Oa = (c.__GLOBAL__sub_I_bind_cpp = function () {
      return c.asm.__GLOBAL__sub_I_bind_cpp.apply(null, arguments);
    }),
    La = (c.__GLOBAL__sub_I_fft_cc = function () {
      return c.asm.__GLOBAL__sub_I_fft_cc.apply(null, arguments);
    }),
    Na = (c.__GLOBAL__sub_I_pitch_cc = function () {
      return c.asm.__GLOBAL__sub_I_pitch_cc.apply(null, arguments);
    }),
    Ma = (c.__GLOBAL__sub_I_tempo_cc = function () {
      return c.asm.__GLOBAL__sub_I_tempo_cc.apply(null, arguments);
    }),
    wb = (c.___getTypeName = function () {
      return c.asm.___getTypeName.apply(null, arguments);
    }),
    X = (c._free = function () {
      return c.asm._free.apply(null, arguments);
    }),
    Kb = (c._malloc = function () {
      return c.asm._malloc.apply(null, arguments);
    });
  c.dynCall_ffii = function () {
    return c.asm.dynCall_ffii.apply(null, arguments);
  };
  c.dynCall_fi = function () {
    return c.asm.dynCall_fi.apply(null, arguments);
  };
  c.dynCall_fii = function () {
    return c.asm.dynCall_fii.apply(null, arguments);
  };
  c.dynCall_fiii = function () {
    return c.asm.dynCall_fiii.apply(null, arguments);
  };
  c.dynCall_ii = function () {
    return c.asm.dynCall_ii.apply(null, arguments);
  };
  c.dynCall_iii = function () {
    return c.asm.dynCall_iii.apply(null, arguments);
  };
  c.dynCall_iiii = function () {
    return c.asm.dynCall_iiii.apply(null, arguments);
  };
  c.dynCall_iiiii = function () {
    return c.asm.dynCall_iiiii.apply(null, arguments);
  };
  c.dynCall_iiiiii = function () {
    return c.asm.dynCall_iiiiii.apply(null, arguments);
  };
  c.dynCall_v = function () {
    return c.asm.dynCall_v.apply(null, arguments);
  };
  c.dynCall_vi = function () {
    return c.asm.dynCall_vi.apply(null, arguments);
  };
  c.dynCall_viii = function () {
    return c.asm.dynCall_viii.apply(null, arguments);
  };
  c.asm = Lb;
  c.then = function (a) {
    if (c.calledRun) a(c);
    else {
      var b = c.onRuntimeInitialized;
      c.onRuntimeInitialized = function () {
        b && b();
        a(c);
      };
    }
    return c;
  };
  G = function Mb() {
    c.calledRun || Nb();
    c.calledRun || (G = Mb);
  };
  function Nb() {
    function a() {
      if (!c.calledRun && ((c.calledRun = !0), !ka)) {
        Fa || ((Fa = !0), Aa(Ca));
        Aa(Da);
        if (c.onRuntimeInitialized) c.onRuntimeInitialized();
        if (c.postRun)
          for (
            "function" == typeof c.postRun && (c.postRun = [c.postRun]);
            c.postRun.length;

          ) {
            var a = c.postRun.shift();
            Ea.unshift(a);
          }
        Aa(Ea);
      }
    }
    if (!(0 < F)) {
      if (c.preRun)
        for (
          "function" == typeof c.preRun && (c.preRun = [c.preRun]);
          c.preRun.length;

        )
          Ga();
      Aa(Ba);
      0 < F ||
        c.calledRun ||
        (c.setStatus
          ? (c.setStatus("Running..."),
            setTimeout(function () {
              setTimeout(function () {
                c.setStatus("");
              }, 1);
              a();
            }, 1))
          : a());
    }
  }
  c.run = Nb;
  function y(a) {
    if (c.onAbort) c.onAbort(a);
    void 0 !== a ? (ha(a), x(a), (a = JSON.stringify(a))) : (a = "");
    ka = !0;
    throw "abort(" + a + "). Build with -s ASSERTIONS=1 for more info.";
  }
  c.abort = y;
  if (c.preInit)
    for (
      "function" == typeof c.preInit && (c.preInit = [c.preInit]);
      0 < c.preInit.length;

    )
      c.preInit.pop()();
  c.noExitRuntime = !0;
  Nb();

  return Aubio;
};
Aubio = Aubio.bind({
  _currentScript:
    typeof document !== "undefined" ? document.currentScript : undefined,
});
module.exports = Aubio;
});

/* src/routes/gadget/tuner.svelte generated by Svelte v3.38.1 */

const { console: console_1 } = globals;
const file = "src/routes/gadget/tuner.svelte";

function create_fragment(ctx) {
	let div2;
	let canvas;
	let t0;
	let meter;
	let t1;
	let notes;
	let t2;
	let div0;
	let span0;
	let t3;
	let t4;
	let div1;
	let t5;
	let sub;
	let t6;
	let t7;
	let span1;
	let t8;
	let t9;
	let current;
	meter = new Meter({ props: { deg: 45 }, $$inline: true });
	notes = new Notes({ $$inline: true });

	const block = {
		c: function create() {
			div2 = element("div");
			canvas = element("canvas");
			t0 = space();
			create_component(meter.$$.fragment);
			t1 = space();
			create_component(notes.$$.fragment);
			t2 = space();
			div0 = element("div");
			span0 = element("span");
			t3 = text("Hz");
			t4 = space();
			div1 = element("div");
			t5 = text("A");
			sub = element("sub");
			t6 = text("4");
			t7 = text(" = ");
			span1 = element("span");
			t8 = text("440");
			t9 = text(" Hz");
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { style: true });
			var div2_nodes = children(div2);
			canvas = claim_element(div2_nodes, "CANVAS", { class: true });
			children(canvas).forEach(detach_dev);
			t0 = claim_space(div2_nodes);
			claim_component(meter.$$.fragment, div2_nodes);
			t1 = claim_space(div2_nodes);
			claim_component(notes.$$.fragment, div2_nodes);
			t2 = claim_space(div2_nodes);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			span0 = claim_element(div0_nodes, "SPAN", {});
			var span0_nodes = children(span0);
			t3 = claim_text(span0_nodes, "Hz");
			span0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t5 = claim_text(div1_nodes, "A");
			sub = claim_element(div1_nodes, "SUB", {});
			var sub_nodes = children(sub);
			t6 = claim_text(sub_nodes, "4");
			sub_nodes.forEach(detach_dev);
			t7 = claim_text(div1_nodes, " = ");
			span1 = claim_element(div1_nodes, "SPAN", {});
			var span1_nodes = children(span1);
			t8 = claim_text(span1_nodes, "440");
			span1_nodes.forEach(detach_dev);
			t9 = claim_text(div1_nodes, " Hz");
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(canvas, "class", "frequency-bars");
			add_location(canvas, file, 65, 3, 1884);
			add_location(span0, file, 68, 27, 1987);
			attr_dev(div0, "class", "frequency");
			add_location(div0, file, 68, 4, 1964);
			add_location(sub, file, 69, 21, 2030);
			add_location(span1, file, 69, 36, 2045);
			attr_dev(div1, "class", "a4");
			add_location(div1, file, 69, 4, 2013);
			set_style(div2, "height", "100%");
			set_style(div2, "width", "100%");
			add_location(div2, file, 64, 0, 1840);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, canvas);
			append_dev(div2, t0);
			mount_component(meter, div2, null);
			append_dev(div2, t1);
			mount_component(notes, div2, null);
			append_dev(div2, t2);
			append_dev(div2, div0);
			append_dev(div0, span0);
			append_dev(span0, t3);
			append_dev(div2, t4);
			append_dev(div2, div1);
			append_dev(div1, t5);
			append_dev(div1, sub);
			append_dev(sub, t6);
			append_dev(div1, t7);
			append_dev(div1, span1);
			append_dev(span1, t8);
			append_dev(div1, t9);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(meter.$$.fragment, local);
			transition_in(notes.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(meter.$$.fragment, local);
			transition_out(notes.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_component(meter);
			destroy_component(notes);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const bufferSize = 4096;

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Tuner", slots, []);
	const pitchDetector = null; // 计算音高的方法，等Aubio加载之后才能定义
	const audioContext = new window.AudioContext();
	const analyser = audioContext.createAnalyser();
	const scriptProcessor = audioContext.createScriptProcessor(bufferSize, 1, 1);

	const getNote = function (frequency) {
		const note = 12 * (Math.log(frequency / middleA) / Math.log(2));
		return Math.round(note) + semitone;
	};

	const startRecord = () => {
		navigator.mediaDevices.getUserMedia({ audio: true }).then(function (stream) {
			audioContext.createMediaStreamSource(stream).connect(analyser);
			analyser.connect(scriptProcessor);
			scriptProcessor.connect(audioContext.destination);

			scriptProcessor.addEventListener("audioprocess", function (event) {
				console.log("3");
				const frequency = pitchDetector.do(event.inputBuffer.getChannelData(0));

				if (frequency && onNoteDetected) {
					const note = getNote(frequency);
					console.log("note", note);
				} //  onNoteDetected({
				//   name:  noteStrings[note % 12],
			}); //   value: note,
			//   cents:  getCents(frequency, note),
			//   octave: parseInt(note / 12) - 1,
			//   frequency: frequency
		}).catch(function (error) {
			alert(error.name + ": " + error.message); // })
		});
	};

	aubio().then(function (aubio) {
		console.log("2");
		pitchDetector = new aubio.Pitch("default", bufferSize, 1, audioContext.sampleRate);
		startRecord();
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Tuner> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		Notes,
		Meter,
		Aubio: aubio,
		pitchDetector,
		audioContext,
		analyser,
		bufferSize,
		scriptProcessor,
		getNote,
		startRecord
	});

	return [];
}

class Tuner extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tuner",
			options,
			id: create_fragment.name
		});
	}
}

export default Tuner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
